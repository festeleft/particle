
/Users/psahota/dev/particle/fireplace-thermostat/target/fireplace-thermostat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fd8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a1ff0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000001c  20000300  080a1ff4  00020300  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000594  20000320  20000320  00030320  2**3
                  ALLOC
  5 .module_info_suffix 00000028  080a2010  080a2010  00022010  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a2038  080a2038  00022038  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000905a2  00000000  00000000  0002203c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000dc80  00000000  00000000  000b25de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f875  00000000  00000000  000c025e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000018c0  00000000  00000000  000cfad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002980  00000000  00000000  000d1393  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000230b4  00000000  00000000  000d3d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ef63  00000000  00000000  000f6dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00090898  00000000  00000000  00115d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a408  00000000  00000000  001a65c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	bc 1d 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fea9 	bl	80a1d84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 feae 	bl	80a1d9a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a1ff4 	.word	0x080a1ff4
 80a004c:	2000031c 	.word	0x2000031c
 80a0050:	20000320 	.word	0x20000320
 80a0054:	200008b4 	.word	0x200008b4
 80a0058:	200008b4 	.word	0x200008b4

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fdc7 	bl	80a0bf0 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1fb8 	.word	0x080a1fb8
 80a0084:	080a1fec 	.word	0x080a1fec

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b812 	b.w	80a00b0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f839 	bl	80a0104 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bd69 	b.w	80a0b6c <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 bacd 	b.w	80a0638 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:

double g_rotation = 0;

// setup() runs once, when the device is first turned on.
// Put initialization like pinMode and begin functions here.
void setup() {
 80a00b0:	b508      	push	{r3, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a00b2:	2209      	movs	r2, #9
 80a00b4:	2300      	movs	r3, #0
 80a00b6:	490c      	ldr	r1, [pc, #48]	; (80a00e8 <setup+0x38>)
 80a00b8:	480c      	ldr	r0, [pc, #48]	; (80a00ec <setup+0x3c>)
 80a00ba:	f000 faad 	bl	80a0618 <spark_variable>
 80a00be:	2300      	movs	r3, #0
 80a00c0:	2209      	movs	r2, #9
 80a00c2:	490b      	ldr	r1, [pc, #44]	; (80a00f0 <setup+0x40>)
 80a00c4:	480b      	ldr	r0, [pc, #44]	; (80a00f4 <setup+0x44>)
 80a00c6:	f000 faa7 	bl	80a0618 <spark_variable>
 80a00ca:	2300      	movs	r3, #0
 80a00cc:	2209      	movs	r2, #9
 80a00ce:	490a      	ldr	r1, [pc, #40]	; (80a00f8 <setup+0x48>)
 80a00d0:	480a      	ldr	r0, [pc, #40]	; (80a00fc <setup+0x4c>)
 80a00d2:	f000 faa1 	bl	80a0618 <spark_variable>
  //Particle.variable("state", &g_state, INT);

  // TODO need to publish remoteoverride and add state
  // Particle.function("publish", publishCommand);

  pinMode(POT_PIN, INPUT);
 80a00d6:	200b      	movs	r0, #11
 80a00d8:	2100      	movs	r1, #0
 80a00da:	f000 fdd1 	bl	80a0c80 <pinMode>

  dht.begin();
}
 80a00de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // TODO need to publish remoteoverride and add state
  // Particle.function("publish", publishCommand);

  pinMode(POT_PIN, INPUT);

  dht.begin();
 80a00e2:	4807      	ldr	r0, [pc, #28]	; (80a0100 <setup+0x50>)
 80a00e4:	f000 b86b 	b.w	80a01be <_ZN3DHT5beginEv>
 80a00e8:	20000300 	.word	0x20000300
 80a00ec:	080a1dd0 	.word	0x080a1dd0
 80a00f0:	20000308 	.word	0x20000308
 80a00f4:	080a1ddc 	.word	0x080a1ddc
 80a00f8:	20000310 	.word	0x20000310
 80a00fc:	080a1de5 	.word	0x080a1de5
 80a0100:	20000324 	.word	0x20000324

080a0104 <loop>:
}

// TODO Blink LED on ERROR

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Since temperature and humidity reading is slow we don't really have to
  // read then every time let's do it every 20s or so; a fireplace is not going
  // to change the heat in the room so much faster than that.
  //
  failure = 0;  // clear failure flag before attempt to read the sensors
  humidity = dht.getHumidity();
 80a0108:	4c1b      	ldr	r4, [pc, #108]	; (80a0178 <loop+0x74>)
 80a010a:	4620      	mov	r0, r4
 80a010c:	f000 f93e 	bl	80a038c <_ZN3DHT11getHumidityEv>
 80a0110:	4607      	mov	r7, r0
  delay(50);
 80a0112:	2032      	movs	r0, #50	; 0x32
 80a0114:	f000 fa98 	bl	80a0648 <delay>
  temperature = dht.getTempCelcius();
 80a0118:	4620      	mov	r0, r4
 80a011a:	f000 f90d 	bl	80a0338 <_ZN3DHT14getTempCelciusEv>
 80a011e:	4680      	mov	r8, r0

  //
  // measure the rotation of the potentiometer to determine the target temperature
  //
  rotation = analogRead(POT_PIN);
 80a0120:	200b      	movs	r0, #11
 80a0122:	f000 fdea 	bl	80a0cfa <analogRead>
 80a0126:	f001 fc7b 	bl	80a1a20 <__aeabi_i2f>
  // 4100 / 25 -> Interval of 164 or 82 per half degree
  unrounded_dial_temp = rotation / 82;
  // unrounded_dial_temp is twice what it should be since we divided by 82 instead of
  // 164 but we want to round it before we divide by 2 to get it to line up on
  // even .5 degree increments
  dial_temp = round(unrounded_dial_temp) / 2;
 80a012a:	4914      	ldr	r1, [pc, #80]	; (80a017c <loop+0x78>)
  temperature = dht.getTempCelcius();

  //
  // measure the rotation of the potentiometer to determine the target temperature
  //
  rotation = analogRead(POT_PIN);
 80a012c:	4606      	mov	r6, r0
  // 4100 / 25 -> Interval of 164 or 82 per half degree
  unrounded_dial_temp = rotation / 82;
  // unrounded_dial_temp is twice what it should be since we divided by 82 instead of
  // 164 but we want to round it before we divide by 2 to get it to line up on
  // even .5 degree increments
  dial_temp = round(unrounded_dial_temp) / 2;
 80a012e:	f001 fd7f 	bl	80a1c30 <__aeabi_fdiv>
 80a0132:	f001 f955 	bl	80a13e0 <__aeabi_f2d>
 80a0136:	f000 ff9f 	bl	80a1078 <round>
 80a013a:	4604      	mov	r4, r0
    Serial.println("FAILED to read Humidity");
    failure |= ERROR_READING_HUMIDITY;
  }

  // update global (particle) variables
  g_temperature = (double) temperature;
 80a013c:	4640      	mov	r0, r8
  // 4100 / 25 -> Interval of 164 or 82 per half degree
  unrounded_dial_temp = rotation / 82;
  // unrounded_dial_temp is twice what it should be since we divided by 82 instead of
  // 164 but we want to round it before we divide by 2 to get it to line up on
  // even .5 degree increments
  dial_temp = round(unrounded_dial_temp) / 2;
 80a013e:	460d      	mov	r5, r1
    Serial.println("FAILED to read Humidity");
    failure |= ERROR_READING_HUMIDITY;
  }

  // update global (particle) variables
  g_temperature = (double) temperature;
 80a0140:	f001 f94e 	bl	80a13e0 <__aeabi_f2d>
 80a0144:	4b0e      	ldr	r3, [pc, #56]	; (80a0180 <loop+0x7c>)
 80a0146:	e9c3 0100 	strd	r0, r1, [r3]
  g_humidity = (double) humidity;
 80a014a:	4638      	mov	r0, r7
 80a014c:	f001 f948 	bl	80a13e0 <__aeabi_f2d>
 80a0150:	4b0c      	ldr	r3, [pc, #48]	; (80a0184 <loop+0x80>)
 80a0152:	e9c3 0100 	strd	r0, r1, [r3]
 
  // TODO remove once we have debugged
  g_rotation = (double) rotation;
 80a0156:	4630      	mov	r0, r6
 80a0158:	f001 f942 	bl	80a13e0 <__aeabi_f2d>
 80a015c:	4b0a      	ldr	r3, [pc, #40]	; (80a0188 <loop+0x84>)
  g_dialTemp = dial_temp;
 80a015e:	2200      	movs	r2, #0
  // update global (particle) variables
  g_temperature = (double) temperature;
  g_humidity = (double) humidity;
 
  // TODO remove once we have debugged
  g_rotation = (double) rotation;
 80a0160:	e9c3 0100 	strd	r0, r1, [r3]
  g_dialTemp = dial_temp;
 80a0164:	4b09      	ldr	r3, [pc, #36]	; (80a018c <loop+0x88>)
 80a0166:	4620      	mov	r0, r4
 80a0168:	4629      	mov	r1, r5
 80a016a:	f001 f98d 	bl	80a1488 <__aeabi_dmul>
 80a016e:	4b08      	ldr	r3, [pc, #32]	; (80a0190 <loop+0x8c>)
 80a0170:	e9c3 0100 	strd	r0, r1, [r3]
 80a0174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0178:	20000324 	.word	0x20000324
 80a017c:	42a40000 	.word	0x42a40000
 80a0180:	20000300 	.word	0x20000300
 80a0184:	20000308 	.word	0x20000308
 80a0188:	20000338 	.word	0x20000338
 80a018c:	3fe00000 	.word	0x3fe00000
 80a0190:	20000310 	.word	0x20000310

080a0194 <_GLOBAL__sub_I_g_state>:


}
 80a0194:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0196:	f000 f91d 	bl	80a03d4 <HAL_Pin_Map>
 80a019a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Off   = 0,
  On    = 1,
  Error = -1
} g_state = Off;

DHT dht(DHTPIN, DHTTYPE);
 80a019e:	2306      	movs	r3, #6
 80a01a0:	2216      	movs	r2, #22
 80a01a2:	2101      	movs	r1, #1
 80a01a4:	4801      	ldr	r0, [pc, #4]	; (80a01ac <_GLOBAL__sub_I_g_state+0x18>)
 80a01a6:	f000 b803 	b.w	80a01b0 <_ZN3DHTC1Ehhh>
 80a01aa:	bf00      	nop
 80a01ac:	20000324 	.word	0x20000324

080a01b0 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
 80a01b0:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
 80a01b2:	7203      	strb	r3, [r0, #8]
	firstreading = true;
 80a01b4:	2301      	movs	r3, #1
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
 80a01b6:	7181      	strb	r1, [r0, #6]
	_type = type;
 80a01b8:	71c2      	strb	r2, [r0, #7]
	_count = count;
	firstreading = true;
 80a01ba:	7403      	strb	r3, [r0, #16]
}
 80a01bc:	bd10      	pop	{r4, pc}

080a01be <_ZN3DHT5beginEv>:

void DHT::begin(void) {
 80a01be:	b510      	push	{r4, lr}
 80a01c0:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
 80a01c2:	2100      	movs	r1, #0
 80a01c4:	7980      	ldrb	r0, [r0, #6]
 80a01c6:	f000 fd5b 	bl	80a0c80 <pinMode>
	digitalWrite(_pin, HIGH);
 80a01ca:	2101      	movs	r1, #1
 80a01cc:	79a0      	ldrb	r0, [r4, #6]
 80a01ce:	f000 fd68 	bl	80a0ca2 <digitalWrite>
	_lastreadtime = 0;
 80a01d2:	2300      	movs	r3, #0
 80a01d4:	60e3      	str	r3, [r4, #12]
 80a01d6:	bd10      	pop	{r4, pc}

080a01d8 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
 80a01d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a01dc:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a01de:	f000 f8f1 	bl	80a03c4 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
 80a01e2:	68e3      	ldr	r3, [r4, #12]
 80a01e4:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
 80a01e6:	bf84      	itt	hi
 80a01e8:	2300      	movhi	r3, #0
 80a01ea:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a01ec:	7c23      	ldrb	r3, [r4, #16]
 80a01ee:	b93b      	cbnz	r3, 80a0200 <_ZN3DHT4readEv+0x28>
 80a01f0:	68e3      	ldr	r3, [r4, #12]
 80a01f2:	1ac0      	subs	r0, r0, r3
 80a01f4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80a01f8:	d202      	bcs.n	80a0200 <_ZN3DHT4readEv+0x28>
		return true; // return last correct measurement
 80a01fa:	2001      	movs	r0, #1
 80a01fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
 80a0200:	2500      	movs	r5, #0
 80a0202:	7425      	strb	r5, [r4, #16]
 80a0204:	f000 f8de 	bl	80a03c4 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 80a0208:	2101      	movs	r1, #1
	firstreading = false;
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
 80a020a:	60e0      	str	r0, [r4, #12]

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a020c:	7125      	strb	r5, [r4, #4]
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 80a020e:	79a0      	ldrb	r0, [r4, #6]
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a0210:	70e5      	strb	r5, [r4, #3]
 80a0212:	70a5      	strb	r5, [r4, #2]
 80a0214:	7065      	strb	r5, [r4, #1]
 80a0216:	7025      	strb	r5, [r4, #0]
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 80a0218:	f000 fd43 	bl	80a0ca2 <digitalWrite>
	delay(250);
 80a021c:	20fa      	movs	r0, #250	; 0xfa
 80a021e:	f000 fa13 	bl	80a0648 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
 80a0222:	2101      	movs	r1, #1
 80a0224:	79a0      	ldrb	r0, [r4, #6]
 80a0226:	f000 fd2b 	bl	80a0c80 <pinMode>
	digitalWrite(_pin, LOW);
 80a022a:	4629      	mov	r1, r5
 80a022c:	79a0      	ldrb	r0, [r4, #6]
 80a022e:	f000 fd38 	bl	80a0ca2 <digitalWrite>
	delay(20);
 80a0232:	2014      	movs	r0, #20
 80a0234:	f000 fa08 	bl	80a0648 <delay>
	noInterrupts();
 80a0238:	f000 fa54 	bl	80a06e4 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
 80a023c:	2101      	movs	r1, #1
 80a023e:	79a0      	ldrb	r0, [r4, #6]
 80a0240:	f000 fd2f 	bl	80a0ca2 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0244:	2028      	movs	r0, #40	; 0x28
 80a0246:	f000 f8b5 	bl	80a03b4 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
 80a024a:	4629      	mov	r1, r5
 80a024c:	79a0      	ldrb	r0, [r4, #6]
 80a024e:	f000 fd17 	bl	80a0c80 <pinMode>


boolean DHT::read(void) {
	uint8_t laststate = HIGH;
	uint8_t counter = 0;
	uint8_t j = 0, i;
 80a0252:	462e      	mov	r6, r5
	return Td;
}


boolean DHT::read(void) {
	uint8_t laststate = HIGH;
 80a0254:	2701      	movs	r7, #1
 80a0256:	f04f 0800 	mov.w	r8, #0
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
 80a025a:	79a0      	ldrb	r0, [r4, #6]
 80a025c:	f000 fd3a 	bl	80a0cd4 <digitalRead>
 80a0260:	42b8      	cmp	r0, r7
 80a0262:	fa5f f988 	uxtb.w	r9, r8
 80a0266:	d108      	bne.n	80a027a <_ZN3DHT4readEv+0xa2>
 80a0268:	2001      	movs	r0, #1
 80a026a:	f108 0801 	add.w	r8, r8, #1
 80a026e:	f000 f8a1 	bl	80a03b4 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
 80a0272:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80a0276:	d1f0      	bne.n	80a025a <_ZN3DHT4readEv+0x82>
 80a0278:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
 80a027a:	79a0      	ldrb	r0, [r4, #6]
 80a027c:	f000 fd2a 	bl	80a0cd4 <digitalRead>

		if (counter == 255) break;
 80a0280:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = digitalRead(_pin);
 80a0284:	b2c7      	uxtb	r7, r0

		if (counter == 255) break;
 80a0286:	d014      	beq.n	80a02b2 <_ZN3DHT4readEv+0xda>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
 80a0288:	2d03      	cmp	r5, #3
 80a028a:	d90e      	bls.n	80a02aa <_ZN3DHT4readEv+0xd2>
 80a028c:	07eb      	lsls	r3, r5, #31
 80a028e:	d40c      	bmi.n	80a02aa <_ZN3DHT4readEv+0xd2>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 80a0290:	08f2      	lsrs	r2, r6, #3
 80a0292:	5ca3      	ldrb	r3, [r4, r2]
			if (counter > _count)
				data[j/8] |= 1;
			j++;
 80a0294:	3601      	adds	r6, #1
		if (counter == 255) break;

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 80a0296:	005b      	lsls	r3, r3, #1
 80a0298:	b2db      	uxtb	r3, r3
 80a029a:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
 80a029c:	7a21      	ldrb	r1, [r4, #8]
				data[j/8] |= 1;
			j++;
 80a029e:	b2f6      	uxtb	r6, r6

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
			if (counter > _count)
 80a02a0:	4549      	cmp	r1, r9
				data[j/8] |= 1;
 80a02a2:	bf3c      	itt	cc
 80a02a4:	f043 0301 	orrcc.w	r3, r3, #1
 80a02a8:	54a3      	strbcc	r3, [r4, r2]
	digitalWrite(_pin, HIGH);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
 80a02aa:	3501      	adds	r5, #1
 80a02ac:	b2ed      	uxtb	r5, r5
 80a02ae:	2d55      	cmp	r5, #85	; 0x55
 80a02b0:	d1d1      	bne.n	80a0256 <_ZN3DHT4readEv+0x7e>
			j++;
		}

	}

	interrupts();
 80a02b2:	f000 fa19 	bl	80a06e8 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
 80a02b6:	2e27      	cmp	r6, #39	; 0x27
 80a02b8:	d90a      	bls.n	80a02d0 <_ZN3DHT4readEv+0xf8>
 80a02ba:	7822      	ldrb	r2, [r4, #0]
 80a02bc:	7863      	ldrb	r3, [r4, #1]
 80a02be:	7921      	ldrb	r1, [r4, #4]
 80a02c0:	4413      	add	r3, r2
 80a02c2:	78a2      	ldrb	r2, [r4, #2]
 80a02c4:	4413      	add	r3, r2
 80a02c6:	78e2      	ldrb	r2, [r4, #3]
 80a02c8:	4413      	add	r3, r2
 80a02ca:	b2db      	uxtb	r3, r3
 80a02cc:	4299      	cmp	r1, r3
 80a02ce:	d094      	beq.n	80a01fa <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}
 
	return false;
 80a02d0:	2000      	movs	r0, #0

}
 80a02d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080a02d8 <_ZN3DHT15readTemperatureEv>:
	pinMode(_pin, INPUT);
	digitalWrite(_pin, HIGH);
	_lastreadtime = 0;
}

float DHT::readTemperature() {
 80a02d8:	b570      	push	{r4, r5, r6, lr}
 80a02da:	4604      	mov	r4, r0
	float f;

	if (read()) {
 80a02dc:	f7ff ff7c 	bl	80a01d8 <_ZN3DHT4readEv>
 80a02e0:	b318      	cbz	r0, 80a032a <_ZN3DHT15readTemperatureEv+0x52>
		switch (_type) {
 80a02e2:	79e3      	ldrb	r3, [r4, #7]
 80a02e4:	2b0b      	cmp	r3, #11
 80a02e6:	d004      	beq.n	80a02f2 <_ZN3DHT15readTemperatureEv+0x1a>
 80a02e8:	d31f      	bcc.n	80a032a <_ZN3DHT15readTemperatureEv+0x52>
 80a02ea:	3b15      	subs	r3, #21
 80a02ec:	2b01      	cmp	r3, #1
 80a02ee:	d904      	bls.n	80a02fa <_ZN3DHT15readTemperatureEv+0x22>
 80a02f0:	e01b      	b.n	80a032a <_ZN3DHT15readTemperatureEv+0x52>
			case DHT11:
				f = data[2];
 80a02f2:	78a0      	ldrb	r0, [r4, #2]
 80a02f4:	f001 fb90 	bl	80a1a18 <__aeabi_ui2f>
				return f;
 80a02f8:	bd70      	pop	{r4, r5, r6, pc}
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
 80a02fa:	78a5      	ldrb	r5, [r4, #2]
 80a02fc:	f005 007f 	and.w	r0, r5, #127	; 0x7f
 80a0300:	f001 fb8e 	bl	80a1a20 <__aeabi_i2f>
				f *= 256;
 80a0304:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a0308:	f001 fbde 	bl	80a1ac8 <__aeabi_fmul>
 80a030c:	4606      	mov	r6, r0
				f += data[3];
 80a030e:	78e0      	ldrb	r0, [r4, #3]
 80a0310:	f001 fb86 	bl	80a1a20 <__aeabi_i2f>
 80a0314:	4631      	mov	r1, r6
 80a0316:	f001 facf 	bl	80a18b8 <__addsf3>
				f /= 10;
 80a031a:	4905      	ldr	r1, [pc, #20]	; (80a0330 <_ZN3DHT15readTemperatureEv+0x58>)
 80a031c:	f001 fc88 	bl	80a1c30 <__aeabi_fdiv>
				if (data[2] & 0x80)
 80a0320:	062b      	lsls	r3, r5, #24
 80a0322:	d503      	bpl.n	80a032c <_ZN3DHT15readTemperatureEv+0x54>
					f *= -1;
 80a0324:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a0328:	bd70      	pop	{r4, r5, r6, pc}
				return f;
		}
	}
	return NAN;
 80a032a:	4802      	ldr	r0, [pc, #8]	; (80a0334 <_ZN3DHT15readTemperatureEv+0x5c>)
}
 80a032c:	bd70      	pop	{r4, r5, r6, pc}
 80a032e:	bf00      	nop
 80a0330:	41200000 	.word	0x41200000
 80a0334:	7fc00000 	.word	0x7fc00000

080a0338 <_ZN3DHT14getTempCelciusEv>:
float DHT::getHumidity() {
	return readHumidity();
}

float DHT::getTempCelcius() {
	return readTemperature();
 80a0338:	f7ff bfce 	b.w	80a02d8 <_ZN3DHT15readTemperatureEv>

080a033c <_ZN3DHT12readHumidityEv>:

float DHT::convertCtoK(float c) {
	return c + 273.15;
}

float DHT::readHumidity(void) {
 80a033c:	b538      	push	{r3, r4, r5, lr}
 80a033e:	4604      	mov	r4, r0
	float f;

	if (read()) {
 80a0340:	f7ff ff4a 	bl	80a01d8 <_ZN3DHT4readEv>
 80a0344:	b1e0      	cbz	r0, 80a0380 <_ZN3DHT12readHumidityEv+0x44>
		switch (_type) {
 80a0346:	79e3      	ldrb	r3, [r4, #7]
 80a0348:	2b0b      	cmp	r3, #11
 80a034a:	d015      	beq.n	80a0378 <_ZN3DHT12readHumidityEv+0x3c>
 80a034c:	d318      	bcc.n	80a0380 <_ZN3DHT12readHumidityEv+0x44>
 80a034e:	3b15      	subs	r3, #21
 80a0350:	2b01      	cmp	r3, #1
 80a0352:	d815      	bhi.n	80a0380 <_ZN3DHT12readHumidityEv+0x44>
			case DHT11:
				f = data[0];
				return f;
			case DHT22:
			case DHT21:
				f = data[0];
 80a0354:	7820      	ldrb	r0, [r4, #0]
 80a0356:	f001 fb5f 	bl	80a1a18 <__aeabi_ui2f>
				f *= 256;
 80a035a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a035e:	f001 fbb3 	bl	80a1ac8 <__aeabi_fmul>
 80a0362:	4605      	mov	r5, r0
				f += data[1];
 80a0364:	7860      	ldrb	r0, [r4, #1]
 80a0366:	f001 fb5b 	bl	80a1a20 <__aeabi_i2f>
 80a036a:	4629      	mov	r1, r5
 80a036c:	f001 faa4 	bl	80a18b8 <__addsf3>
				f /= 10;
 80a0370:	4904      	ldr	r1, [pc, #16]	; (80a0384 <_ZN3DHT12readHumidityEv+0x48>)
 80a0372:	f001 fc5d 	bl	80a1c30 <__aeabi_fdiv>
 80a0376:	bd38      	pop	{r3, r4, r5, pc}
	float f;

	if (read()) {
		switch (_type) {
			case DHT11:
				f = data[0];
 80a0378:	7820      	ldrb	r0, [r4, #0]
 80a037a:	f001 fb4d 	bl	80a1a18 <__aeabi_ui2f>
				return f;
 80a037e:	bd38      	pop	{r3, r4, r5, pc}
				f += data[1];
				f /= 10;
				return f;
		}
	}
	return NAN;
 80a0380:	4801      	ldr	r0, [pc, #4]	; (80a0388 <_ZN3DHT12readHumidityEv+0x4c>)
}
 80a0382:	bd38      	pop	{r3, r4, r5, pc}
 80a0384:	41200000 	.word	0x41200000
 80a0388:	7fc00000 	.word	0x7fc00000

080a038c <_ZN3DHT11getHumidityEv>:
	}
	return NAN;
}

float DHT::getHumidity() {
	return readHumidity();
 80a038c:	f7ff bfd6 	b.w	80a033c <_ZN3DHT12readHumidityEv>

080a0390 <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
 80a0390:	f000 b820 	b.w	80a03d4 <HAL_Pin_Map>

080a0394 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <os_mutex_create+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	080601d0 	.word	0x080601d0

080a03a4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b02      	ldr	r3, [pc, #8]	; (80a03b0 <HAL_RNG_GetRandomNumber+0xc>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	685b      	ldr	r3, [r3, #4]
 80a03ac:	9301      	str	r3, [sp, #4]
 80a03ae:	bd08      	pop	{r3, pc}
 80a03b0:	0806019c 	.word	0x0806019c

080a03b4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a03b4:	b508      	push	{r3, lr}
 80a03b6:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <HAL_Delay_Microseconds+0xc>)
 80a03b8:	681b      	ldr	r3, [r3, #0]
 80a03ba:	68db      	ldr	r3, [r3, #12]
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	bd08      	pop	{r3, pc}
 80a03c0:	0806019c 	.word	0x0806019c

080a03c4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	695b      	ldr	r3, [r3, #20]
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	0806019c 	.word	0x0806019c

080a03d4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <HAL_Pin_Map+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	681b      	ldr	r3, [r3, #0]
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080601b0 	.word	0x080601b0

080a03e4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <HAL_Validate_Pin_Function+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	685b      	ldr	r3, [r3, #4]
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080601b0 	.word	0x080601b0

080a03f4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <HAL_Pin_Mode+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	689b      	ldr	r3, [r3, #8]
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601b0 	.word	0x080601b0

080a0404 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <HAL_Get_Pin_Mode+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	68db      	ldr	r3, [r3, #12]
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601b0 	.word	0x080601b0

080a0414 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <HAL_GPIO_Write+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	691b      	ldr	r3, [r3, #16]
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601b0 	.word	0x080601b0

080a0424 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <HAL_GPIO_Read+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	695b      	ldr	r3, [r3, #20]
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601b0 	.word	0x080601b0

080a0434 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <HAL_Interrupts_Enable_All+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	6a1b      	ldr	r3, [r3, #32]
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601b0 	.word	0x080601b0

080a0444 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <HAL_Interrupts_Disable_All+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601b0 	.word	0x080601b0

080a0454 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <HAL_ADC_Read+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601b0 	.word	0x080601b0

080a0464 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <HAL_I2C_Write_Data+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601ac 	.word	0x080601ac

080a0474 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <HAL_I2C_Available_Data+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601ac 	.word	0x080601ac

080a0484 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <HAL_I2C_Read_Data+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601ac 	.word	0x080601ac

080a0494 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <HAL_I2C_Peek_Data+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601ac 	.word	0x080601ac

080a04a4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <HAL_I2C_Flush_Data+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601ac 	.word	0x080601ac

080a04b4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <HAL_I2C_Is_Enabled+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601ac 	.word	0x080601ac

080a04c4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b03      	ldr	r3, [pc, #12]	; (80a04d4 <HAL_I2C_Init+0x10>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a04ce:	9301      	str	r3, [sp, #4]
 80a04d0:	bd08      	pop	{r3, pc}
 80a04d2:	0000      	.short	0x0000
 80a04d4:	080601ac 	.word	0x080601ac

080a04d8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <HAL_SPI_Init+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	69db      	ldr	r3, [r3, #28]
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601b4 	.word	0x080601b4

080a04e8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b02      	ldr	r3, [pc, #8]	; (80a04f4 <HAL_SPI_Is_Enabled+0xc>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	6a1b      	ldr	r3, [r3, #32]
 80a04f0:	9301      	str	r3, [sp, #4]
 80a04f2:	bd08      	pop	{r3, pc}
 80a04f4:	080601b4 	.word	0x080601b4

080a04f8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a04f8:	b508      	push	{r3, lr}
 80a04fa:	4b02      	ldr	r3, [pc, #8]	; (80a0504 <HAL_USART_Init+0xc>)
 80a04fc:	681b      	ldr	r3, [r3, #0]
 80a04fe:	699b      	ldr	r3, [r3, #24]
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	bd08      	pop	{r3, pc}
 80a0504:	080601c4 	.word	0x080601c4

080a0508 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0508:	b508      	push	{r3, lr}
 80a050a:	4b02      	ldr	r3, [pc, #8]	; (80a0514 <HAL_USART_Write_Data+0xc>)
 80a050c:	681b      	ldr	r3, [r3, #0]
 80a050e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0510:	9301      	str	r3, [sp, #4]
 80a0512:	bd08      	pop	{r3, pc}
 80a0514:	080601c4 	.word	0x080601c4

080a0518 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0518:	b508      	push	{r3, lr}
 80a051a:	4b02      	ldr	r3, [pc, #8]	; (80a0524 <HAL_USART_Available_Data+0xc>)
 80a051c:	681b      	ldr	r3, [r3, #0]
 80a051e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0520:	9301      	str	r3, [sp, #4]
 80a0522:	bd08      	pop	{r3, pc}
 80a0524:	080601c4 	.word	0x080601c4

080a0528 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0528:	b508      	push	{r3, lr}
 80a052a:	4b02      	ldr	r3, [pc, #8]	; (80a0534 <HAL_USART_Read_Data+0xc>)
 80a052c:	681b      	ldr	r3, [r3, #0]
 80a052e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0530:	9301      	str	r3, [sp, #4]
 80a0532:	bd08      	pop	{r3, pc}
 80a0534:	080601c4 	.word	0x080601c4

080a0538 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0538:	b508      	push	{r3, lr}
 80a053a:	4b02      	ldr	r3, [pc, #8]	; (80a0544 <HAL_USART_Peek_Data+0xc>)
 80a053c:	681b      	ldr	r3, [r3, #0]
 80a053e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0540:	9301      	str	r3, [sp, #4]
 80a0542:	bd08      	pop	{r3, pc}
 80a0544:	080601c4 	.word	0x080601c4

080a0548 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0548:	b508      	push	{r3, lr}
 80a054a:	4b02      	ldr	r3, [pc, #8]	; (80a0554 <HAL_USART_Flush_Data+0xc>)
 80a054c:	681b      	ldr	r3, [r3, #0]
 80a054e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0550:	9301      	str	r3, [sp, #4]
 80a0552:	bd08      	pop	{r3, pc}
 80a0554:	080601c4 	.word	0x080601c4

080a0558 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0558:	b508      	push	{r3, lr}
 80a055a:	4b02      	ldr	r3, [pc, #8]	; (80a0564 <HAL_USART_Is_Enabled+0xc>)
 80a055c:	681b      	ldr	r3, [r3, #0]
 80a055e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0560:	9301      	str	r3, [sp, #4]
 80a0562:	bd08      	pop	{r3, pc}
 80a0564:	080601c4 	.word	0x080601c4

080a0568 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0568:	b508      	push	{r3, lr}
 80a056a:	4b02      	ldr	r3, [pc, #8]	; (80a0574 <HAL_USART_Available_Data_For_Write+0xc>)
 80a056c:	681b      	ldr	r3, [r3, #0]
 80a056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0570:	9301      	str	r3, [sp, #4]
 80a0572:	bd08      	pop	{r3, pc}
 80a0574:	080601c4 	.word	0x080601c4

080a0578 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0578:	b508      	push	{r3, lr}
 80a057a:	4b02      	ldr	r3, [pc, #8]	; (80a0584 <HAL_USB_USART_Init+0xc>)
 80a057c:	681b      	ldr	r3, [r3, #0]
 80a057e:	681b      	ldr	r3, [r3, #0]
 80a0580:	9301      	str	r3, [sp, #4]
 80a0582:	bd08      	pop	{r3, pc}
 80a0584:	080601d8 	.word	0x080601d8

080a0588 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0588:	b508      	push	{r3, lr}
 80a058a:	4b02      	ldr	r3, [pc, #8]	; (80a0594 <HAL_USB_USART_Available_Data+0xc>)
 80a058c:	681b      	ldr	r3, [r3, #0]
 80a058e:	691b      	ldr	r3, [r3, #16]
 80a0590:	9301      	str	r3, [sp, #4]
 80a0592:	bd08      	pop	{r3, pc}
 80a0594:	080601d8 	.word	0x080601d8

080a0598 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0598:	b508      	push	{r3, lr}
 80a059a:	4b02      	ldr	r3, [pc, #8]	; (80a05a4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a059c:	681b      	ldr	r3, [r3, #0]
 80a059e:	695b      	ldr	r3, [r3, #20]
 80a05a0:	9301      	str	r3, [sp, #4]
 80a05a2:	bd08      	pop	{r3, pc}
 80a05a4:	080601d8 	.word	0x080601d8

080a05a8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a05a8:	b508      	push	{r3, lr}
 80a05aa:	4b02      	ldr	r3, [pc, #8]	; (80a05b4 <HAL_USB_USART_Receive_Data+0xc>)
 80a05ac:	681b      	ldr	r3, [r3, #0]
 80a05ae:	699b      	ldr	r3, [r3, #24]
 80a05b0:	9301      	str	r3, [sp, #4]
 80a05b2:	bd08      	pop	{r3, pc}
 80a05b4:	080601d8 	.word	0x080601d8

080a05b8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a05b8:	b508      	push	{r3, lr}
 80a05ba:	4b02      	ldr	r3, [pc, #8]	; (80a05c4 <HAL_USB_USART_Send_Data+0xc>)
 80a05bc:	681b      	ldr	r3, [r3, #0]
 80a05be:	69db      	ldr	r3, [r3, #28]
 80a05c0:	9301      	str	r3, [sp, #4]
 80a05c2:	bd08      	pop	{r3, pc}
 80a05c4:	080601d8 	.word	0x080601d8

080a05c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a05c8:	b508      	push	{r3, lr}
 80a05ca:	4b02      	ldr	r3, [pc, #8]	; (80a05d4 <HAL_USB_USART_Flush_Data+0xc>)
 80a05cc:	681b      	ldr	r3, [r3, #0]
 80a05ce:	6a1b      	ldr	r3, [r3, #32]
 80a05d0:	9301      	str	r3, [sp, #4]
 80a05d2:	bd08      	pop	{r3, pc}
 80a05d4:	080601d8 	.word	0x080601d8

080a05d8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a05d8:	b508      	push	{r3, lr}
 80a05da:	4b02      	ldr	r3, [pc, #8]	; (80a05e4 <set_system_mode+0xc>)
 80a05dc:	681b      	ldr	r3, [r3, #0]
 80a05de:	685b      	ldr	r3, [r3, #4]
 80a05e0:	9301      	str	r3, [sp, #4]
 80a05e2:	bd08      	pop	{r3, pc}
 80a05e4:	080601a4 	.word	0x080601a4

080a05e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a05e8:	b508      	push	{r3, lr}
 80a05ea:	4b02      	ldr	r3, [pc, #8]	; (80a05f4 <system_delay_ms+0xc>)
 80a05ec:	681b      	ldr	r3, [r3, #0]
 80a05ee:	695b      	ldr	r3, [r3, #20]
 80a05f0:	9301      	str	r3, [sp, #4]
 80a05f2:	bd08      	pop	{r3, pc}
 80a05f4:	080601a4 	.word	0x080601a4

080a05f8 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a05f8:	b508      	push	{r3, lr}
 80a05fa:	4b02      	ldr	r3, [pc, #8]	; (80a0604 <system_set_usb_request_app_handler+0xc>)
 80a05fc:	681b      	ldr	r3, [r3, #0]
 80a05fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0600:	9301      	str	r3, [sp, #4]
 80a0602:	bd08      	pop	{r3, pc}
 80a0604:	080601a4 	.word	0x080601a4

080a0608 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a0608:	b508      	push	{r3, lr}
 80a060a:	4b02      	ldr	r3, [pc, #8]	; (80a0614 <system_set_usb_request_result+0xc>)
 80a060c:	681b      	ldr	r3, [r3, #0]
 80a060e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0610:	9301      	str	r3, [sp, #4]
 80a0612:	bd08      	pop	{r3, pc}
 80a0614:	080601a4 	.word	0x080601a4

080a0618 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a0618:	b508      	push	{r3, lr}
 80a061a:	4b02      	ldr	r3, [pc, #8]	; (80a0624 <spark_variable+0xc>)
 80a061c:	681b      	ldr	r3, [r3, #0]
 80a061e:	681b      	ldr	r3, [r3, #0]
 80a0620:	9301      	str	r3, [sp, #4]
 80a0622:	bd08      	pop	{r3, pc}
 80a0624:	080601cc 	.word	0x080601cc

080a0628 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0628:	b508      	push	{r3, lr}
 80a062a:	4b02      	ldr	r3, [pc, #8]	; (80a0634 <network_ready+0xc>)
 80a062c:	681b      	ldr	r3, [r3, #0]
 80a062e:	691b      	ldr	r3, [r3, #16]
 80a0630:	9301      	str	r3, [sp, #4]
 80a0632:	bd08      	pop	{r3, pc}
 80a0634:	080601c8 	.word	0x080601c8

080a0638 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a0638:	b508      	push	{r3, lr}
 80a063a:	4b02      	ldr	r3, [pc, #8]	; (80a0644 <free+0xc>)
 80a063c:	681b      	ldr	r3, [r3, #0]
 80a063e:	685b      	ldr	r3, [r3, #4]
 80a0640:	9301      	str	r3, [sp, #4]
 80a0642:	bd08      	pop	{r3, pc}
 80a0644:	080601a0 	.word	0x080601a0

080a0648 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0648:	2100      	movs	r1, #0
 80a064a:	f7ff bfcd 	b.w	80a05e8 <system_delay_ms>

080a064e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a064e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0650:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0652:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0654:	b113      	cbz	r3, 80a065c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0656:	2203      	movs	r2, #3
 80a0658:	4601      	mov	r1, r0
 80a065a:	4798      	blx	r3
    }
 80a065c:	4620      	mov	r0, r4
 80a065e:	bd10      	pop	{r4, pc}

080a0660 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0660:	4770      	bx	lr

080a0662 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0664:	4606      	mov	r6, r0
 80a0666:	4615      	mov	r5, r2
 80a0668:	460c      	mov	r4, r1
 80a066a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a066c:	42bc      	cmp	r4, r7
 80a066e:	d006      	beq.n	80a067e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0670:	6833      	ldr	r3, [r6, #0]
 80a0672:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0676:	689b      	ldr	r3, [r3, #8]
 80a0678:	4630      	mov	r0, r6
 80a067a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a067c:	e7f6      	b.n	80a066c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a067e:	4628      	mov	r0, r5
 80a0680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0682 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0682:	2200      	movs	r2, #0
 80a0684:	7c00      	ldrb	r0, [r0, #16]
 80a0686:	f7ff beed 	b.w	80a0464 <HAL_I2C_Write_Data>

080a068a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a068a:	2100      	movs	r1, #0
 80a068c:	7c00      	ldrb	r0, [r0, #16]
 80a068e:	f7ff bef1 	b.w	80a0474 <HAL_I2C_Available_Data>

080a0692 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0692:	2100      	movs	r1, #0
 80a0694:	7c00      	ldrb	r0, [r0, #16]
 80a0696:	f7ff bef5 	b.w	80a0484 <HAL_I2C_Read_Data>

080a069a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a069a:	2100      	movs	r1, #0
 80a069c:	7c00      	ldrb	r0, [r0, #16]
 80a069e:	f7ff bef9 	b.w	80a0494 <HAL_I2C_Peek_Data>

080a06a2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a06a2:	2100      	movs	r1, #0
 80a06a4:	7c00      	ldrb	r0, [r0, #16]
 80a06a6:	f7ff befd 	b.w	80a04a4 <HAL_I2C_Flush_Data>

080a06aa <_ZN7TwoWireD0Ev>:
 80a06aa:	b510      	push	{r4, lr}
 80a06ac:	4604      	mov	r4, r0
 80a06ae:	f7ff fcf4 	bl	80a009a <_ZdlPv>
 80a06b2:	4620      	mov	r0, r4
 80a06b4:	bd10      	pop	{r4, pc}
	...

080a06b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a06b8:	b510      	push	{r4, lr}
 80a06ba:	4604      	mov	r4, r0
 80a06bc:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a06be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a06c2:	60a3      	str	r3, [r4, #8]
 80a06c4:	4b04      	ldr	r3, [pc, #16]	; (80a06d8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a06c6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a06c8:	7420      	strb	r0, [r4, #16]
 80a06ca:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a06cc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a06ce:	f7ff fef9 	bl	80a04c4 <HAL_I2C_Init>

}
 80a06d2:	4620      	mov	r0, r4
 80a06d4:	bd10      	pop	{r4, pc}
 80a06d6:	bf00      	nop
 80a06d8:	080a1df8 	.word	0x080a1df8

080a06dc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a06dc:	2100      	movs	r1, #0
 80a06de:	7c00      	ldrb	r0, [r0, #16]
 80a06e0:	f7ff bee8 	b.w	80a04b4 <HAL_I2C_Is_Enabled>

080a06e4 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a06e4:	f7ff beae 	b.w	80a0444 <HAL_Interrupts_Disable_All>

080a06e8 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a06e8:	f7ff bea4 	b.w	80a0434 <HAL_Interrupts_Enable_All>

080a06ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a06ec:	4770      	bx	lr

080a06ee <_ZN9IPAddressD0Ev>:
 80a06ee:	b510      	push	{r4, lr}
 80a06f0:	4604      	mov	r4, r0
 80a06f2:	f7ff fcd2 	bl	80a009a <_ZdlPv>
 80a06f6:	4620      	mov	r0, r4
 80a06f8:	bd10      	pop	{r4, pc}

080a06fa <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a06fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06fc:	460f      	mov	r7, r1
 80a06fe:	f100 0608 	add.w	r6, r0, #8
 80a0702:	1d05      	adds	r5, r0, #4
 80a0704:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0706:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a070a:	220a      	movs	r2, #10
 80a070c:	4638      	mov	r0, r7
 80a070e:	f000 f882 	bl	80a0816 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0712:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0714:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0716:	d007      	beq.n	80a0728 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0718:	2c00      	cmp	r4, #0
 80a071a:	d0f4      	beq.n	80a0706 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a071c:	212e      	movs	r1, #46	; 0x2e
 80a071e:	4638      	mov	r0, r7
 80a0720:	f000 f84c 	bl	80a07bc <_ZN5Print5printEc>
 80a0724:	4404      	add	r4, r0
 80a0726:	e7ee      	b.n	80a0706 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0728:	4620      	mov	r0, r4
 80a072a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a072c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a072c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a072e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0732:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0736:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a073a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a073e:	2304      	movs	r3, #4
 80a0740:	6041      	str	r1, [r0, #4]
 80a0742:	7503      	strb	r3, [r0, #20]
 80a0744:	bd10      	pop	{r4, pc}
	...

080a0748 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a074a:	4d04      	ldr	r5, [pc, #16]	; (80a075c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a074c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a074e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0752:	9500      	str	r5, [sp, #0]
 80a0754:	f7ff ffea 	bl	80a072c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0758:	b003      	add	sp, #12
 80a075a:	bd30      	pop	{r4, r5, pc}
 80a075c:	080a1e20 	.word	0x080a1e20

080a0760 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0760:	4a01      	ldr	r2, [pc, #4]	; (80a0768 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0762:	4b02      	ldr	r3, [pc, #8]	; (80a076c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0764:	601a      	str	r2, [r3, #0]
 80a0766:	4770      	bx	lr
 80a0768:	080a1ee7 	.word	0x080a1ee7
 80a076c:	20000340 	.word	0x20000340

080a0770 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0772:	4606      	mov	r6, r0
 80a0774:	460d      	mov	r5, r1
 80a0776:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0778:	2400      	movs	r4, #0
  while (size--) {
 80a077a:	42bd      	cmp	r5, r7
 80a077c:	d00c      	beq.n	80a0798 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a077e:	6833      	ldr	r3, [r6, #0]
 80a0780:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0784:	689b      	ldr	r3, [r3, #8]
 80a0786:	4630      	mov	r0, r6
 80a0788:	4798      	blx	r3
     if (chunk>=0)
 80a078a:	2800      	cmp	r0, #0
 80a078c:	db01      	blt.n	80a0792 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a078e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0790:	e7f3      	b.n	80a077a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0792:	2c00      	cmp	r4, #0
 80a0794:	bf08      	it	eq
 80a0796:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0798:	4620      	mov	r0, r4
 80a079a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a079c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a079c:	b570      	push	{r4, r5, r6, lr}
 80a079e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a07a0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a07a2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a07a4:	b149      	cbz	r1, 80a07ba <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a07a6:	f001 fb00 	bl	80a1daa <strlen>
 80a07aa:	682b      	ldr	r3, [r5, #0]
 80a07ac:	4602      	mov	r2, r0
 80a07ae:	4621      	mov	r1, r4
 80a07b0:	4628      	mov	r0, r5
    }
 80a07b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a07b6:	68db      	ldr	r3, [r3, #12]
 80a07b8:	4718      	bx	r3
    }
 80a07ba:	bd70      	pop	{r4, r5, r6, pc}

080a07bc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a07bc:	6803      	ldr	r3, [r0, #0]
 80a07be:	689b      	ldr	r3, [r3, #8]
 80a07c0:	4718      	bx	r3

080a07c2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a07c2:	2a01      	cmp	r2, #1
 80a07c4:	bf98      	it	ls
 80a07c6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a07c8:	b530      	push	{r4, r5, lr}
 80a07ca:	460b      	mov	r3, r1
 80a07cc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a07ce:	2100      	movs	r1, #0
 80a07d0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a07d4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a07d8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a07dc:	fb05 3312 	mls	r3, r5, r2, r3
 80a07e0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a07e2:	2b09      	cmp	r3, #9
 80a07e4:	bf94      	ite	ls
 80a07e6:	3330      	addls	r3, #48	; 0x30
 80a07e8:	3337      	addhi	r3, #55	; 0x37
 80a07ea:	b2db      	uxtb	r3, r3
 80a07ec:	4621      	mov	r1, r4
 80a07ee:	f804 3901 	strb.w	r3, [r4], #-1
 80a07f2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a07f4:	2d00      	cmp	r5, #0
 80a07f6:	d1ef      	bne.n	80a07d8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a07f8:	f7ff ffd0 	bl	80a079c <_ZN5Print5writeEPKc>
}
 80a07fc:	b00b      	add	sp, #44	; 0x2c
 80a07fe:	bd30      	pop	{r4, r5, pc}

080a0800 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0800:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0802:	b922      	cbnz	r2, 80a080e <_ZN5Print5printEmi+0xe>
 80a0804:	6803      	ldr	r3, [r0, #0]
 80a0806:	b2c9      	uxtb	r1, r1
 80a0808:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a080a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a080c:	4718      	bx	r3
  else return printNumber(n, base);
 80a080e:	b2d2      	uxtb	r2, r2
}
 80a0810:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0812:	f7ff bfd6 	b.w	80a07c2 <_ZN5Print11printNumberEmh>

080a0816 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0816:	f7ff bff3 	b.w	80a0800 <_ZN5Print5printEmi>

080a081a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a081a:	b510      	push	{r4, lr}
 80a081c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a081e:	f7ff ff16 	bl	80a064e <_ZNSt14_Function_baseD1Ev>
 80a0822:	4620      	mov	r0, r4
 80a0824:	bd10      	pop	{r4, pc}
	...

080a0828 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0828:	4803      	ldr	r0, [pc, #12]	; (80a0838 <_GLOBAL__sub_I_RGB+0x10>)
 80a082a:	2300      	movs	r3, #0
 80a082c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a082e:	4a03      	ldr	r2, [pc, #12]	; (80a083c <_GLOBAL__sub_I_RGB+0x14>)
 80a0830:	4903      	ldr	r1, [pc, #12]	; (80a0840 <_GLOBAL__sub_I_RGB+0x18>)
 80a0832:	f000 bad3 	b.w	80a0ddc <__aeabi_atexit>
 80a0836:	bf00      	nop
 80a0838:	20000344 	.word	0x20000344
 80a083c:	20000320 	.word	0x20000320
 80a0840:	080a081b 	.word	0x080a081b

080a0844 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0844:	4770      	bx	lr

080a0846 <_ZN8SPIClassD0Ev>:
 80a0846:	b510      	push	{r4, lr}
 80a0848:	4604      	mov	r4, r0
 80a084a:	f7ff fc26 	bl	80a009a <_ZdlPv>
 80a084e:	4620      	mov	r0, r4
 80a0850:	bd10      	pop	{r4, pc}
	...

080a0854 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0854:	b570      	push	{r4, r5, r6, lr}
 80a0856:	4604      	mov	r4, r0
 80a0858:	460e      	mov	r6, r1
 80a085a:	4b07      	ldr	r3, [pc, #28]	; (80a0878 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a085c:	2500      	movs	r5, #0
 80a085e:	6003      	str	r3, [r0, #0]
 80a0860:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0864:	f7ff fd96 	bl	80a0394 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0868:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a086a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a086c:	f7ff fe34 	bl	80a04d8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0870:	60a5      	str	r5, [r4, #8]
}
 80a0872:	4620      	mov	r0, r4
 80a0874:	bd70      	pop	{r4, r5, r6, pc}
 80a0876:	bf00      	nop
 80a0878:	080a1f18 	.word	0x080a1f18

080a087c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a087c:	7900      	ldrb	r0, [r0, #4]
 80a087e:	f7ff be33 	b.w	80a04e8 <HAL_SPI_Is_Enabled>

080a0882 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0882:	2000      	movs	r0, #0
 80a0884:	f7ff bea8 	b.w	80a05d8 <set_system_mode>

080a0888 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0888:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a088a:	681a      	ldr	r2, [r3, #0]
 80a088c:	4b02      	ldr	r3, [pc, #8]	; (80a0898 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a088e:	601a      	str	r2, [r3, #0]
 80a0890:	4770      	bx	lr
 80a0892:	bf00      	nop
 80a0894:	20000318 	.word	0x20000318
 80a0898:	20000354 	.word	0x20000354

080a089c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a089c:	4770      	bx	lr

080a089e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a089e:	7441      	strb	r1, [r0, #17]
 80a08a0:	4770      	bx	lr

080a08a2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a08a2:	7c00      	ldrb	r0, [r0, #16]
 80a08a4:	f7ff be60 	b.w	80a0568 <HAL_USART_Available_Data_For_Write>

080a08a8 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a08a8:	7c00      	ldrb	r0, [r0, #16]
 80a08aa:	f7ff be35 	b.w	80a0518 <HAL_USART_Available_Data>

080a08ae <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a08ae:	7c00      	ldrb	r0, [r0, #16]
 80a08b0:	f7ff be42 	b.w	80a0538 <HAL_USART_Peek_Data>

080a08b4 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a08b4:	7c00      	ldrb	r0, [r0, #16]
 80a08b6:	f7ff be37 	b.w	80a0528 <HAL_USART_Read_Data>

080a08ba <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a08ba:	7c00      	ldrb	r0, [r0, #16]
 80a08bc:	f7ff be44 	b.w	80a0548 <HAL_USART_Flush_Data>

080a08c0 <_ZN11USARTSerialD0Ev>:
 80a08c0:	b510      	push	{r4, lr}
 80a08c2:	4604      	mov	r4, r0
 80a08c4:	f7ff fbe9 	bl	80a009a <_ZdlPv>
 80a08c8:	4620      	mov	r0, r4
 80a08ca:	bd10      	pop	{r4, pc}

080a08cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a08cc:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a08ce:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a08d0:	4604      	mov	r4, r0
 80a08d2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a08d4:	b925      	cbnz	r5, 80a08e0 <_ZN11USARTSerial5writeEh+0x14>
 80a08d6:	7c00      	ldrb	r0, [r0, #16]
 80a08d8:	f7ff fe46 	bl	80a0568 <HAL_USART_Available_Data_For_Write>
 80a08dc:	2800      	cmp	r0, #0
 80a08de:	dd05      	ble.n	80a08ec <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a08e0:	4631      	mov	r1, r6
 80a08e2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a08e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a08e8:	f7ff be0e 	b.w	80a0508 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a08ec:	4628      	mov	r0, r5
 80a08ee:	bd70      	pop	{r4, r5, r6, pc}

080a08f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a08f0:	b510      	push	{r4, lr}
 80a08f2:	4604      	mov	r4, r0
 80a08f4:	4608      	mov	r0, r1
 80a08f6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a08f8:	2200      	movs	r2, #0
 80a08fa:	6062      	str	r2, [r4, #4]
 80a08fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0900:	60a2      	str	r2, [r4, #8]
 80a0902:	4a05      	ldr	r2, [pc, #20]	; (80a0918 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0904:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0906:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0908:	2201      	movs	r2, #1
 80a090a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a090c:	461a      	mov	r2, r3
 80a090e:	f7ff fdf3 	bl	80a04f8 <HAL_USART_Init>
}
 80a0912:	4620      	mov	r0, r4
 80a0914:	bd10      	pop	{r4, pc}
 80a0916:	bf00      	nop
 80a0918:	080a1f54 	.word	0x080a1f54

080a091c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a091c:	7c00      	ldrb	r0, [r0, #16]
 80a091e:	f7ff be1b 	b.w	80a0558 <HAL_USART_Is_Enabled>
	...

080a0924 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0924:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0926:	4d0c      	ldr	r5, [pc, #48]	; (80a0958 <_Z22__fetch_global_Serial1v+0x34>)
 80a0928:	6829      	ldr	r1, [r5, #0]
 80a092a:	f011 0401 	ands.w	r4, r1, #1
 80a092e:	d111      	bne.n	80a0954 <_Z22__fetch_global_Serial1v+0x30>
 80a0930:	4628      	mov	r0, r5
 80a0932:	f7ff fbb4 	bl	80a009e <__cxa_guard_acquire>
 80a0936:	b168      	cbz	r0, 80a0954 <_Z22__fetch_global_Serial1v+0x30>
 80a0938:	4a08      	ldr	r2, [pc, #32]	; (80a095c <_Z22__fetch_global_Serial1v+0x38>)
 80a093a:	4621      	mov	r1, r4
 80a093c:	4b08      	ldr	r3, [pc, #32]	; (80a0960 <_Z22__fetch_global_Serial1v+0x3c>)
 80a093e:	4809      	ldr	r0, [pc, #36]	; (80a0964 <_Z22__fetch_global_Serial1v+0x40>)
 80a0940:	f7ff ffd6 	bl	80a08f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0944:	4628      	mov	r0, r5
 80a0946:	f7ff fbaf 	bl	80a00a8 <__cxa_guard_release>
 80a094a:	4a07      	ldr	r2, [pc, #28]	; (80a0968 <_Z22__fetch_global_Serial1v+0x44>)
 80a094c:	4907      	ldr	r1, [pc, #28]	; (80a096c <_Z22__fetch_global_Serial1v+0x48>)
 80a094e:	4805      	ldr	r0, [pc, #20]	; (80a0964 <_Z22__fetch_global_Serial1v+0x40>)
 80a0950:	f000 fa44 	bl	80a0ddc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0954:	4803      	ldr	r0, [pc, #12]	; (80a0964 <_Z22__fetch_global_Serial1v+0x40>)
 80a0956:	bd38      	pop	{r3, r4, r5, pc}
 80a0958:	200003f0 	.word	0x200003f0
 80a095c:	200003f4 	.word	0x200003f4
 80a0960:	2000036c 	.word	0x2000036c
 80a0964:	20000358 	.word	0x20000358
 80a0968:	20000320 	.word	0x20000320
 80a096c:	080a089d 	.word	0x080a089d

080a0970 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0970:	7441      	strb	r1, [r0, #17]
 80a0972:	4770      	bx	lr

080a0974 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a0974:	4770      	bx	lr

080a0976 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a0976:	2100      	movs	r1, #0
 80a0978:	7c00      	ldrb	r0, [r0, #16]
 80a097a:	f7ff be15 	b.w	80a05a8 <HAL_USB_USART_Receive_Data>

080a097e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a097e:	2101      	movs	r1, #1
 80a0980:	7c00      	ldrb	r0, [r0, #16]
 80a0982:	f7ff be11 	b.w	80a05a8 <HAL_USB_USART_Receive_Data>

080a0986 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a0986:	7c00      	ldrb	r0, [r0, #16]
 80a0988:	f7ff be06 	b.w	80a0598 <HAL_USB_USART_Available_Data_For_Write>

080a098c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a098c:	7c00      	ldrb	r0, [r0, #16]
 80a098e:	f7ff bdfb 	b.w	80a0588 <HAL_USB_USART_Available_Data>

080a0992 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a0992:	b538      	push	{r3, r4, r5, lr}
 80a0994:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0996:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a0998:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a099a:	f7ff fdfd 	bl	80a0598 <HAL_USB_USART_Available_Data_For_Write>
 80a099e:	2800      	cmp	r0, #0
 80a09a0:	dc01      	bgt.n	80a09a6 <_ZN9USBSerial5writeEh+0x14>
 80a09a2:	7c60      	ldrb	r0, [r4, #17]
 80a09a4:	b120      	cbz	r0, 80a09b0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a09a6:	4629      	mov	r1, r5
 80a09a8:	7c20      	ldrb	r0, [r4, #16]
 80a09aa:	f7ff fe05 	bl	80a05b8 <HAL_USB_USART_Send_Data>
    return 1;
 80a09ae:	2001      	movs	r0, #1
  }
  return 0;
}
 80a09b0:	bd38      	pop	{r3, r4, r5, pc}

080a09b2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a09b2:	7c00      	ldrb	r0, [r0, #16]
 80a09b4:	f7ff be08 	b.w	80a05c8 <HAL_USB_USART_Flush_Data>

080a09b8 <_ZN9USBSerialD0Ev>:
 80a09b8:	b510      	push	{r4, lr}
 80a09ba:	4604      	mov	r4, r0
 80a09bc:	f7ff fb6d 	bl	80a009a <_ZdlPv>
 80a09c0:	4620      	mov	r0, r4
 80a09c2:	bd10      	pop	{r4, pc}

080a09c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a09c4:	b510      	push	{r4, lr}
 80a09c6:	4604      	mov	r4, r0
 80a09c8:	2300      	movs	r3, #0
 80a09ca:	6063      	str	r3, [r4, #4]
 80a09cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a09d0:	60a3      	str	r3, [r4, #8]
 80a09d2:	4b05      	ldr	r3, [pc, #20]	; (80a09e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a09d4:	4608      	mov	r0, r1
 80a09d6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a09d8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a09da:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a09dc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a09de:	4611      	mov	r1, r2
 80a09e0:	f7ff fdca 	bl	80a0578 <HAL_USB_USART_Init>
}
 80a09e4:	4620      	mov	r0, r4
 80a09e6:	bd10      	pop	{r4, pc}
 80a09e8:	080a1f84 	.word	0x080a1f84

080a09ec <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a09ec:	b510      	push	{r4, lr}
 80a09ee:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a09f0:	2214      	movs	r2, #20
 80a09f2:	2100      	movs	r1, #0
 80a09f4:	f001 f9d1 	bl	80a1d9a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a09f8:	4b05      	ldr	r3, [pc, #20]	; (80a0a10 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a09fa:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a09fc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a09fe:	4b05      	ldr	r3, [pc, #20]	; (80a0a14 <_Z19acquireSerialBufferv+0x28>)
 80a0a00:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0a02:	f240 1301 	movw	r3, #257	; 0x101
 80a0a06:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0a08:	2381      	movs	r3, #129	; 0x81
 80a0a0a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0a0c:	bd10      	pop	{r4, pc}
 80a0a0e:	bf00      	nop
 80a0a10:	200004fd 	.word	0x200004fd
 80a0a14:	2000047c 	.word	0x2000047c

080a0a18 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0a18:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0a1a:	4d0e      	ldr	r5, [pc, #56]	; (80a0a54 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0a1c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0a1e:	a801      	add	r0, sp, #4
 80a0a20:	f7ff ffe4 	bl	80a09ec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0a24:	6829      	ldr	r1, [r5, #0]
 80a0a26:	f011 0401 	ands.w	r4, r1, #1
 80a0a2a:	d110      	bne.n	80a0a4e <_Z16_fetch_usbserialv+0x36>
 80a0a2c:	4628      	mov	r0, r5
 80a0a2e:	f7ff fb36 	bl	80a009e <__cxa_guard_acquire>
 80a0a32:	b160      	cbz	r0, 80a0a4e <_Z16_fetch_usbserialv+0x36>
 80a0a34:	aa01      	add	r2, sp, #4
 80a0a36:	4621      	mov	r1, r4
 80a0a38:	4807      	ldr	r0, [pc, #28]	; (80a0a58 <_Z16_fetch_usbserialv+0x40>)
 80a0a3a:	f7ff ffc3 	bl	80a09c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a3e:	4628      	mov	r0, r5
 80a0a40:	f7ff fb32 	bl	80a00a8 <__cxa_guard_release>
 80a0a44:	4a05      	ldr	r2, [pc, #20]	; (80a0a5c <_Z16_fetch_usbserialv+0x44>)
 80a0a46:	4906      	ldr	r1, [pc, #24]	; (80a0a60 <_Z16_fetch_usbserialv+0x48>)
 80a0a48:	4803      	ldr	r0, [pc, #12]	; (80a0a58 <_Z16_fetch_usbserialv+0x40>)
 80a0a4a:	f000 f9c7 	bl	80a0ddc <__aeabi_atexit>
	return _usbserial;
}
 80a0a4e:	4802      	ldr	r0, [pc, #8]	; (80a0a58 <_Z16_fetch_usbserialv+0x40>)
 80a0a50:	b007      	add	sp, #28
 80a0a52:	bd30      	pop	{r4, r5, pc}
 80a0a54:	20000478 	.word	0x20000478
 80a0a58:	20000600 	.word	0x20000600
 80a0a5c:	20000320 	.word	0x20000320
 80a0a60:	080a0975 	.word	0x080a0975

080a0a64 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0a64:	b510      	push	{r4, lr}
 80a0a66:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0a68:	2214      	movs	r2, #20
 80a0a6a:	2100      	movs	r1, #0
 80a0a6c:	f001 f995 	bl	80a1d9a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0a70:	4b05      	ldr	r3, [pc, #20]	; (80a0a88 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0a72:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0a74:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0a76:	4b05      	ldr	r3, [pc, #20]	; (80a0a8c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0a78:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0a7a:	f240 1301 	movw	r3, #257	; 0x101
 80a0a7e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0a80:	2381      	movs	r3, #129	; 0x81
 80a0a82:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0a84:	bd10      	pop	{r4, pc}
 80a0a86:	bf00      	nop
 80a0a88:	200006b0 	.word	0x200006b0
 80a0a8c:	20000618 	.word	0x20000618

080a0a90 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0a90:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a92:	4c0e      	ldr	r4, [pc, #56]	; (80a0acc <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0a94:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0a96:	a801      	add	r0, sp, #4
 80a0a98:	f7ff ffe4 	bl	80a0a64 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a9c:	6823      	ldr	r3, [r4, #0]
 80a0a9e:	07db      	lsls	r3, r3, #31
 80a0aa0:	d410      	bmi.n	80a0ac4 <_Z17_fetch_usbserial1v+0x34>
 80a0aa2:	4620      	mov	r0, r4
 80a0aa4:	f7ff fafb 	bl	80a009e <__cxa_guard_acquire>
 80a0aa8:	b160      	cbz	r0, 80a0ac4 <_Z17_fetch_usbserial1v+0x34>
 80a0aaa:	aa01      	add	r2, sp, #4
 80a0aac:	2101      	movs	r1, #1
 80a0aae:	4808      	ldr	r0, [pc, #32]	; (80a0ad0 <_Z17_fetch_usbserial1v+0x40>)
 80a0ab0:	f7ff ff88 	bl	80a09c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0ab4:	4620      	mov	r0, r4
 80a0ab6:	f7ff faf7 	bl	80a00a8 <__cxa_guard_release>
 80a0aba:	4a06      	ldr	r2, [pc, #24]	; (80a0ad4 <_Z17_fetch_usbserial1v+0x44>)
 80a0abc:	4906      	ldr	r1, [pc, #24]	; (80a0ad8 <_Z17_fetch_usbserial1v+0x48>)
 80a0abe:	4804      	ldr	r0, [pc, #16]	; (80a0ad0 <_Z17_fetch_usbserial1v+0x40>)
 80a0ac0:	f000 f98c 	bl	80a0ddc <__aeabi_atexit>
  return _usbserial1;
}
 80a0ac4:	4802      	ldr	r0, [pc, #8]	; (80a0ad0 <_Z17_fetch_usbserial1v+0x40>)
 80a0ac6:	b006      	add	sp, #24
 80a0ac8:	bd10      	pop	{r4, pc}
 80a0aca:	bf00      	nop
 80a0acc:	20000614 	.word	0x20000614
 80a0ad0:	2000069c 	.word	0x2000069c
 80a0ad4:	20000320 	.word	0x20000320
 80a0ad8:	080a0975 	.word	0x080a0975

080a0adc <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a0adc:	4770      	bx	lr

080a0ade <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0ade:	2200      	movs	r2, #0
 80a0ae0:	4611      	mov	r1, r2
 80a0ae2:	4610      	mov	r0, r2
 80a0ae4:	f7ff bda0 	b.w	80a0628 <network_ready>

080a0ae8 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a0ae8:	4803      	ldr	r0, [pc, #12]	; (80a0af8 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a0aea:	4b04      	ldr	r3, [pc, #16]	; (80a0afc <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a0aec:	4a04      	ldr	r2, [pc, #16]	; (80a0b00 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a0aee:	4905      	ldr	r1, [pc, #20]	; (80a0b04 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a0af0:	6003      	str	r3, [r0, #0]
 80a0af2:	f000 b973 	b.w	80a0ddc <__aeabi_atexit>
 80a0af6:	bf00      	nop
 80a0af8:	200007b4 	.word	0x200007b4
 80a0afc:	080a1fb4 	.word	0x080a1fb4
 80a0b00:	20000320 	.word	0x20000320
 80a0b04:	080a0add 	.word	0x080a0add

080a0b08 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0b08:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0b0a:	4b14      	ldr	r3, [pc, #80]	; (80a0b5c <serialEventRun+0x54>)
 80a0b0c:	b133      	cbz	r3, 80a0b1c <serialEventRun+0x14>
 80a0b0e:	f7ff ff83 	bl	80a0a18 <_Z16_fetch_usbserialv>
 80a0b12:	6803      	ldr	r3, [r0, #0]
 80a0b14:	691b      	ldr	r3, [r3, #16]
 80a0b16:	4798      	blx	r3
 80a0b18:	2800      	cmp	r0, #0
 80a0b1a:	dc16      	bgt.n	80a0b4a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0b1c:	4b10      	ldr	r3, [pc, #64]	; (80a0b60 <serialEventRun+0x58>)
 80a0b1e:	b133      	cbz	r3, 80a0b2e <serialEventRun+0x26>
 80a0b20:	f7ff ff00 	bl	80a0924 <_Z22__fetch_global_Serial1v>
 80a0b24:	6803      	ldr	r3, [r0, #0]
 80a0b26:	691b      	ldr	r3, [r3, #16]
 80a0b28:	4798      	blx	r3
 80a0b2a:	2800      	cmp	r0, #0
 80a0b2c:	dc10      	bgt.n	80a0b50 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0b2e:	4b0d      	ldr	r3, [pc, #52]	; (80a0b64 <serialEventRun+0x5c>)
 80a0b30:	b10b      	cbz	r3, 80a0b36 <serialEventRun+0x2e>
 80a0b32:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0b36:	4b0c      	ldr	r3, [pc, #48]	; (80a0b68 <serialEventRun+0x60>)
 80a0b38:	b17b      	cbz	r3, 80a0b5a <serialEventRun+0x52>
 80a0b3a:	f7ff ffa9 	bl	80a0a90 <_Z17_fetch_usbserial1v>
 80a0b3e:	6803      	ldr	r3, [r0, #0]
 80a0b40:	691b      	ldr	r3, [r3, #16]
 80a0b42:	4798      	blx	r3
 80a0b44:	2800      	cmp	r0, #0
 80a0b46:	dc06      	bgt.n	80a0b56 <serialEventRun+0x4e>
 80a0b48:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0b4a:	f3af 8000 	nop.w
 80a0b4e:	e7e5      	b.n	80a0b1c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0b50:	f3af 8000 	nop.w
 80a0b54:	e7eb      	b.n	80a0b2e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0b56:	f3af 8000 	nop.w
 80a0b5a:	bd08      	pop	{r3, pc}
	...

080a0b6c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0b6c:	b508      	push	{r3, lr}
	serialEventRun();
 80a0b6e:	f7ff ffcb 	bl	80a0b08 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0b72:	f7ff fc27 	bl	80a03c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0b76:	4b01      	ldr	r3, [pc, #4]	; (80a0b7c <_post_loop+0x10>)
 80a0b78:	6018      	str	r0, [r3, #0]
 80a0b7a:	bd08      	pop	{r3, pc}
 80a0b7c:	200007c0 	.word	0x200007c0

080a0b80 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0b80:	4802      	ldr	r0, [pc, #8]	; (80a0b8c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0b82:	4a03      	ldr	r2, [pc, #12]	; (80a0b90 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0b84:	4903      	ldr	r1, [pc, #12]	; (80a0b94 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0b86:	1a12      	subs	r2, r2, r0
 80a0b88:	f001 b8fc 	b.w	80a1d84 <memcpy>
 80a0b8c:	40024000 	.word	0x40024000
 80a0b90:	40024004 	.word	0x40024004
 80a0b94:	080a1ff0 	.word	0x080a1ff0

080a0b98 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a0b98:	2000      	movs	r0, #0
 80a0b9a:	4770      	bx	lr

080a0b9c <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a0b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a0b9e:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a0ba0:	4604      	mov	r4, r0
    switch (req->type) {
 80a0ba2:	2b0a      	cmp	r3, #10
 80a0ba4:	d00e      	beq.n	80a0bc4 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a0ba6:	2b50      	cmp	r3, #80	; 0x50
 80a0ba8:	d11c      	bne.n	80a0be4 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a0baa:	4b10      	ldr	r3, [pc, #64]	; (80a0bec <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a0bac:	681d      	ldr	r5, [r3, #0]
 80a0bae:	b1cd      	cbz	r5, 80a0be4 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a0bb0:	7d03      	ldrb	r3, [r0, #20]
 80a0bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a0bb6:	9300      	str	r3, [sp, #0]
 80a0bb8:	68c2      	ldr	r2, [r0, #12]
 80a0bba:	f100 0310 	add.w	r3, r0, #16
 80a0bbe:	6880      	ldr	r0, [r0, #8]
 80a0bc0:	47a8      	blx	r5
 80a0bc2:	e007      	b.n	80a0bd4 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a0bc4:	f100 0310 	add.w	r3, r0, #16
 80a0bc8:	68c2      	ldr	r2, [r0, #12]
 80a0bca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a0bce:	6880      	ldr	r0, [r0, #8]
 80a0bd0:	f7ff ffe2 	bl	80a0b98 <_Z26usb_request_custom_handlerPcjjPj>
 80a0bd4:	b130      	cbz	r0, 80a0be4 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a0bd6:	2200      	movs	r2, #0
 80a0bd8:	4620      	mov	r0, r4
 80a0bda:	4611      	mov	r1, r2
 80a0bdc:	f7ff fd14 	bl	80a0608 <system_set_usb_request_result>
        return true;
 80a0be0:	2001      	movs	r0, #1
 80a0be2:	e000      	b.n	80a0be6 <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a0be4:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a0be6:	b003      	add	sp, #12
 80a0be8:	bd30      	pop	{r4, r5, pc}
 80a0bea:	bf00      	nop
 80a0bec:	200007b8 	.word	0x200007b8

080a0bf0 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a0bf0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0bf2:	4c0c      	ldr	r4, [pc, #48]	; (80a0c24 <module_user_init_hook+0x34>)
 80a0bf4:	4d0c      	ldr	r5, [pc, #48]	; (80a0c28 <module_user_init_hook+0x38>)
 80a0bf6:	6823      	ldr	r3, [r4, #0]
 80a0bf8:	42ab      	cmp	r3, r5
 80a0bfa:	4b0c      	ldr	r3, [pc, #48]	; (80a0c2c <module_user_init_hook+0x3c>)
 80a0bfc:	bf0c      	ite	eq
 80a0bfe:	2201      	moveq	r2, #1
 80a0c00:	2200      	movne	r2, #0
 80a0c02:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0c04:	d002      	beq.n	80a0c0c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0c06:	f7ff ffbb 	bl	80a0b80 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0c0a:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a0c0c:	4b08      	ldr	r3, [pc, #32]	; (80a0c30 <module_user_init_hook+0x40>)
 80a0c0e:	b11b      	cbz	r3, 80a0c18 <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0c10:	f7ff fbc8 	bl	80a03a4 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a0c14:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a0c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a0c1c:	2100      	movs	r1, #0
 80a0c1e:	4805      	ldr	r0, [pc, #20]	; (80a0c34 <module_user_init_hook+0x44>)
 80a0c20:	f7ff bcea 	b.w	80a05f8 <system_set_usb_request_app_handler>
 80a0c24:	40024000 	.word	0x40024000
 80a0c28:	9a271c1e 	.word	0x9a271c1e
 80a0c2c:	200007bc 	.word	0x200007bc
 80a0c30:	00000000 	.word	0x00000000
 80a0c34:	080a0b9d 	.word	0x080a0b9d

080a0c38 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0c38:	b510      	push	{r4, lr}
 80a0c3a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0c3c:	480f      	ldr	r0, [pc, #60]	; (80a0c7c <pinAvailable+0x44>)
 80a0c3e:	f7ff fe1d 	bl	80a087c <_ZN8SPIClass9isEnabledEv>
 80a0c42:	b128      	cbz	r0, 80a0c50 <pinAvailable+0x18>
 80a0c44:	f1a4 030d 	sub.w	r3, r4, #13
 80a0c48:	2b02      	cmp	r3, #2
 80a0c4a:	d801      	bhi.n	80a0c50 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a0c4c:	2000      	movs	r0, #0
 80a0c4e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0c50:	f000 f86a 	bl	80a0d28 <_Z19__fetch_global_Wirev>
 80a0c54:	f7ff fd42 	bl	80a06dc <_ZN7TwoWire9isEnabledEv>
 80a0c58:	b108      	cbz	r0, 80a0c5e <pinAvailable+0x26>
 80a0c5a:	2c01      	cmp	r4, #1
 80a0c5c:	d9f6      	bls.n	80a0c4c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0c5e:	f7ff fe61 	bl	80a0924 <_Z22__fetch_global_Serial1v>
 80a0c62:	f7ff fe5b 	bl	80a091c <_ZN11USARTSerial9isEnabledEv>
 80a0c66:	b118      	cbz	r0, 80a0c70 <pinAvailable+0x38>
 80a0c68:	f1a4 0312 	sub.w	r3, r4, #18
 80a0c6c:	2b01      	cmp	r3, #1
 80a0c6e:	d9ed      	bls.n	80a0c4c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0c70:	2c17      	cmp	r4, #23
 80a0c72:	bf8c      	ite	hi
 80a0c74:	2000      	movhi	r0, #0
 80a0c76:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0c78:	bd10      	pop	{r4, pc}
 80a0c7a:	bf00      	nop
 80a0c7c:	200007f4 	.word	0x200007f4

080a0c80 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0c80:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0c82:	b538      	push	{r3, r4, r5, lr}
 80a0c84:	4604      	mov	r4, r0
 80a0c86:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0c88:	d80a      	bhi.n	80a0ca0 <pinMode+0x20>
 80a0c8a:	29ff      	cmp	r1, #255	; 0xff
 80a0c8c:	d008      	beq.n	80a0ca0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0c8e:	f7ff ffd3 	bl	80a0c38 <pinAvailable>
 80a0c92:	b128      	cbz	r0, 80a0ca0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0c94:	4629      	mov	r1, r5
 80a0c96:	4620      	mov	r0, r4
}
 80a0c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0c9c:	f7ff bbaa 	b.w	80a03f4 <HAL_Pin_Mode>
 80a0ca0:	bd38      	pop	{r3, r4, r5, pc}

080a0ca2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0ca2:	b538      	push	{r3, r4, r5, lr}
 80a0ca4:	4604      	mov	r4, r0
 80a0ca6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0ca8:	f7ff fbac 	bl	80a0404 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0cac:	28ff      	cmp	r0, #255	; 0xff
 80a0cae:	d010      	beq.n	80a0cd2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a0cb0:	2806      	cmp	r0, #6
 80a0cb2:	d804      	bhi.n	80a0cbe <digitalWrite+0x1c>
 80a0cb4:	234d      	movs	r3, #77	; 0x4d
 80a0cb6:	fa23 f000 	lsr.w	r0, r3, r0
 80a0cba:	07c3      	lsls	r3, r0, #31
 80a0cbc:	d409      	bmi.n	80a0cd2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0cbe:	4620      	mov	r0, r4
 80a0cc0:	f7ff ffba 	bl	80a0c38 <pinAvailable>
 80a0cc4:	b128      	cbz	r0, 80a0cd2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0cc6:	4629      	mov	r1, r5
 80a0cc8:	4620      	mov	r0, r4
}
 80a0cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0cce:	f7ff bba1 	b.w	80a0414 <HAL_GPIO_Write>
 80a0cd2:	bd38      	pop	{r3, r4, r5, pc}

080a0cd4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a0cd4:	b510      	push	{r4, lr}
 80a0cd6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0cd8:	f7ff fb94 	bl	80a0404 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a0cdc:	3804      	subs	r0, #4
 80a0cde:	b2c0      	uxtb	r0, r0
 80a0ce0:	2801      	cmp	r0, #1
 80a0ce2:	d908      	bls.n	80a0cf6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a0ce4:	4620      	mov	r0, r4
 80a0ce6:	f7ff ffa7 	bl	80a0c38 <pinAvailable>
 80a0cea:	b120      	cbz	r0, 80a0cf6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0cec:	4620      	mov	r0, r4
}
 80a0cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0cf2:	f7ff bb97 	b.w	80a0424 <HAL_GPIO_Read>
}
 80a0cf6:	2000      	movs	r0, #0
 80a0cf8:	bd10      	pop	{r4, pc}

080a0cfa <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a0cfa:	b510      	push	{r4, lr}
 80a0cfc:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a0cfe:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a0d00:	bf9c      	itt	ls
 80a0d02:	340a      	addls	r4, #10
 80a0d04:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0d06:	4620      	mov	r0, r4
 80a0d08:	f7ff ff96 	bl	80a0c38 <pinAvailable>
 80a0d0c:	b150      	cbz	r0, 80a0d24 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a0d0e:	2103      	movs	r1, #3
 80a0d10:	4620      	mov	r0, r4
 80a0d12:	f7ff fb67 	bl	80a03e4 <HAL_Validate_Pin_Function>
 80a0d16:	2803      	cmp	r0, #3
 80a0d18:	d104      	bne.n	80a0d24 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a0d1a:	4620      	mov	r0, r4
}
 80a0d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a0d20:	f7ff bb98 	b.w	80a0454 <HAL_ADC_Read>
}
 80a0d24:	2000      	movs	r0, #0
 80a0d26:	bd10      	pop	{r4, pc}

080a0d28 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a0d28:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a0d2a:	4d0b      	ldr	r5, [pc, #44]	; (80a0d58 <_Z19__fetch_global_Wirev+0x30>)
 80a0d2c:	6829      	ldr	r1, [r5, #0]
 80a0d2e:	f011 0401 	ands.w	r4, r1, #1
 80a0d32:	d10f      	bne.n	80a0d54 <_Z19__fetch_global_Wirev+0x2c>
 80a0d34:	4628      	mov	r0, r5
 80a0d36:	f7ff f9b2 	bl	80a009e <__cxa_guard_acquire>
 80a0d3a:	b158      	cbz	r0, 80a0d54 <_Z19__fetch_global_Wirev+0x2c>
 80a0d3c:	4621      	mov	r1, r4
 80a0d3e:	4807      	ldr	r0, [pc, #28]	; (80a0d5c <_Z19__fetch_global_Wirev+0x34>)
 80a0d40:	f7ff fcba 	bl	80a06b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a0d44:	4628      	mov	r0, r5
 80a0d46:	f7ff f9af 	bl	80a00a8 <__cxa_guard_release>
 80a0d4a:	4a05      	ldr	r2, [pc, #20]	; (80a0d60 <_Z19__fetch_global_Wirev+0x38>)
 80a0d4c:	4905      	ldr	r1, [pc, #20]	; (80a0d64 <_Z19__fetch_global_Wirev+0x3c>)
 80a0d4e:	4803      	ldr	r0, [pc, #12]	; (80a0d5c <_Z19__fetch_global_Wirev+0x34>)
 80a0d50:	f000 f844 	bl	80a0ddc <__aeabi_atexit>
	return wire;
}
 80a0d54:	4801      	ldr	r0, [pc, #4]	; (80a0d5c <_Z19__fetch_global_Wirev+0x34>)
 80a0d56:	bd38      	pop	{r3, r4, r5, pc}
 80a0d58:	200007c4 	.word	0x200007c4
 80a0d5c:	200007c8 	.word	0x200007c8
 80a0d60:	20000320 	.word	0x20000320
 80a0d64:	080a0661 	.word	0x080a0661

080a0d68 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0d68:	b513      	push	{r0, r1, r4, lr}
 80a0d6a:	4c08      	ldr	r4, [pc, #32]	; (80a0d8c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0d6c:	2300      	movs	r3, #0
 80a0d6e:	461a      	mov	r2, r3
 80a0d70:	4619      	mov	r1, r3
 80a0d72:	9300      	str	r3, [sp, #0]
 80a0d74:	4620      	mov	r0, r4
 80a0d76:	f7ff fce7 	bl	80a0748 <_ZN9IPAddressC1Ehhhh>
 80a0d7a:	4620      	mov	r0, r4
 80a0d7c:	4a04      	ldr	r2, [pc, #16]	; (80a0d90 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0d7e:	4905      	ldr	r1, [pc, #20]	; (80a0d94 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0d80:	b002      	add	sp, #8
 80a0d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0d86:	f000 b829 	b.w	80a0ddc <__aeabi_atexit>
 80a0d8a:	bf00      	nop
 80a0d8c:	200007dc 	.word	0x200007dc
 80a0d90:	20000320 	.word	0x20000320
 80a0d94:	080a06ed 	.word	0x080a06ed

080a0d98 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0d98:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0d9a:	4c0c      	ldr	r4, [pc, #48]	; (80a0dcc <_GLOBAL__sub_I_SPI+0x34>)
 80a0d9c:	4e0c      	ldr	r6, [pc, #48]	; (80a0dd0 <_GLOBAL__sub_I_SPI+0x38>)
 80a0d9e:	4d0d      	ldr	r5, [pc, #52]	; (80a0dd4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a0da0:	2100      	movs	r1, #0
 80a0da2:	4620      	mov	r0, r4
 80a0da4:	f7ff fd56 	bl	80a0854 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0da8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0daa:	4c0b      	ldr	r4, [pc, #44]	; (80a0dd8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0dac:	4632      	mov	r2, r6
 80a0dae:	4629      	mov	r1, r5
 80a0db0:	f000 f814 	bl	80a0ddc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0db4:	2101      	movs	r1, #1
 80a0db6:	4620      	mov	r0, r4
 80a0db8:	f7ff fd4c 	bl	80a0854 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0dbc:	4632      	mov	r2, r6
 80a0dbe:	4629      	mov	r1, r5
 80a0dc0:	4620      	mov	r0, r4
 80a0dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0dc6:	f000 b809 	b.w	80a0ddc <__aeabi_atexit>
 80a0dca:	bf00      	nop
 80a0dcc:	200007f4 	.word	0x200007f4
 80a0dd0:	20000320 	.word	0x20000320
 80a0dd4:	080a0845 	.word	0x080a0845
 80a0dd8:	20000804 	.word	0x20000804

080a0ddc <__aeabi_atexit>:
 80a0ddc:	460b      	mov	r3, r1
 80a0dde:	4601      	mov	r1, r0
 80a0de0:	4618      	mov	r0, r3
 80a0de2:	f000 bfc1 	b.w	80a1d68 <__cxa_atexit>
	...

080a0de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0de8:	4b24      	ldr	r3, [pc, #144]	; (80a0e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0dea:	681a      	ldr	r2, [r3, #0]
 80a0dec:	07d0      	lsls	r0, r2, #31
 80a0dee:	bf5c      	itt	pl
 80a0df0:	2201      	movpl	r2, #1
 80a0df2:	601a      	strpl	r2, [r3, #0]
 80a0df4:	4b22      	ldr	r3, [pc, #136]	; (80a0e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0df6:	681a      	ldr	r2, [r3, #0]
 80a0df8:	07d1      	lsls	r1, r2, #31
 80a0dfa:	bf5c      	itt	pl
 80a0dfc:	2201      	movpl	r2, #1
 80a0dfe:	601a      	strpl	r2, [r3, #0]
 80a0e00:	4b20      	ldr	r3, [pc, #128]	; (80a0e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0e02:	681a      	ldr	r2, [r3, #0]
 80a0e04:	07d2      	lsls	r2, r2, #31
 80a0e06:	bf5c      	itt	pl
 80a0e08:	2201      	movpl	r2, #1
 80a0e0a:	601a      	strpl	r2, [r3, #0]
 80a0e0c:	4b1e      	ldr	r3, [pc, #120]	; (80a0e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0e0e:	681a      	ldr	r2, [r3, #0]
 80a0e10:	07d0      	lsls	r0, r2, #31
 80a0e12:	bf5c      	itt	pl
 80a0e14:	2201      	movpl	r2, #1
 80a0e16:	601a      	strpl	r2, [r3, #0]
 80a0e18:	4b1c      	ldr	r3, [pc, #112]	; (80a0e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0e1a:	681a      	ldr	r2, [r3, #0]
 80a0e1c:	07d1      	lsls	r1, r2, #31
 80a0e1e:	bf5c      	itt	pl
 80a0e20:	2201      	movpl	r2, #1
 80a0e22:	601a      	strpl	r2, [r3, #0]
 80a0e24:	4b1a      	ldr	r3, [pc, #104]	; (80a0e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0e26:	681a      	ldr	r2, [r3, #0]
 80a0e28:	07d2      	lsls	r2, r2, #31
 80a0e2a:	bf5c      	itt	pl
 80a0e2c:	2201      	movpl	r2, #1
 80a0e2e:	601a      	strpl	r2, [r3, #0]
 80a0e30:	4b18      	ldr	r3, [pc, #96]	; (80a0e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0e32:	681a      	ldr	r2, [r3, #0]
 80a0e34:	07d0      	lsls	r0, r2, #31
 80a0e36:	bf5c      	itt	pl
 80a0e38:	2201      	movpl	r2, #1
 80a0e3a:	601a      	strpl	r2, [r3, #0]
 80a0e3c:	4b16      	ldr	r3, [pc, #88]	; (80a0e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0e3e:	681a      	ldr	r2, [r3, #0]
 80a0e40:	07d1      	lsls	r1, r2, #31
 80a0e42:	bf5c      	itt	pl
 80a0e44:	2201      	movpl	r2, #1
 80a0e46:	601a      	strpl	r2, [r3, #0]
 80a0e48:	4b14      	ldr	r3, [pc, #80]	; (80a0e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0e4a:	681a      	ldr	r2, [r3, #0]
 80a0e4c:	07d2      	lsls	r2, r2, #31
 80a0e4e:	bf5c      	itt	pl
 80a0e50:	2201      	movpl	r2, #1
 80a0e52:	601a      	strpl	r2, [r3, #0]
 80a0e54:	4b12      	ldr	r3, [pc, #72]	; (80a0ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0e56:	681a      	ldr	r2, [r3, #0]
 80a0e58:	07d0      	lsls	r0, r2, #31
 80a0e5a:	bf5c      	itt	pl
 80a0e5c:	2201      	movpl	r2, #1
 80a0e5e:	601a      	strpl	r2, [r3, #0]
 80a0e60:	4b10      	ldr	r3, [pc, #64]	; (80a0ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0e62:	681a      	ldr	r2, [r3, #0]
 80a0e64:	07d1      	lsls	r1, r2, #31
 80a0e66:	bf5c      	itt	pl
 80a0e68:	2201      	movpl	r2, #1
 80a0e6a:	601a      	strpl	r2, [r3, #0]
 80a0e6c:	4b0e      	ldr	r3, [pc, #56]	; (80a0ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0e6e:	681a      	ldr	r2, [r3, #0]
 80a0e70:	07d2      	lsls	r2, r2, #31
 80a0e72:	bf5c      	itt	pl
 80a0e74:	2201      	movpl	r2, #1
 80a0e76:	601a      	strpl	r2, [r3, #0]
 80a0e78:	4770      	bx	lr
 80a0e7a:	bf00      	nop
 80a0e7c:	20000840 	.word	0x20000840
 80a0e80:	2000083c 	.word	0x2000083c
 80a0e84:	20000838 	.word	0x20000838
 80a0e88:	20000834 	.word	0x20000834
 80a0e8c:	20000830 	.word	0x20000830
 80a0e90:	2000082c 	.word	0x2000082c
 80a0e94:	20000828 	.word	0x20000828
 80a0e98:	20000824 	.word	0x20000824
 80a0e9c:	20000820 	.word	0x20000820
 80a0ea0:	2000081c 	.word	0x2000081c
 80a0ea4:	20000818 	.word	0x20000818
 80a0ea8:	20000814 	.word	0x20000814

080a0eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0eac:	4b18      	ldr	r3, [pc, #96]	; (80a0f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0eae:	681a      	ldr	r2, [r3, #0]
 80a0eb0:	07d1      	lsls	r1, r2, #31
 80a0eb2:	bf5c      	itt	pl
 80a0eb4:	2201      	movpl	r2, #1
 80a0eb6:	601a      	strpl	r2, [r3, #0]
 80a0eb8:	4b16      	ldr	r3, [pc, #88]	; (80a0f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0eba:	681a      	ldr	r2, [r3, #0]
 80a0ebc:	07d2      	lsls	r2, r2, #31
 80a0ebe:	bf5c      	itt	pl
 80a0ec0:	2201      	movpl	r2, #1
 80a0ec2:	601a      	strpl	r2, [r3, #0]
 80a0ec4:	4b14      	ldr	r3, [pc, #80]	; (80a0f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0ec6:	681a      	ldr	r2, [r3, #0]
 80a0ec8:	07d0      	lsls	r0, r2, #31
 80a0eca:	bf5c      	itt	pl
 80a0ecc:	2201      	movpl	r2, #1
 80a0ece:	601a      	strpl	r2, [r3, #0]
 80a0ed0:	4b12      	ldr	r3, [pc, #72]	; (80a0f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0ed2:	681a      	ldr	r2, [r3, #0]
 80a0ed4:	07d1      	lsls	r1, r2, #31
 80a0ed6:	bf5c      	itt	pl
 80a0ed8:	2201      	movpl	r2, #1
 80a0eda:	601a      	strpl	r2, [r3, #0]
 80a0edc:	4b10      	ldr	r3, [pc, #64]	; (80a0f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0ede:	681a      	ldr	r2, [r3, #0]
 80a0ee0:	07d2      	lsls	r2, r2, #31
 80a0ee2:	bf5c      	itt	pl
 80a0ee4:	2201      	movpl	r2, #1
 80a0ee6:	601a      	strpl	r2, [r3, #0]
 80a0ee8:	4b0e      	ldr	r3, [pc, #56]	; (80a0f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0eea:	681a      	ldr	r2, [r3, #0]
 80a0eec:	07d0      	lsls	r0, r2, #31
 80a0eee:	bf5c      	itt	pl
 80a0ef0:	2201      	movpl	r2, #1
 80a0ef2:	601a      	strpl	r2, [r3, #0]
 80a0ef4:	4b0c      	ldr	r3, [pc, #48]	; (80a0f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0ef6:	681a      	ldr	r2, [r3, #0]
 80a0ef8:	07d1      	lsls	r1, r2, #31
 80a0efa:	bf5c      	itt	pl
 80a0efc:	2201      	movpl	r2, #1
 80a0efe:	601a      	strpl	r2, [r3, #0]
 80a0f00:	4b0a      	ldr	r3, [pc, #40]	; (80a0f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0f02:	681a      	ldr	r2, [r3, #0]
 80a0f04:	07d2      	lsls	r2, r2, #31
 80a0f06:	bf5c      	itt	pl
 80a0f08:	2201      	movpl	r2, #1
 80a0f0a:	601a      	strpl	r2, [r3, #0]
 80a0f0c:	4770      	bx	lr
 80a0f0e:	bf00      	nop
 80a0f10:	20000860 	.word	0x20000860
 80a0f14:	2000085c 	.word	0x2000085c
 80a0f18:	20000858 	.word	0x20000858
 80a0f1c:	20000854 	.word	0x20000854
 80a0f20:	20000850 	.word	0x20000850
 80a0f24:	2000084c 	.word	0x2000084c
 80a0f28:	20000848 	.word	0x20000848
 80a0f2c:	20000844 	.word	0x20000844

080a0f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0f30:	4b18      	ldr	r3, [pc, #96]	; (80a0f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0f32:	681a      	ldr	r2, [r3, #0]
 80a0f34:	07d1      	lsls	r1, r2, #31
 80a0f36:	bf5c      	itt	pl
 80a0f38:	2201      	movpl	r2, #1
 80a0f3a:	601a      	strpl	r2, [r3, #0]
 80a0f3c:	4b16      	ldr	r3, [pc, #88]	; (80a0f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0f3e:	681a      	ldr	r2, [r3, #0]
 80a0f40:	07d2      	lsls	r2, r2, #31
 80a0f42:	bf5c      	itt	pl
 80a0f44:	2201      	movpl	r2, #1
 80a0f46:	601a      	strpl	r2, [r3, #0]
 80a0f48:	4b14      	ldr	r3, [pc, #80]	; (80a0f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0f4a:	681a      	ldr	r2, [r3, #0]
 80a0f4c:	07d0      	lsls	r0, r2, #31
 80a0f4e:	bf5c      	itt	pl
 80a0f50:	2201      	movpl	r2, #1
 80a0f52:	601a      	strpl	r2, [r3, #0]
 80a0f54:	4b12      	ldr	r3, [pc, #72]	; (80a0fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0f56:	681a      	ldr	r2, [r3, #0]
 80a0f58:	07d1      	lsls	r1, r2, #31
 80a0f5a:	bf5c      	itt	pl
 80a0f5c:	2201      	movpl	r2, #1
 80a0f5e:	601a      	strpl	r2, [r3, #0]
 80a0f60:	4b10      	ldr	r3, [pc, #64]	; (80a0fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0f62:	681a      	ldr	r2, [r3, #0]
 80a0f64:	07d2      	lsls	r2, r2, #31
 80a0f66:	bf5c      	itt	pl
 80a0f68:	2201      	movpl	r2, #1
 80a0f6a:	601a      	strpl	r2, [r3, #0]
 80a0f6c:	4b0e      	ldr	r3, [pc, #56]	; (80a0fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0f6e:	681a      	ldr	r2, [r3, #0]
 80a0f70:	07d0      	lsls	r0, r2, #31
 80a0f72:	bf5c      	itt	pl
 80a0f74:	2201      	movpl	r2, #1
 80a0f76:	601a      	strpl	r2, [r3, #0]
 80a0f78:	4b0c      	ldr	r3, [pc, #48]	; (80a0fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0f7a:	681a      	ldr	r2, [r3, #0]
 80a0f7c:	07d1      	lsls	r1, r2, #31
 80a0f7e:	bf5c      	itt	pl
 80a0f80:	2201      	movpl	r2, #1
 80a0f82:	601a      	strpl	r2, [r3, #0]
 80a0f84:	4b0a      	ldr	r3, [pc, #40]	; (80a0fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0f86:	681a      	ldr	r2, [r3, #0]
 80a0f88:	07d2      	lsls	r2, r2, #31
 80a0f8a:	bf5c      	itt	pl
 80a0f8c:	2201      	movpl	r2, #1
 80a0f8e:	601a      	strpl	r2, [r3, #0]
 80a0f90:	4770      	bx	lr
 80a0f92:	bf00      	nop
 80a0f94:	20000880 	.word	0x20000880
 80a0f98:	2000087c 	.word	0x2000087c
 80a0f9c:	20000878 	.word	0x20000878
 80a0fa0:	20000874 	.word	0x20000874
 80a0fa4:	20000870 	.word	0x20000870
 80a0fa8:	2000086c 	.word	0x2000086c
 80a0fac:	20000868 	.word	0x20000868
 80a0fb0:	20000864 	.word	0x20000864

080a0fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a0fb4:	4b24      	ldr	r3, [pc, #144]	; (80a1048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a0fb6:	681a      	ldr	r2, [r3, #0]
 80a0fb8:	07d0      	lsls	r0, r2, #31
 80a0fba:	bf5c      	itt	pl
 80a0fbc:	2201      	movpl	r2, #1
 80a0fbe:	601a      	strpl	r2, [r3, #0]
 80a0fc0:	4b22      	ldr	r3, [pc, #136]	; (80a104c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a0fc2:	681a      	ldr	r2, [r3, #0]
 80a0fc4:	07d1      	lsls	r1, r2, #31
 80a0fc6:	bf5c      	itt	pl
 80a0fc8:	2201      	movpl	r2, #1
 80a0fca:	601a      	strpl	r2, [r3, #0]
 80a0fcc:	4b20      	ldr	r3, [pc, #128]	; (80a1050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a0fce:	681a      	ldr	r2, [r3, #0]
 80a0fd0:	07d2      	lsls	r2, r2, #31
 80a0fd2:	bf5c      	itt	pl
 80a0fd4:	2201      	movpl	r2, #1
 80a0fd6:	601a      	strpl	r2, [r3, #0]
 80a0fd8:	4b1e      	ldr	r3, [pc, #120]	; (80a1054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a0fda:	681a      	ldr	r2, [r3, #0]
 80a0fdc:	07d0      	lsls	r0, r2, #31
 80a0fde:	bf5c      	itt	pl
 80a0fe0:	2201      	movpl	r2, #1
 80a0fe2:	601a      	strpl	r2, [r3, #0]
 80a0fe4:	4b1c      	ldr	r3, [pc, #112]	; (80a1058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a0fe6:	681a      	ldr	r2, [r3, #0]
 80a0fe8:	07d1      	lsls	r1, r2, #31
 80a0fea:	bf5c      	itt	pl
 80a0fec:	2201      	movpl	r2, #1
 80a0fee:	601a      	strpl	r2, [r3, #0]
 80a0ff0:	4b1a      	ldr	r3, [pc, #104]	; (80a105c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a0ff2:	681a      	ldr	r2, [r3, #0]
 80a0ff4:	07d2      	lsls	r2, r2, #31
 80a0ff6:	bf5c      	itt	pl
 80a0ff8:	2201      	movpl	r2, #1
 80a0ffa:	601a      	strpl	r2, [r3, #0]
 80a0ffc:	4b18      	ldr	r3, [pc, #96]	; (80a1060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a0ffe:	681a      	ldr	r2, [r3, #0]
 80a1000:	07d0      	lsls	r0, r2, #31
 80a1002:	bf5c      	itt	pl
 80a1004:	2201      	movpl	r2, #1
 80a1006:	601a      	strpl	r2, [r3, #0]
 80a1008:	4b16      	ldr	r3, [pc, #88]	; (80a1064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a100a:	681a      	ldr	r2, [r3, #0]
 80a100c:	07d1      	lsls	r1, r2, #31
 80a100e:	bf5c      	itt	pl
 80a1010:	2201      	movpl	r2, #1
 80a1012:	601a      	strpl	r2, [r3, #0]
 80a1014:	4b14      	ldr	r3, [pc, #80]	; (80a1068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1016:	681a      	ldr	r2, [r3, #0]
 80a1018:	07d2      	lsls	r2, r2, #31
 80a101a:	bf5c      	itt	pl
 80a101c:	2201      	movpl	r2, #1
 80a101e:	601a      	strpl	r2, [r3, #0]
 80a1020:	4b12      	ldr	r3, [pc, #72]	; (80a106c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1022:	681a      	ldr	r2, [r3, #0]
 80a1024:	07d0      	lsls	r0, r2, #31
 80a1026:	bf5c      	itt	pl
 80a1028:	2201      	movpl	r2, #1
 80a102a:	601a      	strpl	r2, [r3, #0]
 80a102c:	4b10      	ldr	r3, [pc, #64]	; (80a1070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a102e:	681a      	ldr	r2, [r3, #0]
 80a1030:	07d1      	lsls	r1, r2, #31
 80a1032:	bf5c      	itt	pl
 80a1034:	2201      	movpl	r2, #1
 80a1036:	601a      	strpl	r2, [r3, #0]
 80a1038:	4b0e      	ldr	r3, [pc, #56]	; (80a1074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a103a:	681a      	ldr	r2, [r3, #0]
 80a103c:	07d2      	lsls	r2, r2, #31
 80a103e:	bf5c      	itt	pl
 80a1040:	2201      	movpl	r2, #1
 80a1042:	601a      	strpl	r2, [r3, #0]
 80a1044:	4770      	bx	lr
 80a1046:	bf00      	nop
 80a1048:	200008b0 	.word	0x200008b0
 80a104c:	200008ac 	.word	0x200008ac
 80a1050:	200008a8 	.word	0x200008a8
 80a1054:	200008a4 	.word	0x200008a4
 80a1058:	200008a0 	.word	0x200008a0
 80a105c:	2000089c 	.word	0x2000089c
 80a1060:	20000898 	.word	0x20000898
 80a1064:	20000894 	.word	0x20000894
 80a1068:	20000890 	.word	0x20000890
 80a106c:	2000088c 	.word	0x2000088c
 80a1070:	20000888 	.word	0x20000888
 80a1074:	20000884 	.word	0x20000884

080a1078 <round>:
 80a1078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a107a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a107e:	f2a6 35ff 	subw	r5, r6, #1023	; 0x3ff
 80a1082:	2d13      	cmp	r5, #19
 80a1084:	460a      	mov	r2, r1
 80a1086:	460b      	mov	r3, r1
 80a1088:	4604      	mov	r4, r0
 80a108a:	4686      	mov	lr, r0
 80a108c:	dc11      	bgt.n	80a10b2 <round+0x3a>
 80a108e:	2d00      	cmp	r5, #0
 80a1090:	db2e      	blt.n	80a10f0 <round+0x78>
 80a1092:	460f      	mov	r7, r1
 80a1094:	491f      	ldr	r1, [pc, #124]	; (80a1114 <round+0x9c>)
 80a1096:	4129      	asrs	r1, r5
 80a1098:	420a      	tst	r2, r1
 80a109a:	d025      	beq.n	80a10e8 <round+0x70>
 80a109c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80a10a0:	412b      	asrs	r3, r5
 80a10a2:	443b      	add	r3, r7
 80a10a4:	ea23 0301 	bic.w	r3, r3, r1
 80a10a8:	2600      	movs	r6, #0
 80a10aa:	4619      	mov	r1, r3
 80a10ac:	4634      	mov	r4, r6
 80a10ae:	4620      	mov	r0, r4
 80a10b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a10b2:	2d33      	cmp	r5, #51	; 0x33
 80a10b4:	dd05      	ble.n	80a10c2 <round+0x4a>
 80a10b6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a10ba:	d01f      	beq.n	80a10fc <round+0x84>
 80a10bc:	4611      	mov	r1, r2
 80a10be:	4620      	mov	r0, r4
 80a10c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a10c2:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 80a10c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a10ca:	fa21 f606 	lsr.w	r6, r1, r6
 80a10ce:	4230      	tst	r0, r6
 80a10d0:	d0f4      	beq.n	80a10bc <round+0x44>
 80a10d2:	2201      	movs	r2, #1
 80a10d4:	f1c5 0533 	rsb	r5, r5, #51	; 0x33
 80a10d8:	fa02 f505 	lsl.w	r5, r2, r5
 80a10dc:	182d      	adds	r5, r5, r0
 80a10de:	bf28      	it	cs
 80a10e0:	189b      	addcs	r3, r3, r2
 80a10e2:	ea25 0606 	bic.w	r6, r5, r6
 80a10e6:	e7e0      	b.n	80a10aa <round+0x32>
 80a10e8:	2800      	cmp	r0, #0
 80a10ea:	d1d7      	bne.n	80a109c <round+0x24>
 80a10ec:	4611      	mov	r1, r2
 80a10ee:	e7e6      	b.n	80a10be <round+0x46>
 80a10f0:	3501      	adds	r5, #1
 80a10f2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80a10f6:	d007      	beq.n	80a1108 <round+0x90>
 80a10f8:	2600      	movs	r6, #0
 80a10fa:	e7d6      	b.n	80a10aa <round+0x32>
 80a10fc:	4602      	mov	r2, r0
 80a10fe:	460b      	mov	r3, r1
 80a1100:	f000 f810 	bl	80a1124 <__adddf3>
 80a1104:	4604      	mov	r4, r0
 80a1106:	e7d2      	b.n	80a10ae <round+0x36>
 80a1108:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80a110c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a1110:	2600      	movs	r6, #0
 80a1112:	e7ca      	b.n	80a10aa <round+0x32>
 80a1114:	000fffff 	.word	0x000fffff

080a1118 <__aeabi_drsub>:
 80a1118:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a111c:	e002      	b.n	80a1124 <__adddf3>
 80a111e:	bf00      	nop

080a1120 <__aeabi_dsub>:
 80a1120:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1124 <__adddf3>:
 80a1124:	b530      	push	{r4, r5, lr}
 80a1126:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a112a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a112e:	ea94 0f05 	teq	r4, r5
 80a1132:	bf08      	it	eq
 80a1134:	ea90 0f02 	teqeq	r0, r2
 80a1138:	bf1f      	itttt	ne
 80a113a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a113e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1142:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1146:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a114a:	f000 80e2 	beq.w	80a1312 <__adddf3+0x1ee>
 80a114e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1152:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1156:	bfb8      	it	lt
 80a1158:	426d      	neglt	r5, r5
 80a115a:	dd0c      	ble.n	80a1176 <__adddf3+0x52>
 80a115c:	442c      	add	r4, r5
 80a115e:	ea80 0202 	eor.w	r2, r0, r2
 80a1162:	ea81 0303 	eor.w	r3, r1, r3
 80a1166:	ea82 0000 	eor.w	r0, r2, r0
 80a116a:	ea83 0101 	eor.w	r1, r3, r1
 80a116e:	ea80 0202 	eor.w	r2, r0, r2
 80a1172:	ea81 0303 	eor.w	r3, r1, r3
 80a1176:	2d36      	cmp	r5, #54	; 0x36
 80a1178:	bf88      	it	hi
 80a117a:	bd30      	pophi	{r4, r5, pc}
 80a117c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1180:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1184:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1188:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a118c:	d002      	beq.n	80a1194 <__adddf3+0x70>
 80a118e:	4240      	negs	r0, r0
 80a1190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1194:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1198:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a119c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a11a0:	d002      	beq.n	80a11a8 <__adddf3+0x84>
 80a11a2:	4252      	negs	r2, r2
 80a11a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a11a8:	ea94 0f05 	teq	r4, r5
 80a11ac:	f000 80a7 	beq.w	80a12fe <__adddf3+0x1da>
 80a11b0:	f1a4 0401 	sub.w	r4, r4, #1
 80a11b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a11b8:	db0d      	blt.n	80a11d6 <__adddf3+0xb2>
 80a11ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a11be:	fa22 f205 	lsr.w	r2, r2, r5
 80a11c2:	1880      	adds	r0, r0, r2
 80a11c4:	f141 0100 	adc.w	r1, r1, #0
 80a11c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a11cc:	1880      	adds	r0, r0, r2
 80a11ce:	fa43 f305 	asr.w	r3, r3, r5
 80a11d2:	4159      	adcs	r1, r3
 80a11d4:	e00e      	b.n	80a11f4 <__adddf3+0xd0>
 80a11d6:	f1a5 0520 	sub.w	r5, r5, #32
 80a11da:	f10e 0e20 	add.w	lr, lr, #32
 80a11de:	2a01      	cmp	r2, #1
 80a11e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a11e4:	bf28      	it	cs
 80a11e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a11ea:	fa43 f305 	asr.w	r3, r3, r5
 80a11ee:	18c0      	adds	r0, r0, r3
 80a11f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a11f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a11f8:	d507      	bpl.n	80a120a <__adddf3+0xe6>
 80a11fa:	f04f 0e00 	mov.w	lr, #0
 80a11fe:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1202:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1206:	eb6e 0101 	sbc.w	r1, lr, r1
 80a120a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a120e:	d31b      	bcc.n	80a1248 <__adddf3+0x124>
 80a1210:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1214:	d30c      	bcc.n	80a1230 <__adddf3+0x10c>
 80a1216:	0849      	lsrs	r1, r1, #1
 80a1218:	ea5f 0030 	movs.w	r0, r0, rrx
 80a121c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1220:	f104 0401 	add.w	r4, r4, #1
 80a1224:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1228:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a122c:	f080 809a 	bcs.w	80a1364 <__adddf3+0x240>
 80a1230:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1234:	bf08      	it	eq
 80a1236:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a123a:	f150 0000 	adcs.w	r0, r0, #0
 80a123e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1242:	ea41 0105 	orr.w	r1, r1, r5
 80a1246:	bd30      	pop	{r4, r5, pc}
 80a1248:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a124c:	4140      	adcs	r0, r0
 80a124e:	eb41 0101 	adc.w	r1, r1, r1
 80a1252:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1256:	f1a4 0401 	sub.w	r4, r4, #1
 80a125a:	d1e9      	bne.n	80a1230 <__adddf3+0x10c>
 80a125c:	f091 0f00 	teq	r1, #0
 80a1260:	bf04      	itt	eq
 80a1262:	4601      	moveq	r1, r0
 80a1264:	2000      	moveq	r0, #0
 80a1266:	fab1 f381 	clz	r3, r1
 80a126a:	bf08      	it	eq
 80a126c:	3320      	addeq	r3, #32
 80a126e:	f1a3 030b 	sub.w	r3, r3, #11
 80a1272:	f1b3 0220 	subs.w	r2, r3, #32
 80a1276:	da0c      	bge.n	80a1292 <__adddf3+0x16e>
 80a1278:	320c      	adds	r2, #12
 80a127a:	dd08      	ble.n	80a128e <__adddf3+0x16a>
 80a127c:	f102 0c14 	add.w	ip, r2, #20
 80a1280:	f1c2 020c 	rsb	r2, r2, #12
 80a1284:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1288:	fa21 f102 	lsr.w	r1, r1, r2
 80a128c:	e00c      	b.n	80a12a8 <__adddf3+0x184>
 80a128e:	f102 0214 	add.w	r2, r2, #20
 80a1292:	bfd8      	it	le
 80a1294:	f1c2 0c20 	rsble	ip, r2, #32
 80a1298:	fa01 f102 	lsl.w	r1, r1, r2
 80a129c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a12a0:	bfdc      	itt	le
 80a12a2:	ea41 010c 	orrle.w	r1, r1, ip
 80a12a6:	4090      	lslle	r0, r2
 80a12a8:	1ae4      	subs	r4, r4, r3
 80a12aa:	bfa2      	ittt	ge
 80a12ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a12b0:	4329      	orrge	r1, r5
 80a12b2:	bd30      	popge	{r4, r5, pc}
 80a12b4:	ea6f 0404 	mvn.w	r4, r4
 80a12b8:	3c1f      	subs	r4, #31
 80a12ba:	da1c      	bge.n	80a12f6 <__adddf3+0x1d2>
 80a12bc:	340c      	adds	r4, #12
 80a12be:	dc0e      	bgt.n	80a12de <__adddf3+0x1ba>
 80a12c0:	f104 0414 	add.w	r4, r4, #20
 80a12c4:	f1c4 0220 	rsb	r2, r4, #32
 80a12c8:	fa20 f004 	lsr.w	r0, r0, r4
 80a12cc:	fa01 f302 	lsl.w	r3, r1, r2
 80a12d0:	ea40 0003 	orr.w	r0, r0, r3
 80a12d4:	fa21 f304 	lsr.w	r3, r1, r4
 80a12d8:	ea45 0103 	orr.w	r1, r5, r3
 80a12dc:	bd30      	pop	{r4, r5, pc}
 80a12de:	f1c4 040c 	rsb	r4, r4, #12
 80a12e2:	f1c4 0220 	rsb	r2, r4, #32
 80a12e6:	fa20 f002 	lsr.w	r0, r0, r2
 80a12ea:	fa01 f304 	lsl.w	r3, r1, r4
 80a12ee:	ea40 0003 	orr.w	r0, r0, r3
 80a12f2:	4629      	mov	r1, r5
 80a12f4:	bd30      	pop	{r4, r5, pc}
 80a12f6:	fa21 f004 	lsr.w	r0, r1, r4
 80a12fa:	4629      	mov	r1, r5
 80a12fc:	bd30      	pop	{r4, r5, pc}
 80a12fe:	f094 0f00 	teq	r4, #0
 80a1302:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1306:	bf06      	itte	eq
 80a1308:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a130c:	3401      	addeq	r4, #1
 80a130e:	3d01      	subne	r5, #1
 80a1310:	e74e      	b.n	80a11b0 <__adddf3+0x8c>
 80a1312:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1316:	bf18      	it	ne
 80a1318:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a131c:	d029      	beq.n	80a1372 <__adddf3+0x24e>
 80a131e:	ea94 0f05 	teq	r4, r5
 80a1322:	bf08      	it	eq
 80a1324:	ea90 0f02 	teqeq	r0, r2
 80a1328:	d005      	beq.n	80a1336 <__adddf3+0x212>
 80a132a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a132e:	bf04      	itt	eq
 80a1330:	4619      	moveq	r1, r3
 80a1332:	4610      	moveq	r0, r2
 80a1334:	bd30      	pop	{r4, r5, pc}
 80a1336:	ea91 0f03 	teq	r1, r3
 80a133a:	bf1e      	ittt	ne
 80a133c:	2100      	movne	r1, #0
 80a133e:	2000      	movne	r0, #0
 80a1340:	bd30      	popne	{r4, r5, pc}
 80a1342:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1346:	d105      	bne.n	80a1354 <__adddf3+0x230>
 80a1348:	0040      	lsls	r0, r0, #1
 80a134a:	4149      	adcs	r1, r1
 80a134c:	bf28      	it	cs
 80a134e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1352:	bd30      	pop	{r4, r5, pc}
 80a1354:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1358:	bf3c      	itt	cc
 80a135a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a135e:	bd30      	popcc	{r4, r5, pc}
 80a1360:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1364:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1368:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a136c:	f04f 0000 	mov.w	r0, #0
 80a1370:	bd30      	pop	{r4, r5, pc}
 80a1372:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1376:	bf1a      	itte	ne
 80a1378:	4619      	movne	r1, r3
 80a137a:	4610      	movne	r0, r2
 80a137c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1380:	bf1c      	itt	ne
 80a1382:	460b      	movne	r3, r1
 80a1384:	4602      	movne	r2, r0
 80a1386:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a138a:	bf06      	itte	eq
 80a138c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1390:	ea91 0f03 	teqeq	r1, r3
 80a1394:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1398:	bd30      	pop	{r4, r5, pc}
 80a139a:	bf00      	nop

080a139c <__aeabi_ui2d>:
 80a139c:	f090 0f00 	teq	r0, #0
 80a13a0:	bf04      	itt	eq
 80a13a2:	2100      	moveq	r1, #0
 80a13a4:	4770      	bxeq	lr
 80a13a6:	b530      	push	{r4, r5, lr}
 80a13a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a13ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a13b0:	f04f 0500 	mov.w	r5, #0
 80a13b4:	f04f 0100 	mov.w	r1, #0
 80a13b8:	e750      	b.n	80a125c <__adddf3+0x138>
 80a13ba:	bf00      	nop

080a13bc <__aeabi_i2d>:
 80a13bc:	f090 0f00 	teq	r0, #0
 80a13c0:	bf04      	itt	eq
 80a13c2:	2100      	moveq	r1, #0
 80a13c4:	4770      	bxeq	lr
 80a13c6:	b530      	push	{r4, r5, lr}
 80a13c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a13cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a13d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a13d4:	bf48      	it	mi
 80a13d6:	4240      	negmi	r0, r0
 80a13d8:	f04f 0100 	mov.w	r1, #0
 80a13dc:	e73e      	b.n	80a125c <__adddf3+0x138>
 80a13de:	bf00      	nop

080a13e0 <__aeabi_f2d>:
 80a13e0:	0042      	lsls	r2, r0, #1
 80a13e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a13e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a13ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a13ee:	bf1f      	itttt	ne
 80a13f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a13f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a13f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a13fc:	4770      	bxne	lr
 80a13fe:	f092 0f00 	teq	r2, #0
 80a1402:	bf14      	ite	ne
 80a1404:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1408:	4770      	bxeq	lr
 80a140a:	b530      	push	{r4, r5, lr}
 80a140c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1418:	e720      	b.n	80a125c <__adddf3+0x138>
 80a141a:	bf00      	nop

080a141c <__aeabi_ul2d>:
 80a141c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1420:	bf08      	it	eq
 80a1422:	4770      	bxeq	lr
 80a1424:	b530      	push	{r4, r5, lr}
 80a1426:	f04f 0500 	mov.w	r5, #0
 80a142a:	e00a      	b.n	80a1442 <__aeabi_l2d+0x16>

080a142c <__aeabi_l2d>:
 80a142c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1430:	bf08      	it	eq
 80a1432:	4770      	bxeq	lr
 80a1434:	b530      	push	{r4, r5, lr}
 80a1436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a143a:	d502      	bpl.n	80a1442 <__aeabi_l2d+0x16>
 80a143c:	4240      	negs	r0, r0
 80a143e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1442:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1446:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a144a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a144e:	f43f aedc 	beq.w	80a120a <__adddf3+0xe6>
 80a1452:	f04f 0203 	mov.w	r2, #3
 80a1456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a145a:	bf18      	it	ne
 80a145c:	3203      	addne	r2, #3
 80a145e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1462:	bf18      	it	ne
 80a1464:	3203      	addne	r2, #3
 80a1466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a146a:	f1c2 0320 	rsb	r3, r2, #32
 80a146e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1472:	fa20 f002 	lsr.w	r0, r0, r2
 80a1476:	fa01 fe03 	lsl.w	lr, r1, r3
 80a147a:	ea40 000e 	orr.w	r0, r0, lr
 80a147e:	fa21 f102 	lsr.w	r1, r1, r2
 80a1482:	4414      	add	r4, r2
 80a1484:	e6c1      	b.n	80a120a <__adddf3+0xe6>
 80a1486:	bf00      	nop

080a1488 <__aeabi_dmul>:
 80a1488:	b570      	push	{r4, r5, r6, lr}
 80a148a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a148e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1496:	bf1d      	ittte	ne
 80a1498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a149c:	ea94 0f0c 	teqne	r4, ip
 80a14a0:	ea95 0f0c 	teqne	r5, ip
 80a14a4:	f000 f8de 	bleq	80a1664 <__aeabi_dmul+0x1dc>
 80a14a8:	442c      	add	r4, r5
 80a14aa:	ea81 0603 	eor.w	r6, r1, r3
 80a14ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a14b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a14b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a14ba:	bf18      	it	ne
 80a14bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a14c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a14c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a14c8:	d038      	beq.n	80a153c <__aeabi_dmul+0xb4>
 80a14ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80a14ce:	f04f 0500 	mov.w	r5, #0
 80a14d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a14d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a14da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a14de:	f04f 0600 	mov.w	r6, #0
 80a14e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a14e6:	f09c 0f00 	teq	ip, #0
 80a14ea:	bf18      	it	ne
 80a14ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80a14f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a14f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a14f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a14fc:	d204      	bcs.n	80a1508 <__aeabi_dmul+0x80>
 80a14fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1502:	416d      	adcs	r5, r5
 80a1504:	eb46 0606 	adc.w	r6, r6, r6
 80a1508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a150c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a151c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1520:	bf88      	it	hi
 80a1522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1526:	d81e      	bhi.n	80a1566 <__aeabi_dmul+0xde>
 80a1528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a152c:	bf08      	it	eq
 80a152e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1532:	f150 0000 	adcs.w	r0, r0, #0
 80a1536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a153a:	bd70      	pop	{r4, r5, r6, pc}
 80a153c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1540:	ea46 0101 	orr.w	r1, r6, r1
 80a1544:	ea40 0002 	orr.w	r0, r0, r2
 80a1548:	ea81 0103 	eor.w	r1, r1, r3
 80a154c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1550:	bfc2      	ittt	gt
 80a1552:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a155a:	bd70      	popgt	{r4, r5, r6, pc}
 80a155c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1560:	f04f 0e00 	mov.w	lr, #0
 80a1564:	3c01      	subs	r4, #1
 80a1566:	f300 80ab 	bgt.w	80a16c0 <__aeabi_dmul+0x238>
 80a156a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a156e:	bfde      	ittt	le
 80a1570:	2000      	movle	r0, #0
 80a1572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1576:	bd70      	pople	{r4, r5, r6, pc}
 80a1578:	f1c4 0400 	rsb	r4, r4, #0
 80a157c:	3c20      	subs	r4, #32
 80a157e:	da35      	bge.n	80a15ec <__aeabi_dmul+0x164>
 80a1580:	340c      	adds	r4, #12
 80a1582:	dc1b      	bgt.n	80a15bc <__aeabi_dmul+0x134>
 80a1584:	f104 0414 	add.w	r4, r4, #20
 80a1588:	f1c4 0520 	rsb	r5, r4, #32
 80a158c:	fa00 f305 	lsl.w	r3, r0, r5
 80a1590:	fa20 f004 	lsr.w	r0, r0, r4
 80a1594:	fa01 f205 	lsl.w	r2, r1, r5
 80a1598:	ea40 0002 	orr.w	r0, r0, r2
 80a159c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a15a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a15a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a15a8:	fa21 f604 	lsr.w	r6, r1, r4
 80a15ac:	eb42 0106 	adc.w	r1, r2, r6
 80a15b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a15b4:	bf08      	it	eq
 80a15b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a15ba:	bd70      	pop	{r4, r5, r6, pc}
 80a15bc:	f1c4 040c 	rsb	r4, r4, #12
 80a15c0:	f1c4 0520 	rsb	r5, r4, #32
 80a15c4:	fa00 f304 	lsl.w	r3, r0, r4
 80a15c8:	fa20 f005 	lsr.w	r0, r0, r5
 80a15cc:	fa01 f204 	lsl.w	r2, r1, r4
 80a15d0:	ea40 0002 	orr.w	r0, r0, r2
 80a15d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a15d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a15dc:	f141 0100 	adc.w	r1, r1, #0
 80a15e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a15e4:	bf08      	it	eq
 80a15e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a15ea:	bd70      	pop	{r4, r5, r6, pc}
 80a15ec:	f1c4 0520 	rsb	r5, r4, #32
 80a15f0:	fa00 f205 	lsl.w	r2, r0, r5
 80a15f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a15f8:	fa20 f304 	lsr.w	r3, r0, r4
 80a15fc:	fa01 f205 	lsl.w	r2, r1, r5
 80a1600:	ea43 0302 	orr.w	r3, r3, r2
 80a1604:	fa21 f004 	lsr.w	r0, r1, r4
 80a1608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a160c:	fa21 f204 	lsr.w	r2, r1, r4
 80a1610:	ea20 0002 	bic.w	r0, r0, r2
 80a1614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a161c:	bf08      	it	eq
 80a161e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1622:	bd70      	pop	{r4, r5, r6, pc}
 80a1624:	f094 0f00 	teq	r4, #0
 80a1628:	d10f      	bne.n	80a164a <__aeabi_dmul+0x1c2>
 80a162a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a162e:	0040      	lsls	r0, r0, #1
 80a1630:	eb41 0101 	adc.w	r1, r1, r1
 80a1634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1638:	bf08      	it	eq
 80a163a:	3c01      	subeq	r4, #1
 80a163c:	d0f7      	beq.n	80a162e <__aeabi_dmul+0x1a6>
 80a163e:	ea41 0106 	orr.w	r1, r1, r6
 80a1642:	f095 0f00 	teq	r5, #0
 80a1646:	bf18      	it	ne
 80a1648:	4770      	bxne	lr
 80a164a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a164e:	0052      	lsls	r2, r2, #1
 80a1650:	eb43 0303 	adc.w	r3, r3, r3
 80a1654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1658:	bf08      	it	eq
 80a165a:	3d01      	subeq	r5, #1
 80a165c:	d0f7      	beq.n	80a164e <__aeabi_dmul+0x1c6>
 80a165e:	ea43 0306 	orr.w	r3, r3, r6
 80a1662:	4770      	bx	lr
 80a1664:	ea94 0f0c 	teq	r4, ip
 80a1668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a166c:	bf18      	it	ne
 80a166e:	ea95 0f0c 	teqne	r5, ip
 80a1672:	d00c      	beq.n	80a168e <__aeabi_dmul+0x206>
 80a1674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1678:	bf18      	it	ne
 80a167a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a167e:	d1d1      	bne.n	80a1624 <__aeabi_dmul+0x19c>
 80a1680:	ea81 0103 	eor.w	r1, r1, r3
 80a1684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1688:	f04f 0000 	mov.w	r0, #0
 80a168c:	bd70      	pop	{r4, r5, r6, pc}
 80a168e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1692:	bf06      	itte	eq
 80a1694:	4610      	moveq	r0, r2
 80a1696:	4619      	moveq	r1, r3
 80a1698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a169c:	d019      	beq.n	80a16d2 <__aeabi_dmul+0x24a>
 80a169e:	ea94 0f0c 	teq	r4, ip
 80a16a2:	d102      	bne.n	80a16aa <__aeabi_dmul+0x222>
 80a16a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a16a8:	d113      	bne.n	80a16d2 <__aeabi_dmul+0x24a>
 80a16aa:	ea95 0f0c 	teq	r5, ip
 80a16ae:	d105      	bne.n	80a16bc <__aeabi_dmul+0x234>
 80a16b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a16b4:	bf1c      	itt	ne
 80a16b6:	4610      	movne	r0, r2
 80a16b8:	4619      	movne	r1, r3
 80a16ba:	d10a      	bne.n	80a16d2 <__aeabi_dmul+0x24a>
 80a16bc:	ea81 0103 	eor.w	r1, r1, r3
 80a16c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a16c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a16c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a16cc:	f04f 0000 	mov.w	r0, #0
 80a16d0:	bd70      	pop	{r4, r5, r6, pc}
 80a16d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a16d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a16da:	bd70      	pop	{r4, r5, r6, pc}

080a16dc <__aeabi_ddiv>:
 80a16dc:	b570      	push	{r4, r5, r6, lr}
 80a16de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a16e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a16e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a16ea:	bf1d      	ittte	ne
 80a16ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a16f0:	ea94 0f0c 	teqne	r4, ip
 80a16f4:	ea95 0f0c 	teqne	r5, ip
 80a16f8:	f000 f8a7 	bleq	80a184a <__aeabi_ddiv+0x16e>
 80a16fc:	eba4 0405 	sub.w	r4, r4, r5
 80a1700:	ea81 0e03 	eor.w	lr, r1, r3
 80a1704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a170c:	f000 8088 	beq.w	80a1820 <__aeabi_ddiv+0x144>
 80a1710:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a171c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1720:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a172c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1734:	429d      	cmp	r5, r3
 80a1736:	bf08      	it	eq
 80a1738:	4296      	cmpeq	r6, r2
 80a173a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a173e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1742:	d202      	bcs.n	80a174a <__aeabi_ddiv+0x6e>
 80a1744:	085b      	lsrs	r3, r3, #1
 80a1746:	ea4f 0232 	mov.w	r2, r2, rrx
 80a174a:	1ab6      	subs	r6, r6, r2
 80a174c:	eb65 0503 	sbc.w	r5, r5, r3
 80a1750:	085b      	lsrs	r3, r3, #1
 80a1752:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a175a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a175e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1762:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1766:	bf22      	ittt	cs
 80a1768:	1ab6      	subcs	r6, r6, r2
 80a176a:	4675      	movcs	r5, lr
 80a176c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1770:	085b      	lsrs	r3, r3, #1
 80a1772:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1776:	ebb6 0e02 	subs.w	lr, r6, r2
 80a177a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a177e:	bf22      	ittt	cs
 80a1780:	1ab6      	subcs	r6, r6, r2
 80a1782:	4675      	movcs	r5, lr
 80a1784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1788:	085b      	lsrs	r3, r3, #1
 80a178a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a178e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1792:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1796:	bf22      	ittt	cs
 80a1798:	1ab6      	subcs	r6, r6, r2
 80a179a:	4675      	movcs	r5, lr
 80a179c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a17a0:	085b      	lsrs	r3, r3, #1
 80a17a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a17a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a17aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a17ae:	bf22      	ittt	cs
 80a17b0:	1ab6      	subcs	r6, r6, r2
 80a17b2:	4675      	movcs	r5, lr
 80a17b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a17b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a17bc:	d018      	beq.n	80a17f0 <__aeabi_ddiv+0x114>
 80a17be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a17c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a17c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a17ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a17ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a17d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a17d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a17da:	d1c0      	bne.n	80a175e <__aeabi_ddiv+0x82>
 80a17dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a17e0:	d10b      	bne.n	80a17fa <__aeabi_ddiv+0x11e>
 80a17e2:	ea41 0100 	orr.w	r1, r1, r0
 80a17e6:	f04f 0000 	mov.w	r0, #0
 80a17ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a17ee:	e7b6      	b.n	80a175e <__aeabi_ddiv+0x82>
 80a17f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a17f4:	bf04      	itt	eq
 80a17f6:	4301      	orreq	r1, r0
 80a17f8:	2000      	moveq	r0, #0
 80a17fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a17fe:	bf88      	it	hi
 80a1800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1804:	f63f aeaf 	bhi.w	80a1566 <__aeabi_dmul+0xde>
 80a1808:	ebb5 0c03 	subs.w	ip, r5, r3
 80a180c:	bf04      	itt	eq
 80a180e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a1812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1816:	f150 0000 	adcs.w	r0, r0, #0
 80a181a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a181e:	bd70      	pop	{r4, r5, r6, pc}
 80a1820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a1824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a1828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a182c:	bfc2      	ittt	gt
 80a182e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1836:	bd70      	popgt	{r4, r5, r6, pc}
 80a1838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a183c:	f04f 0e00 	mov.w	lr, #0
 80a1840:	3c01      	subs	r4, #1
 80a1842:	e690      	b.n	80a1566 <__aeabi_dmul+0xde>
 80a1844:	ea45 0e06 	orr.w	lr, r5, r6
 80a1848:	e68d      	b.n	80a1566 <__aeabi_dmul+0xde>
 80a184a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a184e:	ea94 0f0c 	teq	r4, ip
 80a1852:	bf08      	it	eq
 80a1854:	ea95 0f0c 	teqeq	r5, ip
 80a1858:	f43f af3b 	beq.w	80a16d2 <__aeabi_dmul+0x24a>
 80a185c:	ea94 0f0c 	teq	r4, ip
 80a1860:	d10a      	bne.n	80a1878 <__aeabi_ddiv+0x19c>
 80a1862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1866:	f47f af34 	bne.w	80a16d2 <__aeabi_dmul+0x24a>
 80a186a:	ea95 0f0c 	teq	r5, ip
 80a186e:	f47f af25 	bne.w	80a16bc <__aeabi_dmul+0x234>
 80a1872:	4610      	mov	r0, r2
 80a1874:	4619      	mov	r1, r3
 80a1876:	e72c      	b.n	80a16d2 <__aeabi_dmul+0x24a>
 80a1878:	ea95 0f0c 	teq	r5, ip
 80a187c:	d106      	bne.n	80a188c <__aeabi_ddiv+0x1b0>
 80a187e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1882:	f43f aefd 	beq.w	80a1680 <__aeabi_dmul+0x1f8>
 80a1886:	4610      	mov	r0, r2
 80a1888:	4619      	mov	r1, r3
 80a188a:	e722      	b.n	80a16d2 <__aeabi_dmul+0x24a>
 80a188c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1890:	bf18      	it	ne
 80a1892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1896:	f47f aec5 	bne.w	80a1624 <__aeabi_dmul+0x19c>
 80a189a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a189e:	f47f af0d 	bne.w	80a16bc <__aeabi_dmul+0x234>
 80a18a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a18a6:	f47f aeeb 	bne.w	80a1680 <__aeabi_dmul+0x1f8>
 80a18aa:	e712      	b.n	80a16d2 <__aeabi_dmul+0x24a>

080a18ac <__aeabi_frsub>:
 80a18ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a18b0:	e002      	b.n	80a18b8 <__addsf3>
 80a18b2:	bf00      	nop

080a18b4 <__aeabi_fsub>:
 80a18b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a18b8 <__addsf3>:
 80a18b8:	0042      	lsls	r2, r0, #1
 80a18ba:	bf1f      	itttt	ne
 80a18bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a18c0:	ea92 0f03 	teqne	r2, r3
 80a18c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a18c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a18cc:	d06a      	beq.n	80a19a4 <__addsf3+0xec>
 80a18ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a18d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a18d6:	bfc1      	itttt	gt
 80a18d8:	18d2      	addgt	r2, r2, r3
 80a18da:	4041      	eorgt	r1, r0
 80a18dc:	4048      	eorgt	r0, r1
 80a18de:	4041      	eorgt	r1, r0
 80a18e0:	bfb8      	it	lt
 80a18e2:	425b      	neglt	r3, r3
 80a18e4:	2b19      	cmp	r3, #25
 80a18e6:	bf88      	it	hi
 80a18e8:	4770      	bxhi	lr
 80a18ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a18ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a18f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a18f6:	bf18      	it	ne
 80a18f8:	4240      	negne	r0, r0
 80a18fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a18fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a1902:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a1906:	bf18      	it	ne
 80a1908:	4249      	negne	r1, r1
 80a190a:	ea92 0f03 	teq	r2, r3
 80a190e:	d03f      	beq.n	80a1990 <__addsf3+0xd8>
 80a1910:	f1a2 0201 	sub.w	r2, r2, #1
 80a1914:	fa41 fc03 	asr.w	ip, r1, r3
 80a1918:	eb10 000c 	adds.w	r0, r0, ip
 80a191c:	f1c3 0320 	rsb	r3, r3, #32
 80a1920:	fa01 f103 	lsl.w	r1, r1, r3
 80a1924:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1928:	d502      	bpl.n	80a1930 <__addsf3+0x78>
 80a192a:	4249      	negs	r1, r1
 80a192c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a1930:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1934:	d313      	bcc.n	80a195e <__addsf3+0xa6>
 80a1936:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a193a:	d306      	bcc.n	80a194a <__addsf3+0x92>
 80a193c:	0840      	lsrs	r0, r0, #1
 80a193e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1942:	f102 0201 	add.w	r2, r2, #1
 80a1946:	2afe      	cmp	r2, #254	; 0xfe
 80a1948:	d251      	bcs.n	80a19ee <__addsf3+0x136>
 80a194a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a194e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1952:	bf08      	it	eq
 80a1954:	f020 0001 	biceq.w	r0, r0, #1
 80a1958:	ea40 0003 	orr.w	r0, r0, r3
 80a195c:	4770      	bx	lr
 80a195e:	0049      	lsls	r1, r1, #1
 80a1960:	eb40 0000 	adc.w	r0, r0, r0
 80a1964:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a1968:	f1a2 0201 	sub.w	r2, r2, #1
 80a196c:	d1ed      	bne.n	80a194a <__addsf3+0x92>
 80a196e:	fab0 fc80 	clz	ip, r0
 80a1972:	f1ac 0c08 	sub.w	ip, ip, #8
 80a1976:	ebb2 020c 	subs.w	r2, r2, ip
 80a197a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a197e:	bfaa      	itet	ge
 80a1980:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a1984:	4252      	neglt	r2, r2
 80a1986:	4318      	orrge	r0, r3
 80a1988:	bfbc      	itt	lt
 80a198a:	40d0      	lsrlt	r0, r2
 80a198c:	4318      	orrlt	r0, r3
 80a198e:	4770      	bx	lr
 80a1990:	f092 0f00 	teq	r2, #0
 80a1994:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a1998:	bf06      	itte	eq
 80a199a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a199e:	3201      	addeq	r2, #1
 80a19a0:	3b01      	subne	r3, #1
 80a19a2:	e7b5      	b.n	80a1910 <__addsf3+0x58>
 80a19a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a19a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a19ac:	bf18      	it	ne
 80a19ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a19b2:	d021      	beq.n	80a19f8 <__addsf3+0x140>
 80a19b4:	ea92 0f03 	teq	r2, r3
 80a19b8:	d004      	beq.n	80a19c4 <__addsf3+0x10c>
 80a19ba:	f092 0f00 	teq	r2, #0
 80a19be:	bf08      	it	eq
 80a19c0:	4608      	moveq	r0, r1
 80a19c2:	4770      	bx	lr
 80a19c4:	ea90 0f01 	teq	r0, r1
 80a19c8:	bf1c      	itt	ne
 80a19ca:	2000      	movne	r0, #0
 80a19cc:	4770      	bxne	lr
 80a19ce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a19d2:	d104      	bne.n	80a19de <__addsf3+0x126>
 80a19d4:	0040      	lsls	r0, r0, #1
 80a19d6:	bf28      	it	cs
 80a19d8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a19dc:	4770      	bx	lr
 80a19de:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a19e2:	bf3c      	itt	cc
 80a19e4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a19e8:	4770      	bxcc	lr
 80a19ea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a19ee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a19f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a19f6:	4770      	bx	lr
 80a19f8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a19fc:	bf16      	itet	ne
 80a19fe:	4608      	movne	r0, r1
 80a1a00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a1a04:	4601      	movne	r1, r0
 80a1a06:	0242      	lsls	r2, r0, #9
 80a1a08:	bf06      	itte	eq
 80a1a0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a1a0e:	ea90 0f01 	teqeq	r0, r1
 80a1a12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a1a16:	4770      	bx	lr

080a1a18 <__aeabi_ui2f>:
 80a1a18:	f04f 0300 	mov.w	r3, #0
 80a1a1c:	e004      	b.n	80a1a28 <__aeabi_i2f+0x8>
 80a1a1e:	bf00      	nop

080a1a20 <__aeabi_i2f>:
 80a1a20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a1a24:	bf48      	it	mi
 80a1a26:	4240      	negmi	r0, r0
 80a1a28:	ea5f 0c00 	movs.w	ip, r0
 80a1a2c:	bf08      	it	eq
 80a1a2e:	4770      	bxeq	lr
 80a1a30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a1a34:	4601      	mov	r1, r0
 80a1a36:	f04f 0000 	mov.w	r0, #0
 80a1a3a:	e01c      	b.n	80a1a76 <__aeabi_l2f+0x2a>

080a1a3c <__aeabi_ul2f>:
 80a1a3c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1a40:	bf08      	it	eq
 80a1a42:	4770      	bxeq	lr
 80a1a44:	f04f 0300 	mov.w	r3, #0
 80a1a48:	e00a      	b.n	80a1a60 <__aeabi_l2f+0x14>
 80a1a4a:	bf00      	nop

080a1a4c <__aeabi_l2f>:
 80a1a4c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1a50:	bf08      	it	eq
 80a1a52:	4770      	bxeq	lr
 80a1a54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a1a58:	d502      	bpl.n	80a1a60 <__aeabi_l2f+0x14>
 80a1a5a:	4240      	negs	r0, r0
 80a1a5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1a60:	ea5f 0c01 	movs.w	ip, r1
 80a1a64:	bf02      	ittt	eq
 80a1a66:	4684      	moveq	ip, r0
 80a1a68:	4601      	moveq	r1, r0
 80a1a6a:	2000      	moveq	r0, #0
 80a1a6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a1a70:	bf08      	it	eq
 80a1a72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a1a76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a1a7a:	fabc f28c 	clz	r2, ip
 80a1a7e:	3a08      	subs	r2, #8
 80a1a80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a1a84:	db10      	blt.n	80a1aa8 <__aeabi_l2f+0x5c>
 80a1a86:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1a8a:	4463      	add	r3, ip
 80a1a8c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1a90:	f1c2 0220 	rsb	r2, r2, #32
 80a1a94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1a98:	fa20 f202 	lsr.w	r2, r0, r2
 80a1a9c:	eb43 0002 	adc.w	r0, r3, r2
 80a1aa0:	bf08      	it	eq
 80a1aa2:	f020 0001 	biceq.w	r0, r0, #1
 80a1aa6:	4770      	bx	lr
 80a1aa8:	f102 0220 	add.w	r2, r2, #32
 80a1aac:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1ab0:	f1c2 0220 	rsb	r2, r2, #32
 80a1ab4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a1ab8:	fa21 f202 	lsr.w	r2, r1, r2
 80a1abc:	eb43 0002 	adc.w	r0, r3, r2
 80a1ac0:	bf08      	it	eq
 80a1ac2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1ac6:	4770      	bx	lr

080a1ac8 <__aeabi_fmul>:
 80a1ac8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1acc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a1ad0:	bf1e      	ittt	ne
 80a1ad2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a1ad6:	ea92 0f0c 	teqne	r2, ip
 80a1ada:	ea93 0f0c 	teqne	r3, ip
 80a1ade:	d06f      	beq.n	80a1bc0 <__aeabi_fmul+0xf8>
 80a1ae0:	441a      	add	r2, r3
 80a1ae2:	ea80 0c01 	eor.w	ip, r0, r1
 80a1ae6:	0240      	lsls	r0, r0, #9
 80a1ae8:	bf18      	it	ne
 80a1aea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a1aee:	d01e      	beq.n	80a1b2e <__aeabi_fmul+0x66>
 80a1af0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a1af4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a1af8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a1afc:	fba0 3101 	umull	r3, r1, r0, r1
 80a1b00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1b04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a1b08:	bf3e      	ittt	cc
 80a1b0a:	0049      	lslcc	r1, r1, #1
 80a1b0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a1b10:	005b      	lslcc	r3, r3, #1
 80a1b12:	ea40 0001 	orr.w	r0, r0, r1
 80a1b16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a1b1a:	2afd      	cmp	r2, #253	; 0xfd
 80a1b1c:	d81d      	bhi.n	80a1b5a <__aeabi_fmul+0x92>
 80a1b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a1b22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1b26:	bf08      	it	eq
 80a1b28:	f020 0001 	biceq.w	r0, r0, #1
 80a1b2c:	4770      	bx	lr
 80a1b2e:	f090 0f00 	teq	r0, #0
 80a1b32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1b36:	bf08      	it	eq
 80a1b38:	0249      	lsleq	r1, r1, #9
 80a1b3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a1b3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a1b42:	3a7f      	subs	r2, #127	; 0x7f
 80a1b44:	bfc2      	ittt	gt
 80a1b46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a1b4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a1b4e:	4770      	bxgt	lr
 80a1b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1b54:	f04f 0300 	mov.w	r3, #0
 80a1b58:	3a01      	subs	r2, #1
 80a1b5a:	dc5d      	bgt.n	80a1c18 <__aeabi_fmul+0x150>
 80a1b5c:	f112 0f19 	cmn.w	r2, #25
 80a1b60:	bfdc      	itt	le
 80a1b62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a1b66:	4770      	bxle	lr
 80a1b68:	f1c2 0200 	rsb	r2, r2, #0
 80a1b6c:	0041      	lsls	r1, r0, #1
 80a1b6e:	fa21 f102 	lsr.w	r1, r1, r2
 80a1b72:	f1c2 0220 	rsb	r2, r2, #32
 80a1b76:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1b7a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a1b7e:	f140 0000 	adc.w	r0, r0, #0
 80a1b82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a1b86:	bf08      	it	eq
 80a1b88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1b8c:	4770      	bx	lr
 80a1b8e:	f092 0f00 	teq	r2, #0
 80a1b92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a1b96:	bf02      	ittt	eq
 80a1b98:	0040      	lsleq	r0, r0, #1
 80a1b9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a1b9e:	3a01      	subeq	r2, #1
 80a1ba0:	d0f9      	beq.n	80a1b96 <__aeabi_fmul+0xce>
 80a1ba2:	ea40 000c 	orr.w	r0, r0, ip
 80a1ba6:	f093 0f00 	teq	r3, #0
 80a1baa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1bae:	bf02      	ittt	eq
 80a1bb0:	0049      	lsleq	r1, r1, #1
 80a1bb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a1bb6:	3b01      	subeq	r3, #1
 80a1bb8:	d0f9      	beq.n	80a1bae <__aeabi_fmul+0xe6>
 80a1bba:	ea41 010c 	orr.w	r1, r1, ip
 80a1bbe:	e78f      	b.n	80a1ae0 <__aeabi_fmul+0x18>
 80a1bc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a1bc4:	ea92 0f0c 	teq	r2, ip
 80a1bc8:	bf18      	it	ne
 80a1bca:	ea93 0f0c 	teqne	r3, ip
 80a1bce:	d00a      	beq.n	80a1be6 <__aeabi_fmul+0x11e>
 80a1bd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a1bd4:	bf18      	it	ne
 80a1bd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a1bda:	d1d8      	bne.n	80a1b8e <__aeabi_fmul+0xc6>
 80a1bdc:	ea80 0001 	eor.w	r0, r0, r1
 80a1be0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a1be4:	4770      	bx	lr
 80a1be6:	f090 0f00 	teq	r0, #0
 80a1bea:	bf17      	itett	ne
 80a1bec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a1bf0:	4608      	moveq	r0, r1
 80a1bf2:	f091 0f00 	teqne	r1, #0
 80a1bf6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a1bfa:	d014      	beq.n	80a1c26 <__aeabi_fmul+0x15e>
 80a1bfc:	ea92 0f0c 	teq	r2, ip
 80a1c00:	d101      	bne.n	80a1c06 <__aeabi_fmul+0x13e>
 80a1c02:	0242      	lsls	r2, r0, #9
 80a1c04:	d10f      	bne.n	80a1c26 <__aeabi_fmul+0x15e>
 80a1c06:	ea93 0f0c 	teq	r3, ip
 80a1c0a:	d103      	bne.n	80a1c14 <__aeabi_fmul+0x14c>
 80a1c0c:	024b      	lsls	r3, r1, #9
 80a1c0e:	bf18      	it	ne
 80a1c10:	4608      	movne	r0, r1
 80a1c12:	d108      	bne.n	80a1c26 <__aeabi_fmul+0x15e>
 80a1c14:	ea80 0001 	eor.w	r0, r0, r1
 80a1c18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a1c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1c24:	4770      	bx	lr
 80a1c26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1c2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a1c2e:	4770      	bx	lr

080a1c30 <__aeabi_fdiv>:
 80a1c30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1c34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a1c38:	bf1e      	ittt	ne
 80a1c3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a1c3e:	ea92 0f0c 	teqne	r2, ip
 80a1c42:	ea93 0f0c 	teqne	r3, ip
 80a1c46:	d069      	beq.n	80a1d1c <__aeabi_fdiv+0xec>
 80a1c48:	eba2 0203 	sub.w	r2, r2, r3
 80a1c4c:	ea80 0c01 	eor.w	ip, r0, r1
 80a1c50:	0249      	lsls	r1, r1, #9
 80a1c52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a1c56:	d037      	beq.n	80a1cc8 <__aeabi_fdiv+0x98>
 80a1c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a1c5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a1c60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a1c64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1c68:	428b      	cmp	r3, r1
 80a1c6a:	bf38      	it	cc
 80a1c6c:	005b      	lslcc	r3, r3, #1
 80a1c6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a1c72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a1c76:	428b      	cmp	r3, r1
 80a1c78:	bf24      	itt	cs
 80a1c7a:	1a5b      	subcs	r3, r3, r1
 80a1c7c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1c80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a1c84:	bf24      	itt	cs
 80a1c86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a1c8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1c8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a1c92:	bf24      	itt	cs
 80a1c94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a1c98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1c9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a1ca0:	bf24      	itt	cs
 80a1ca2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a1ca6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1caa:	011b      	lsls	r3, r3, #4
 80a1cac:	bf18      	it	ne
 80a1cae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a1cb2:	d1e0      	bne.n	80a1c76 <__aeabi_fdiv+0x46>
 80a1cb4:	2afd      	cmp	r2, #253	; 0xfd
 80a1cb6:	f63f af50 	bhi.w	80a1b5a <__aeabi_fmul+0x92>
 80a1cba:	428b      	cmp	r3, r1
 80a1cbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1cc0:	bf08      	it	eq
 80a1cc2:	f020 0001 	biceq.w	r0, r0, #1
 80a1cc6:	4770      	bx	lr
 80a1cc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1ccc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a1cd0:	327f      	adds	r2, #127	; 0x7f
 80a1cd2:	bfc2      	ittt	gt
 80a1cd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a1cd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a1cdc:	4770      	bxgt	lr
 80a1cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1ce2:	f04f 0300 	mov.w	r3, #0
 80a1ce6:	3a01      	subs	r2, #1
 80a1ce8:	e737      	b.n	80a1b5a <__aeabi_fmul+0x92>
 80a1cea:	f092 0f00 	teq	r2, #0
 80a1cee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a1cf2:	bf02      	ittt	eq
 80a1cf4:	0040      	lsleq	r0, r0, #1
 80a1cf6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a1cfa:	3a01      	subeq	r2, #1
 80a1cfc:	d0f9      	beq.n	80a1cf2 <__aeabi_fdiv+0xc2>
 80a1cfe:	ea40 000c 	orr.w	r0, r0, ip
 80a1d02:	f093 0f00 	teq	r3, #0
 80a1d06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1d0a:	bf02      	ittt	eq
 80a1d0c:	0049      	lsleq	r1, r1, #1
 80a1d0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a1d12:	3b01      	subeq	r3, #1
 80a1d14:	d0f9      	beq.n	80a1d0a <__aeabi_fdiv+0xda>
 80a1d16:	ea41 010c 	orr.w	r1, r1, ip
 80a1d1a:	e795      	b.n	80a1c48 <__aeabi_fdiv+0x18>
 80a1d1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a1d20:	ea92 0f0c 	teq	r2, ip
 80a1d24:	d108      	bne.n	80a1d38 <__aeabi_fdiv+0x108>
 80a1d26:	0242      	lsls	r2, r0, #9
 80a1d28:	f47f af7d 	bne.w	80a1c26 <__aeabi_fmul+0x15e>
 80a1d2c:	ea93 0f0c 	teq	r3, ip
 80a1d30:	f47f af70 	bne.w	80a1c14 <__aeabi_fmul+0x14c>
 80a1d34:	4608      	mov	r0, r1
 80a1d36:	e776      	b.n	80a1c26 <__aeabi_fmul+0x15e>
 80a1d38:	ea93 0f0c 	teq	r3, ip
 80a1d3c:	d104      	bne.n	80a1d48 <__aeabi_fdiv+0x118>
 80a1d3e:	024b      	lsls	r3, r1, #9
 80a1d40:	f43f af4c 	beq.w	80a1bdc <__aeabi_fmul+0x114>
 80a1d44:	4608      	mov	r0, r1
 80a1d46:	e76e      	b.n	80a1c26 <__aeabi_fmul+0x15e>
 80a1d48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a1d4c:	bf18      	it	ne
 80a1d4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a1d52:	d1ca      	bne.n	80a1cea <__aeabi_fdiv+0xba>
 80a1d54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a1d58:	f47f af5c 	bne.w	80a1c14 <__aeabi_fmul+0x14c>
 80a1d5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a1d60:	f47f af3c 	bne.w	80a1bdc <__aeabi_fmul+0x114>
 80a1d64:	e75f      	b.n	80a1c26 <__aeabi_fmul+0x15e>
 80a1d66:	bf00      	nop

080a1d68 <__cxa_atexit>:
 80a1d68:	b510      	push	{r4, lr}
 80a1d6a:	4c05      	ldr	r4, [pc, #20]	; (80a1d80 <__cxa_atexit+0x18>)
 80a1d6c:	4613      	mov	r3, r2
 80a1d6e:	b12c      	cbz	r4, 80a1d7c <__cxa_atexit+0x14>
 80a1d70:	460a      	mov	r2, r1
 80a1d72:	4601      	mov	r1, r0
 80a1d74:	2002      	movs	r0, #2
 80a1d76:	f3af 8000 	nop.w
 80a1d7a:	bd10      	pop	{r4, pc}
 80a1d7c:	4620      	mov	r0, r4
 80a1d7e:	bd10      	pop	{r4, pc}
 80a1d80:	00000000 	.word	0x00000000

080a1d84 <memcpy>:
 80a1d84:	b510      	push	{r4, lr}
 80a1d86:	1e43      	subs	r3, r0, #1
 80a1d88:	440a      	add	r2, r1
 80a1d8a:	4291      	cmp	r1, r2
 80a1d8c:	d004      	beq.n	80a1d98 <memcpy+0x14>
 80a1d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1d92:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1d96:	e7f8      	b.n	80a1d8a <memcpy+0x6>
 80a1d98:	bd10      	pop	{r4, pc}

080a1d9a <memset>:
 80a1d9a:	4603      	mov	r3, r0
 80a1d9c:	4402      	add	r2, r0
 80a1d9e:	4293      	cmp	r3, r2
 80a1da0:	d002      	beq.n	80a1da8 <memset+0xe>
 80a1da2:	f803 1b01 	strb.w	r1, [r3], #1
 80a1da6:	e7fa      	b.n	80a1d9e <memset+0x4>
 80a1da8:	4770      	bx	lr

080a1daa <strlen>:
 80a1daa:	4603      	mov	r3, r0
 80a1dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1db0:	2a00      	cmp	r2, #0
 80a1db2:	d1fb      	bne.n	80a1dac <strlen+0x2>
 80a1db4:	1a18      	subs	r0, r3, r0
 80a1db6:	3801      	subs	r0, #1
 80a1db8:	4770      	bx	lr

080a1dba <link_code_end>:
	...

080a1dbc <dynalib_user>:
 80a1dbc:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1dcc:	0000 0000 6574 706d 7265 7461 7275 0065     ....temperature.
 80a1ddc:	7568 696d 6964 7974 6400 6169 546c 6d65     humidity.dialTem
 80a1dec:	0070 0000                                   p...

080a1df0 <_ZTV7TwoWire>:
	...
 80a1df8:	0661 080a 06ab 080a 0683 080a 0663 080a     a...........c...
 80a1e08:	068b 080a 0693 080a 069b 080a 06a3 080a     ................

080a1e18 <_ZTV9IPAddress>:
	...
 80a1e20:	06fb 080a 06ed 080a 06ef 080a 0066 6e6c     ............f.ln
 80a1e30:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80a1e40:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80a1e50:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a1e60:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a1e70:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a1e80:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a1e90:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a1ea0:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a1eb0:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a1ec0:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a1ed0:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a1ee0:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80a1ef0:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a1f00:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a1f10 <_ZTV8SPIClass>:
	...
 80a1f18:	0845 080a 0847 080a 005a 2b25 3330 3a64     E...G...Z.%+03d:
 80a1f28:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1f38:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1f48:	0000 0000                                   ....

080a1f4c <_ZTV11USARTSerial>:
	...
 80a1f54:	089d 080a 08c1 080a 08cd 080a 0771 080a     ............q...
 80a1f64:	08a9 080a 08b5 080a 08af 080a 08bb 080a     ................
 80a1f74:	089f 080a 08a3 080a                         ........

080a1f7c <_ZTV9USBSerial>:
	...
 80a1f84:	0975 080a 09b9 080a 0993 080a 0771 080a     u...........q...
 80a1f94:	098d 080a 0977 080a 097f 080a 09b3 080a     ....w...........
 80a1fa4:	0987 080a 0971 080a                         ....q...

080a1fac <_ZTVN5spark9WiFiClassE>:
	...
 80a1fb4:	0adf 080a                                   ....

080a1fb8 <link_const_variable_data_end>:
 80a1fb8:	080a0195 	.word	0x080a0195
 80a1fbc:	080a0391 	.word	0x080a0391
 80a1fc0:	080a0761 	.word	0x080a0761
 80a1fc4:	080a0829 	.word	0x080a0829
 80a1fc8:	080a0883 	.word	0x080a0883
 80a1fcc:	080a0889 	.word	0x080a0889
 80a1fd0:	080a0ae9 	.word	0x080a0ae9
 80a1fd4:	080a0d69 	.word	0x080a0d69
 80a1fd8:	080a0d99 	.word	0x080a0d99
 80a1fdc:	080a0de9 	.word	0x080a0de9
 80a1fe0:	080a0ead 	.word	0x080a0ead
 80a1fe4:	080a0f31 	.word	0x080a0f31
 80a1fe8:	080a0fb5 	.word	0x080a0fb5

080a1fec <link_constructors_end>:
 80a1fec:	00000000 	.word	0x00000000
