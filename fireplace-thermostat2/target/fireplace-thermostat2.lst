
/Users/psahota/dev/particle/fireplace-thermostat2/target/fireplace-thermostat2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b78  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001ac4c  2**0
                  CONTENTS
  3 .data         00000090  2003e200  000dab90  0000e200  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000560  2003e290  2003e290  0001e290  2**3
                  ALLOC
  5 .module_info_suffix 00000028  000dac20  000dac20  0001ac20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000dac48  000dac48  0001ac48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000db3f8  00000000  00000000  0001ac4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00013522  00000000  00000000  000f6044  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00018ed3  00000000  00000000  00109566  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002180  00000000  00000000  00122439  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003688  00000000  00000000  001245b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00039d24  00000000  00000000  00127c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002f643  00000000  00000000  00161965  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e68ca  00000000  00000000  00190fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c23c  00000000  00000000  00277874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	b4 7b 0d 00                                         .{..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fd7d 	bl	d7b2c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fd82 	bl	d7b42 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e200 	.word	0x2003e200
   d4048:	000dab90 	.word	0x000dab90
   d404c:	2003e290 	.word	0x2003e290
   d4050:	2003e290 	.word	0x2003e290
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fecf 	bl	d6dfc <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000dab84 	.word	0x000dab84
   d4080:	000dab38 	.word	0x000dab38

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b930 	b.w	d42e8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fac1 	bl	d4610 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 be81 	b.w	d6d98 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 b903 	b.w	d62a0 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f002 b901 	b.w	d62a0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b907 	b.w	d62b0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b905 	b.w	d62b0 <free>
	...

000d40a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 f86a 	bl	d6188 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5eb9 	.word	0x000d5eb9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d40cc:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40ce:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d40d0:	6898      	ldr	r0, [r3, #8]
   d40d2:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40d4:	f012 0f01 	tst.w	r2, #1
   d40d8:	ea4f 0262 	mov.w	r2, r2, asr #1
   d40dc:	bf18      	it	ne
   d40de:	5881      	ldrne	r1, [r0, r2]
   d40e0:	4410      	add	r0, r2
   d40e2:	bf18      	it	ne
   d40e4:	58cb      	ldrne	r3, [r1, r3]
   d40e6:	4718      	bx	r3

000d40e8 <nrf_gpio_pin_read>:
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40e8:	282f      	cmp	r0, #47	; 0x2f
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d40ea:	b510      	push	{r4, lr}
   d40ec:	4604      	mov	r4, r0
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40ee:	d905      	bls.n	d40fc <nrf_gpio_pin_read+0x14>
   d40f0:	4a09      	ldr	r2, [pc, #36]	; (d4118 <nrf_gpio_pin_read+0x30>)
   d40f2:	2100      	movs	r1, #0
   d40f4:	200a      	movs	r0, #10
   d40f6:	f002 f847 	bl	d6188 <panic_>
   d40fa:	e001      	b.n	d4100 <nrf_gpio_pin_read+0x18>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40fc:	281f      	cmp	r0, #31
   d40fe:	d903      	bls.n	d4108 <nrf_gpio_pin_read+0x20>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4100:	f004 041f 	and.w	r4, r4, #31
        return NRF_P1;
   d4104:	4b05      	ldr	r3, [pc, #20]	; (d411c <nrf_gpio_pin_read+0x34>)
   d4106:	e001      	b.n	d410c <nrf_gpio_pin_read+0x24>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4108:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d410c:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4110:	40e0      	lsrs	r0, r4
}
   d4112:	f000 0001 	and.w	r0, r0, #1
   d4116:	bd10      	pop	{r4, pc}
   d4118:	000d5eb9 	.word	0x000d5eb9
   d411c:	50000300 	.word	0x50000300

000d4120 <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   d4120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4122:	4e25      	ldr	r6, [pc, #148]	; (d41b8 <_ZN7Encoder16interruptHandlerEv+0x98>)
   d4124:	8903      	ldrh	r3, [r0, #8]
   d4126:	6832      	ldr	r2, [r6, #0]
   d4128:	011b      	lsls	r3, r3, #4
   d412a:	18d1      	adds	r1, r2, r3
   d412c:	5cd5      	ldrb	r5, [r2, r3]
   d412e:	784b      	ldrb	r3, [r1, #1]
   d4130:	f003 031f 	and.w	r3, r3, #31
   d4134:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
   d4138:	4604      	mov	r4, r0
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d413a:	4628      	mov	r0, r5
   d413c:	f7ff ffd4 	bl	d40e8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4140:	4628      	mov	r0, r5
   d4142:	f7ff ffd1 	bl	d40e8 <nrf_gpio_pin_read>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4146:	89a3      	ldrh	r3, [r4, #12]
   d4148:	6832      	ldr	r2, [r6, #0]
   d414a:	011b      	lsls	r3, r3, #4
   d414c:	18d1      	adds	r1, r2, r3
   d414e:	5cd5      	ldrb	r5, [r2, r3]
   d4150:	784b      	ldrb	r3, [r1, #1]
   d4152:	f003 031f 	and.w	r3, r3, #31
   d4156:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d415a:	4607      	mov	r7, r0

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d415c:	4628      	mov	r0, r5
   d415e:	f7ff ffc3 	bl	d40e8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4162:	4628      	mov	r0, r5
   d4164:	f7ff ffc0 	bl	d40e8 <nrf_gpio_pin_read>
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
		uint8_t newState = state & 3;
   d4168:	7c23      	ldrb	r3, [r4, #16]
		if (p1val) newState |= 4;
   d416a:	f017 0fff 	tst.w	r7, #255	; 0xff

private:
	void interruptHandler() {
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
		uint8_t newState = state & 3;
   d416e:	f003 0303 	and.w	r3, r3, #3
*/

private:
	void interruptHandler() {
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   d4172:	b2c0      	uxtb	r0, r0
		uint8_t newState = state & 3;
		if (p1val) newState |= 4;
   d4174:	bf18      	it	ne
   d4176:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) newState |= 8;
   d417a:	b108      	cbz	r0, d4180 <_ZN7Encoder16interruptHandlerEv+0x60>
   d417c:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
   d4180:	109a      	asrs	r2, r3, #2
		switch (newState) {
   d4182:	3b01      	subs	r3, #1
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
		uint8_t newState = state & 3;
		if (p1val) newState |= 4;
		if (p2val) newState |= 8;
		state = (newState >> 2);
   d4184:	7422      	strb	r2, [r4, #16]
		switch (newState) {
   d4186:	2b0d      	cmp	r3, #13
   d4188:	d814      	bhi.n	d41b4 <_ZN7Encoder16interruptHandlerEv+0x94>
   d418a:	e8df f003 	tbb	[pc, r3]
   d418e:	0a07      	.short	0x0a07
   d4190:	10130a0d 	.word	0x10130a0d
   d4194:	13100707 	.word	0x13100707
   d4198:	070a0d0a 	.word	0x070a0d0a
			case 1: case 7: case 8: case 14:
				position++;
   d419c:	6963      	ldr	r3, [r4, #20]
   d419e:	3301      	adds	r3, #1
   d41a0:	e007      	b.n	d41b2 <_ZN7Encoder16interruptHandlerEv+0x92>
				return;
			case 2: case 4: case 11: case 13:
				position--;
   d41a2:	6963      	ldr	r3, [r4, #20]
   d41a4:	3b01      	subs	r3, #1
   d41a6:	e004      	b.n	d41b2 <_ZN7Encoder16interruptHandlerEv+0x92>
				return;
			case 3: case 12:
				position += 2;
   d41a8:	6963      	ldr	r3, [r4, #20]
   d41aa:	3302      	adds	r3, #2
   d41ac:	e001      	b.n	d41b2 <_ZN7Encoder16interruptHandlerEv+0x92>
				return;
			case 6: case 9:
				position -= 2;
   d41ae:	6963      	ldr	r3, [r4, #20]
   d41b0:	3b02      	subs	r3, #2
   d41b2:	6163      	str	r3, [r4, #20]
   d41b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d41b6:	bf00      	nop
   d41b8:	2003e31c 	.word	0x2003e31c

000d41bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d41bc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d41be:	b538      	push	{r3, r4, r5, lr}
   d41c0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d41c2:	d005      	beq.n	d41d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   d41c4:	2a03      	cmp	r2, #3
   d41c6:	d00f      	beq.n	d41e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
   d41c8:	2a01      	cmp	r2, #1
   d41ca:	d111      	bne.n	d41f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d41cc:	680b      	ldr	r3, [r1, #0]
   d41ce:	e009      	b.n	d41e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d41d0:	200c      	movs	r0, #12
   d41d2:	680d      	ldr	r5, [r1, #0]
   d41d4:	f7ff ff5f 	bl	d4096 <_Znwj>
   d41d8:	4603      	mov	r3, r0
   d41da:	b118      	cbz	r0, d41e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
   d41dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d41e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d41e4:	6023      	str	r3, [r4, #0]
   d41e6:	e003      	b.n	d41f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM7EncoderFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d41e8:	210c      	movs	r1, #12
   d41ea:	6800      	ldr	r0, [r0, #0]
   d41ec:	f002 fec9 	bl	d6f82 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d41f0:	2000      	movs	r0, #0
   d41f2:	bd38      	pop	{r3, r4, r5, pc}

000d41f4 <_Z27computeTargetOperatingStatev>:
double gHumidity = NAN;     // Particle variable
double gTemperature = NAN;  // Particle variable

double gTargetTemp = 18.0; // TODO read from EEPROM on startup

int computeTargetOperatingState() {
   d41f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // don't have a valid temperature
    if (gDebug) Serial.println("\nAssertion Failure: Don't have a valid target temperature");
    return FALSE;
  }
  
  if (gDebug) {
   d41f8:	4c28      	ldr	r4, [pc, #160]	; (d429c <_Z27computeTargetOperatingStatev+0xa8>)
   d41fa:	4d29      	ldr	r5, [pc, #164]	; (d42a0 <_Z27computeTargetOperatingStatev+0xac>)
   d41fc:	6823      	ldr	r3, [r4, #0]
   d41fe:	4e29      	ldr	r6, [pc, #164]	; (d42a4 <_Z27computeTargetOperatingStatev+0xb0>)
double gHumidity = NAN;     // Particle variable
double gTemperature = NAN;  // Particle variable

double gTargetTemp = 18.0; // TODO read from EEPROM on startup

int computeTargetOperatingState() {
   d4200:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
    // don't have a valid temperature
    if (gDebug) Serial.println("\nAssertion Failure: Don't have a valid target temperature");
    return FALSE;
  }
  
  if (gDebug) {
   d4204:	b173      	cbz	r3, d4224 <_Z27computeTargetOperatingStatev+0x30>
     char buffer [1024];
     sprintf(buffer, "computeOS: temperature = %f, targetTemp: %f", gTemperature, gTargetTemp);
   d4206:	e9d6 2300 	ldrd	r2, r3, [r6]
   d420a:	4927      	ldr	r1, [pc, #156]	; (d42a8 <_Z27computeTargetOperatingStatev+0xb4>)
   d420c:	e9cd 2300 	strd	r2, r3, [sp]
   d4210:	a802      	add	r0, sp, #8
   d4212:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4216:	f002 f853 	bl	d62c0 <sprintf>
    Serial.println(buffer);
   d421a:	f002 fd3b 	bl	d6c94 <_Z16_fetch_usbserialv>
   d421e:	a902      	add	r1, sp, #8
   d4220:	f002 fb6b 	bl	d68fa <_ZN5Print7printlnEPKc>
  // On/Off Range
  // We don’t want the fireplace turning on and off all the time so we let the
  // temperature go a little over before we turn it off and a little under
  // before we turn it on again. +/-0.5ºC is the minimum granularity based on
  // the sensitivity of the sensor we are using so we’ll use that.
  if (gTemperature >= (gTargetTemp + 0.5)) {
   d4224:	e9d6 8900 	ldrd	r8, r9, [r6]
   d4228:	e9d5 6700 	ldrd	r6, r7, [r5]
   d422c:	2200      	movs	r2, #0
   d422e:	4b1f      	ldr	r3, [pc, #124]	; (d42ac <_Z27computeTargetOperatingStatev+0xb8>)
   d4230:	4640      	mov	r0, r8
   d4232:	4649      	mov	r1, r9
   d4234:	f002 fff8 	bl	d7228 <__adddf3>
   d4238:	4632      	mov	r2, r6
   d423a:	463b      	mov	r3, r7
   d423c:	f003 fc22 	bl	d7a84 <__aeabi_dcmple>
   d4240:	b140      	cbz	r0, d4254 <_Z27computeTargetOperatingStatev+0x60>
    if (gDebug) Serial.println("debug: computing OperatingState to Off");
   d4242:	6820      	ldr	r0, [r4, #0]
   d4244:	b328      	cbz	r0, d4292 <_Z27computeTargetOperatingStatev+0x9e>
   d4246:	f002 fd25 	bl	d6c94 <_Z16_fetch_usbserialv>
   d424a:	4919      	ldr	r1, [pc, #100]	; (d42b0 <_Z27computeTargetOperatingStatev+0xbc>)
   d424c:	f002 fb55 	bl	d68fa <_ZN5Print7printlnEPKc>
    return FALSE;
   d4250:	2000      	movs	r0, #0
   d4252:	e01e      	b.n	d4292 <_Z27computeTargetOperatingStatev+0x9e>
  }
  else if (gTemperature <= (gTargetTemp - 0.5) ) {
   d4254:	2200      	movs	r2, #0
   d4256:	4b15      	ldr	r3, [pc, #84]	; (d42ac <_Z27computeTargetOperatingStatev+0xb8>)
   d4258:	4640      	mov	r0, r8
   d425a:	4649      	mov	r1, r9
   d425c:	f002 ffe2 	bl	d7224 <__aeabi_dsub>
   d4260:	460b      	mov	r3, r1
   d4262:	4602      	mov	r2, r0
   d4264:	4639      	mov	r1, r7
   d4266:	4630      	mov	r0, r6
   d4268:	f003 fc0c 	bl	d7a84 <__aeabi_dcmple>
    if (gDebug) Serial.println("debug: computing OperatingState to On");
   d426c:	6823      	ldr	r3, [r4, #0]
  // the sensitivity of the sensor we are using so we’ll use that.
  if (gTemperature >= (gTargetTemp + 0.5)) {
    if (gDebug) Serial.println("debug: computing OperatingState to Off");
    return FALSE;
  }
  else if (gTemperature <= (gTargetTemp - 0.5) ) {
   d426e:	b130      	cbz	r0, d427e <_Z27computeTargetOperatingStatev+0x8a>
    if (gDebug) Serial.println("debug: computing OperatingState to On");
   d4270:	b173      	cbz	r3, d4290 <_Z27computeTargetOperatingStatev+0x9c>
   d4272:	f002 fd0f 	bl	d6c94 <_Z16_fetch_usbserialv>
   d4276:	490f      	ldr	r1, [pc, #60]	; (d42b4 <_Z27computeTargetOperatingStatev+0xc0>)
   d4278:	f002 fb3f 	bl	d68fa <_ZN5Print7printlnEPKc>
   d427c:	e008      	b.n	d4290 <_Z27computeTargetOperatingStatev+0x9c>
    return TRUE;
  }
  else {
    // leave it at whatever the current state is
    if (gDebug) Serial.println("debug: leaving the operating state the way it is");
   d427e:	b123      	cbz	r3, d428a <_Z27computeTargetOperatingStatev+0x96>
   d4280:	f002 fd08 	bl	d6c94 <_Z16_fetch_usbserialv>
   d4284:	490c      	ldr	r1, [pc, #48]	; (d42b8 <_Z27computeTargetOperatingStatev+0xc4>)
   d4286:	f002 fb38 	bl	d68fa <_ZN5Print7printlnEPKc>
    return gState.callingForHeat;
   d428a:	4b0c      	ldr	r3, [pc, #48]	; (d42bc <_Z27computeTargetOperatingStatev+0xc8>)
   d428c:	6858      	ldr	r0, [r3, #4]
   d428e:	e000      	b.n	d4292 <_Z27computeTargetOperatingStatev+0x9e>
    if (gDebug) Serial.println("debug: computing OperatingState to Off");
    return FALSE;
  }
  else if (gTemperature <= (gTargetTemp - 0.5) ) {
    if (gDebug) Serial.println("debug: computing OperatingState to On");
    return TRUE;
   d4290:	2001      	movs	r0, #1
  else {
    // leave it at whatever the current state is
    if (gDebug) Serial.println("debug: leaving the operating state the way it is");
    return gState.callingForHeat;
  }
} 
   d4292:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
   d4296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d429a:	bf00      	nop
   d429c:	2003e338 	.word	0x2003e338
   d42a0:	2003e210 	.word	0x2003e210
   d42a4:	2003e208 	.word	0x2003e208
   d42a8:	000d938c 	.word	0x000d938c
   d42ac:	3fe00000 	.word	0x3fe00000
   d42b0:	000d93b8 	.word	0x000d93b8
   d42b4:	000d93df 	.word	0x000d93df
   d42b8:	000d9405 	.word	0x000d9405
   d42bc:	2003e298 	.word	0x2003e298

000d42c0 <_Z25setLatchingOperatingStatei>:

void setLatchingOperatingState(int callForHeat) {
   d42c0:	b510      	push	{r4, lr}
  int pin;
  if (callForHeat) {
   d42c2:	2800      	cmp	r0, #0
  else {
    pin = THERMOSTAT_OFF_PIN;
  }

  // pulse the appropriate pin to toggle the latching relay
  digitalWrite(pin, HIGH);
   d42c4:	bf14      	ite	ne
   d42c6:	2407      	movne	r4, #7
   d42c8:	2406      	moveq	r4, #6
   d42ca:	2101      	movs	r1, #1
   d42cc:	4620      	mov	r0, r4
   d42ce:	f002 fde4 	bl	d6e9a <digitalWrite>
  delay(RELAY_LATCH_PULSE_TIME);
   d42d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d42d6:	f002 f803 	bl	d62e0 <delay>
  digitalWrite(pin, LOW);
   d42da:	4620      	mov	r0, r4
   d42dc:	2100      	movs	r1, #0
}
   d42de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }

  // pulse the appropriate pin to toggle the latching relay
  digitalWrite(pin, HIGH);
  delay(RELAY_LATCH_PULSE_TIME);
  digitalWrite(pin, LOW);
   d42e2:	f002 bdda 	b.w	d6e9a <digitalWrite>
	...

000d42e8 <setup>:
}

// setup() runs once, when the device is first turned on.
// Put initialization like pinMode and begin functions here.
void setup() {
   d42e8:	b570      	push	{r4, r5, r6, lr}
  if (gDebug) {
   d42ea:	4b2c      	ldr	r3, [pc, #176]	; (d439c <setup+0xb4>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	b153      	cbz	r3, d4306 <setup+0x1e>
      Serial.begin(9600);            // open the serial port at 9600 bps:
   d42f0:	f002 fcd0 	bl	d6c94 <_Z16_fetch_usbserialv>
   d42f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42f8:	f002 fcc0 	bl	d6c7c <_ZN9USBSerial5beginEl>
      Serial.println("\nSetup...");  // prints another carriage return
   d42fc:	f002 fcca 	bl	d6c94 <_Z16_fetch_usbserialv>
   d4300:	4927      	ldr	r1, [pc, #156]	; (d43a0 <setup+0xb8>)
   d4302:	f002 fafa 	bl	d68fa <_ZN5Print7printlnEPKc>
  }

  // READ Target Temp from EEPROM
  gState.callingForHeat = FALSE;
   d4306:	2400      	movs	r4, #0
   d4308:	4e26      	ldr	r6, [pc, #152]	; (d43a4 <setup+0xbc>)
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d430a:	4927      	ldr	r1, [pc, #156]	; (d43a8 <setup+0xc0>)
   d430c:	4827      	ldr	r0, [pc, #156]	; (d43ac <setup+0xc4>)
   d430e:	6074      	str	r4, [r6, #4]
  gState.mode = HEAT_ON;
   d4310:	2501      	movs	r5, #1
   d4312:	4623      	mov	r3, r4
   d4314:	2209      	movs	r2, #9
   d4316:	7035      	strb	r5, [r6, #0]
   d4318:	f001 ff62 	bl	d61e0 <spark_variable>
   d431c:	4623      	mov	r3, r4
   d431e:	2209      	movs	r2, #9
   d4320:	4923      	ldr	r1, [pc, #140]	; (d43b0 <setup+0xc8>)
   d4322:	4824      	ldr	r0, [pc, #144]	; (d43b4 <setup+0xcc>)
   d4324:	f001 ff5c 	bl	d61e0 <spark_variable>

  Particle.variable("temperature", &gTemperature, DOUBLE);
  Particle.variable("humidity", &gHumidity, DOUBLE);
  gDHT.begin();
   d4328:	4823      	ldr	r0, [pc, #140]	; (d43b8 <setup+0xd0>)
   d432a:	f000 faba 	bl	d48a2 <_ZN3DHT5beginEv>
   d432e:	4623      	mov	r3, r4
   d4330:	2202      	movs	r2, #2
   d4332:	1d31      	adds	r1, r6, #4
   d4334:	4821      	ldr	r0, [pc, #132]	; (d43bc <setup+0xd4>)
   d4336:	f001 ff53 	bl	d61e0 <spark_variable>
        
  Particle.variable("Calling4Heat", &gState.callingForHeat, INT);

  pinMode(THERMOSTAT_ON_PIN, OUTPUT);
   d433a:	4629      	mov	r1, r5
   d433c:	2007      	movs	r0, #7
   d433e:	f002 fd9b 	bl	d6e78 <pinMode>
  pinMode(THERMOSTAT_OFF_PIN, OUTPUT);
   d4342:	4629      	mov	r1, r5
   d4344:	2006      	movs	r0, #6
   d4346:	f002 fd97 	bl	d6e78 <pinMode>

  digitalWrite(THERMOSTAT_ON_PIN, LOW);
   d434a:	4621      	mov	r1, r4
   d434c:	2007      	movs	r0, #7
   d434e:	f002 fda4 	bl	d6e9a <digitalWrite>
  digitalWrite(THERMOSTAT_OFF_PIN, LOW);
   d4352:	4621      	mov	r1, r4
   d4354:	2006      	movs	r0, #6
   d4356:	f002 fda0 	bl	d6e9a <digitalWrite>
  // TODO load state from EEPROM
  //
  
  // initialize latching relay
  gState.callingForHeat = FALSE;
  setLatchingOperatingState(FALSE);
   d435a:	4620      	mov	r0, r4
  //
  // TODO load state from EEPROM
  //
  
  // initialize latching relay
  gState.callingForHeat = FALSE;
   d435c:	6074      	str	r4, [r6, #4]
  setLatchingOperatingState(FALSE);
   d435e:	f7ff ffaf 	bl	d42c0 <_Z25setLatchingOperatingStatei>

  gDisplay.setup();
   d4362:	4817      	ldr	r0, [pc, #92]	; (d43c0 <setup+0xd8>)
   d4364:	f001 fd38 	bl	d5dd8 <_ZN16OledWingAdafruit5setupEv>
  gDisplay.clearDisplay();
   d4368:	4815      	ldr	r0, [pc, #84]	; (d43c0 <setup+0xd8>)
   d436a:	f001 fac3 	bl	d58f4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  gDisplay.setTextSize(1);
   d436e:	4629      	mov	r1, r5
   d4370:	4813      	ldr	r0, [pc, #76]	; (d43c0 <setup+0xd8>)
   d4372:	f000 ff03 	bl	d517c <_ZN12Adafruit_GFX11setTextSizeEh>
	gDisplay.setTextColor(WHITE);
   d4376:	4629      	mov	r1, r5
   d4378:	4811      	ldr	r0, [pc, #68]	; (d43c0 <setup+0xd8>)
   d437a:	f000 ff04 	bl	d5186 <_ZN12Adafruit_GFX12setTextColorEt>
	gDisplay.setCursor(15, 24);
   d437e:	2218      	movs	r2, #24
   d4380:	210f      	movs	r1, #15
   d4382:	480f      	ldr	r0, [pc, #60]	; (d43c0 <setup+0xd8>)
   d4384:	f000 fef7 	bl	d5176 <_ZN12Adafruit_GFX9setCursorEss>
	gDisplay.println("Festeworks");
   d4388:	490e      	ldr	r1, [pc, #56]	; (d43c4 <setup+0xdc>)
   d438a:	480d      	ldr	r0, [pc, #52]	; (d43c0 <setup+0xd8>)
   d438c:	f002 fab5 	bl	d68fa <_ZN5Print7printlnEPKc>
	gDisplay.display();
   d4390:	480b      	ldr	r0, [pc, #44]	; (d43c0 <setup+0xd8>)
}
   d4392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  gDisplay.clearDisplay();
  gDisplay.setTextSize(1);
	gDisplay.setTextColor(WHITE);
	gDisplay.setCursor(15, 24);
	gDisplay.println("Festeworks");
	gDisplay.display();
   d4396:	f001 bc21 	b.w	d5bdc <_ZN16Adafruit_SSD13067displayEv>
   d439a:	bf00      	nop
   d439c:	2003e338 	.word	0x2003e338
   d43a0:	000d9436 	.word	0x000d9436
   d43a4:	2003e298 	.word	0x2003e298
   d43a8:	2003e210 	.word	0x2003e210
   d43ac:	000d9440 	.word	0x000d9440
   d43b0:	2003e200 	.word	0x2003e200
   d43b4:	000d944c 	.word	0x000d944c
   d43b8:	2003e324 	.word	0x2003e324
   d43bc:	000d9455 	.word	0x000d9455
   d43c0:	2003e2cc 	.word	0x2003e2cc
   d43c4:	000d9462 	.word	0x000d9462

000d43c8 <_Z21stepTargetTemperaturei>:
// either 0.5 degrees C or 1 degree F
// by the specified number of steps
// if called from a push button this would be 1
// if from a dial or slider then this could be many
//
double stepTargetTemperature(int steps) {
   d43c8:	b538      	push	{r3, r4, r5, lr}
  // TODO HANDLE FARENHEIGHT step by 1 degree instead of 0.5
  return max(min(gTargetTemp + steps * 0.5, TEMP_MAX), TEMP_MIN);
   d43ca:	f003 f879 	bl	d74c0 <__aeabi_i2d>
   d43ce:	2200      	movs	r2, #0
   d43d0:	4b0e      	ldr	r3, [pc, #56]	; (d440c <_Z21stepTargetTemperaturei+0x44>)
   d43d2:	f003 f8db 	bl	d758c <__aeabi_dmul>
   d43d6:	4b0e      	ldr	r3, [pc, #56]	; (d4410 <_Z21stepTargetTemperaturei+0x48>)
   d43d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43dc:	f002 ff24 	bl	d7228 <__adddf3>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d43e0:	2200      	movs	r2, #0
   d43e2:	4b0c      	ldr	r3, [pc, #48]	; (d4414 <_Z21stepTargetTemperaturei+0x4c>)
   d43e4:	4604      	mov	r4, r0
   d43e6:	460d      	mov	r5, r1
   d43e8:	f003 fb42 	bl	d7a70 <__aeabi_dcmplt>
   d43ec:	b148      	cbz	r0, d4402 <_Z21stepTargetTemperaturei+0x3a>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d43ee:	2200      	movs	r2, #0
   d43f0:	4b09      	ldr	r3, [pc, #36]	; (d4418 <_Z21stepTargetTemperaturei+0x50>)
   d43f2:	4620      	mov	r0, r4
   d43f4:	4629      	mov	r1, r5
   d43f6:	f003 fb59 	bl	d7aac <__aeabi_dcmpgt>
   d43fa:	b920      	cbnz	r0, d4406 <_Z21stepTargetTemperaturei+0x3e>
   d43fc:	2400      	movs	r4, #0
   d43fe:	4d06      	ldr	r5, [pc, #24]	; (d4418 <_Z21stepTargetTemperaturei+0x50>)
   d4400:	e001      	b.n	d4406 <_Z21stepTargetTemperaturei+0x3e>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4402:	4d04      	ldr	r5, [pc, #16]	; (d4414 <_Z21stepTargetTemperaturei+0x4c>)
   d4404:	2400      	movs	r4, #0
}
   d4406:	ec45 4b10 	vmov	d0, r4, r5
   d440a:	bd38      	pop	{r3, r4, r5, pc}
   d440c:	3fe00000 	.word	0x3fe00000
   d4410:	2003e208 	.word	0x2003e208
   d4414:	403e0000 	.word	0x403e0000
   d4418:	40140000 	.word	0x40140000

000d441c <_Z28dialComputeTargetTemperaturev>:
// Take a delta position and calculate a new target temperature
// based on 4 positions temperature step value
// if the temperature hits the min or max then we should reset the
// reference position so that spinning it the otherway will yield
// immediate benefit.
double dialComputeTargetTemperature() {
   d441c:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  // no target temperature above 30 degrees; no temperature below 5
  //return max(min(gTargetTemp + gtempDelta, 30.0), 5.0);
  double newTemp = stepTargetTemperature((gDialCurrentPosition - gDialReferencePosition) / 4);
   d4420:	4c17      	ldr	r4, [pc, #92]	; (d4480 <_Z28dialComputeTargetTemperaturev+0x64>)
   d4422:	4b18      	ldr	r3, [pc, #96]	; (d4484 <_Z28dialComputeTargetTemperaturev+0x68>)
   d4424:	6820      	ldr	r0, [r4, #0]
   d4426:	e9d3 6700 	ldrd	r6, r7, [r3]
   d442a:	f003 f849 	bl	d74c0 <__aeabi_i2d>
   d442e:	4602      	mov	r2, r0
   d4430:	460b      	mov	r3, r1
   d4432:	4630      	mov	r0, r6
   d4434:	4639      	mov	r1, r7
   d4436:	f002 fef5 	bl	d7224 <__aeabi_dsub>
   d443a:	2200      	movs	r2, #0
   d443c:	4b12      	ldr	r3, [pc, #72]	; (d4488 <_Z28dialComputeTargetTemperaturev+0x6c>)
   d443e:	f003 f8a5 	bl	d758c <__aeabi_dmul>
   d4442:	f003 fb3d 	bl	d7ac0 <__aeabi_d2iz>
   d4446:	f7ff ffbf 	bl	d43c8 <_Z21stepTargetTemperaturei>
   d444a:	ec59 8b10 	vmov	r8, r9, d0
  if (newTemp == TEMP_MAX || newTemp == TEMP_MIN) {
   d444e:	2200      	movs	r2, #0
   d4450:	4b0e      	ldr	r3, [pc, #56]	; (d448c <_Z28dialComputeTargetTemperaturev+0x70>)
   d4452:	ee10 0a10 	vmov	r0, s0
   d4456:	4649      	mov	r1, r9
   d4458:	f003 fb00 	bl	d7a5c <__aeabi_dcmpeq>
   d445c:	b930      	cbnz	r0, d446c <_Z28dialComputeTargetTemperaturev+0x50>
   d445e:	2200      	movs	r2, #0
   d4460:	4b0b      	ldr	r3, [pc, #44]	; (d4490 <_Z28dialComputeTargetTemperaturev+0x74>)
   d4462:	4640      	mov	r0, r8
   d4464:	4649      	mov	r1, r9
   d4466:	f003 faf9 	bl	d7a5c <__aeabi_dcmpeq>
   d446a:	b120      	cbz	r0, d4476 <_Z28dialComputeTargetTemperaturev+0x5a>
    // reset the reference position
    gDialReferencePosition = gDialCurrentPosition;
   d446c:	4630      	mov	r0, r6
   d446e:	4639      	mov	r1, r7
   d4470:	f003 fb26 	bl	d7ac0 <__aeabi_d2iz>
   d4474:	6020      	str	r0, [r4, #0]
  }
  return newTemp;
}
   d4476:	ec49 8b10 	vmov	d0, r8, r9
   d447a:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
   d447e:	bf00      	nop
   d4480:	2003e2c8 	.word	0x2003e2c8
   d4484:	2003e2a8 	.word	0x2003e2a8
   d4488:	3fd00000 	.word	0x3fd00000
   d448c:	403e0000 	.word	0x403e0000
   d4490:	40140000 	.word	0x40140000

000d4494 <_Z11drawDisplayv>:
// Off     22.5
// Heat to 24.0
//         58%
// Error

void drawDisplay() {
   d4494:	b5f0      	push	{r4, r5, r6, r7, lr}
  char valueBuffer[5];
  char suffixBuffer[5];

  gDisplay.clearDisplay();
   d4496:	4851      	ldr	r0, [pc, #324]	; (d45dc <_Z11drawDisplayv+0x148>)
	gDisplay.setTextColor(WHITE);

  double displayValue;
  char const * displayText = NULL;

  switch (gState.display) {
   d4498:	4c51      	ldr	r4, [pc, #324]	; (d45e0 <_Z11drawDisplayv+0x14c>)
// Off     22.5
// Heat to 24.0
//         58%
// Error

void drawDisplay() {
   d449a:	b08d      	sub	sp, #52	; 0x34
  char valueBuffer[5];
  char suffixBuffer[5];

  gDisplay.clearDisplay();
   d449c:	f001 fa2a 	bl	d58f4 <_ZN16Adafruit_SSD130612clearDisplayEv>
	gDisplay.setTextColor(WHITE);
   d44a0:	2101      	movs	r1, #1
   d44a2:	484e      	ldr	r0, [pc, #312]	; (d45dc <_Z11drawDisplayv+0x148>)
   d44a4:	f000 fe6f 	bl	d5186 <_ZN12Adafruit_GFX12setTextColorEt>

  double displayValue;
  char const * displayText = NULL;

  switch (gState.display) {
   d44a8:	7863      	ldrb	r3, [r4, #1]
   d44aa:	2b01      	cmp	r3, #1
   d44ac:	d005      	beq.n	d44ba <_Z11drawDisplayv+0x26>
   d44ae:	2b02      	cmp	r3, #2
   d44b0:	d109      	bne.n	d44c6 <_Z11drawDisplayv+0x32>
  case TARGET_TEMPERATURE:
    displayValue = dialComputeTargetTemperature(); // TODO this call needs to be abstracted from dial
    displayText = "Heat to";
    break;
  case CURRENT_HUMIDITY:
    displayValue = gHumidity;
   d44b2:	4b4c      	ldr	r3, [pc, #304]	; (d45e4 <_Z11drawDisplayv+0x150>)
   d44b4:	e9d3 6700 	ldrd	r6, r7, [r3]
   d44b8:	e00e      	b.n	d44d8 <_Z11drawDisplayv+0x44>
  double displayValue;
  char const * displayText = NULL;

  switch (gState.display) {
  case TARGET_TEMPERATURE:
    displayValue = dialComputeTargetTemperature(); // TODO this call needs to be abstracted from dial
   d44ba:	f7ff ffaf 	bl	d441c <_Z28dialComputeTargetTemperaturev>
    displayText = "Heat to";
   d44be:	4d4a      	ldr	r5, [pc, #296]	; (d45e8 <_Z11drawDisplayv+0x154>)
  double displayValue;
  char const * displayText = NULL;

  switch (gState.display) {
  case TARGET_TEMPERATURE:
    displayValue = dialComputeTargetTemperature(); // TODO this call needs to be abstracted from dial
   d44c0:	ec57 6b10 	vmov	r6, r7, d0
    displayText = "Heat to";
    break;
   d44c4:	e077      	b.n	d45b6 <_Z11drawDisplayv+0x122>
  case CURRENT_HUMIDITY:
    displayValue = gHumidity;
    break;
  default: // case CURRENT_TEMPERATURE:
    displayValue = gTemperature;
   d44c6:	4b49      	ldr	r3, [pc, #292]	; (d45ec <_Z11drawDisplayv+0x158>)
   d44c8:	e9d3 6700 	ldrd	r6, r7, [r3]
    if (gState.mode == HEAT_OFF)
   d44cc:	7823      	ldrb	r3, [r4, #0]
   d44ce:	2b00      	cmp	r3, #0
   d44d0:	d070      	beq.n	d45b4 <_Z11drawDisplayv+0x120>
    gDisplay.setFont(&FreeSans9pt7b);
    gDisplay.setCursor(0, 31);
    gDisplay.print(displayText);
  }

  if (gState.display != ERROR) {
   d44d2:	7863      	ldrb	r3, [r4, #1]
   d44d4:	2b03      	cmp	r3, #3
   d44d6:	d068      	beq.n	d45aa <_Z11drawDisplayv+0x116>
    // actually place this right justified and vertically centered on the 128x32
    // display
    // gDisplay.setCursor(127 - intBounds.width - decBounds.width, (32 -
    // intBounds.height) / 2 + intBounds.height);
    // extract the decimal so that we can draw it smaller
    sprintf(valueBuffer, "%2.0f", displayValue);
   d44d8:	463b      	mov	r3, r7
   d44da:	4632      	mov	r2, r6
   d44dc:	4944      	ldr	r1, [pc, #272]	; (d45f0 <_Z11drawDisplayv+0x15c>)
   d44de:	a804      	add	r0, sp, #16
   d44e0:	f001 feee 	bl	d62c0 <sprintf>
    int intValue = (int) displayValue;  // lose the decimal
    if (gState.display == TARGET_TEMPERATURE || gState.display == CURRENT_TEMPERATURE) {
   d44e4:	7863      	ldrb	r3, [r4, #1]
   d44e6:	2b01      	cmp	r3, #1
   d44e8:	d817      	bhi.n	d451a <_Z11drawDisplayv+0x86>
      sprintf(suffixBuffer, ".%d",
          (int)((displayValue - (double)intValue) * 10.0));
   d44ea:	4639      	mov	r1, r7
   d44ec:	4630      	mov	r0, r6
   d44ee:	f003 fae7 	bl	d7ac0 <__aeabi_d2iz>
   d44f2:	f002 ffe5 	bl	d74c0 <__aeabi_i2d>
   d44f6:	4602      	mov	r2, r0
   d44f8:	460b      	mov	r3, r1
   d44fa:	4630      	mov	r0, r6
   d44fc:	4639      	mov	r1, r7
   d44fe:	f002 fe91 	bl	d7224 <__aeabi_dsub>
   d4502:	2200      	movs	r2, #0
   d4504:	4b3b      	ldr	r3, [pc, #236]	; (d45f4 <_Z11drawDisplayv+0x160>)
   d4506:	f003 f841 	bl	d758c <__aeabi_dmul>
   d450a:	f003 fad9 	bl	d7ac0 <__aeabi_d2iz>
   d450e:	493a      	ldr	r1, [pc, #232]	; (d45f8 <_Z11drawDisplayv+0x164>)
   d4510:	4602      	mov	r2, r0
   d4512:	a806      	add	r0, sp, #24
   d4514:	f001 fed4 	bl	d62c0 <sprintf>
   d4518:	e003      	b.n	d4522 <_Z11drawDisplayv+0x8e>
    }
    else {
      // assert(gState.display == CURRENT_HUMIDITY);
      sprintf(suffixBuffer, "%%");
   d451a:	4938      	ldr	r1, [pc, #224]	; (d45fc <_Z11drawDisplayv+0x168>)
   d451c:	a806      	add	r0, sp, #24
   d451e:	f001 fecf 	bl	d62c0 <sprintf>
    }
    gDisplay.setFont(&FreeSans18pt7b);
   d4522:	4937      	ldr	r1, [pc, #220]	; (d4600 <_Z11drawDisplayv+0x16c>)
   d4524:	482d      	ldr	r0, [pc, #180]	; (d45dc <_Z11drawDisplayv+0x148>)
   d4526:	f000 fe33 	bl	d5190 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    GFXBoundingBox intBounds;
    gDisplay.getTextBounds(valueBuffer, 0, 32, &intBounds.x1, &intBounds.y1,
                          &intBounds.width, &intBounds.height);
   d452a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d452e:	9303      	str	r3, [sp, #12]
   d4530:	ab09      	add	r3, sp, #36	; 0x24
   d4532:	9302      	str	r3, [sp, #8]
   d4534:	f10d 0322 	add.w	r3, sp, #34	; 0x22
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	ab08      	add	r3, sp, #32
   d453c:	2200      	movs	r2, #0
   d453e:	9300      	str	r3, [sp, #0]
   d4540:	a904      	add	r1, sp, #16
   d4542:	2320      	movs	r3, #32
   d4544:	4825      	ldr	r0, [pc, #148]	; (d45dc <_Z11drawDisplayv+0x148>)
   d4546:	f000 ff43 	bl	d53d0 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

    gDisplay.setFont(&FreeSans12pt7b);
   d454a:	492e      	ldr	r1, [pc, #184]	; (d4604 <_Z11drawDisplayv+0x170>)
   d454c:	4823      	ldr	r0, [pc, #140]	; (d45dc <_Z11drawDisplayv+0x148>)
   d454e:	f000 fe1f 	bl	d5190 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    GFXBoundingBox decBounds;
    gDisplay.getTextBounds(suffixBuffer, 0, 32, &decBounds.x1, &decBounds.y1,
                          &decBounds.width, &decBounds.height);
   d4552:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   d4556:	9303      	str	r3, [sp, #12]
   d4558:	ab0b      	add	r3, sp, #44	; 0x2c
   d455a:	9302      	str	r3, [sp, #8]
   d455c:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	ab0a      	add	r3, sp, #40	; 0x28
   d4564:	9300      	str	r3, [sp, #0]
   d4566:	2200      	movs	r2, #0
   d4568:	2320      	movs	r3, #32
   d456a:	a906      	add	r1, sp, #24
   d456c:	481b      	ldr	r0, [pc, #108]	; (d45dc <_Z11drawDisplayv+0x148>)
   d456e:	f000 ff2f 	bl	d53d0 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

    gDisplay.setCursor(115 - intBounds.width - decBounds.width, 31);
   d4572:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   d4576:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   d457a:	4818      	ldr	r0, [pc, #96]	; (d45dc <_Z11drawDisplayv+0x148>)
   d457c:	4419      	add	r1, r3
   d457e:	f1c1 0173 	rsb	r1, r1, #115	; 0x73
   d4582:	221f      	movs	r2, #31
   d4584:	b209      	sxth	r1, r1
   d4586:	f000 fdf6 	bl	d5176 <_ZN12Adafruit_GFX9setCursorEss>
    gDisplay.setFont(&FreeSans18pt7b);
   d458a:	491d      	ldr	r1, [pc, #116]	; (d4600 <_Z11drawDisplayv+0x16c>)
   d458c:	4813      	ldr	r0, [pc, #76]	; (d45dc <_Z11drawDisplayv+0x148>)
   d458e:	f000 fdff 	bl	d5190 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    gDisplay.print(valueBuffer);
   d4592:	a904      	add	r1, sp, #16
   d4594:	4811      	ldr	r0, [pc, #68]	; (d45dc <_Z11drawDisplayv+0x148>)
   d4596:	f002 f99d 	bl	d68d4 <_ZN5Print5printEPKc>
    gDisplay.setFont(&FreeSans12pt7b);
   d459a:	491a      	ldr	r1, [pc, #104]	; (d4604 <_Z11drawDisplayv+0x170>)
   d459c:	480f      	ldr	r0, [pc, #60]	; (d45dc <_Z11drawDisplayv+0x148>)
   d459e:	f000 fdf7 	bl	d5190 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    gDisplay.print(suffixBuffer);
   d45a2:	a906      	add	r1, sp, #24
   d45a4:	480d      	ldr	r0, [pc, #52]	; (d45dc <_Z11drawDisplayv+0x148>)
   d45a6:	f002 f995 	bl	d68d4 <_ZN5Print5printEPKc>
 
  }
	gDisplay.display();
   d45aa:	480c      	ldr	r0, [pc, #48]	; (d45dc <_Z11drawDisplayv+0x148>)
   d45ac:	f001 fb16 	bl	d5bdc <_ZN16Adafruit_SSD13067displayEv>
}
   d45b0:	b00d      	add	sp, #52	; 0x34
   d45b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    displayValue = gHumidity;
    break;
  default: // case CURRENT_TEMPERATURE:
    displayValue = gTemperature;
    if (gState.mode == HEAT_OFF)
      displayText = "Off";
   d45b4:	4d14      	ldr	r5, [pc, #80]	; (d4608 <_Z11drawDisplayv+0x174>)

  // layout current temperature
  // integer part of temperature or humidity in 24pt
  if (displayText) {
    // draw operating state
    gDisplay.setCursor(0, 12);
   d45b6:	4809      	ldr	r0, [pc, #36]	; (d45dc <_Z11drawDisplayv+0x148>)
   d45b8:	220c      	movs	r2, #12
   d45ba:	2100      	movs	r1, #0
   d45bc:	f000 fddb 	bl	d5176 <_ZN12Adafruit_GFX9setCursorEss>
    gDisplay.setFont(&FreeSans9pt7b);
   d45c0:	4912      	ldr	r1, [pc, #72]	; (d460c <_Z11drawDisplayv+0x178>)
   d45c2:	4806      	ldr	r0, [pc, #24]	; (d45dc <_Z11drawDisplayv+0x148>)
   d45c4:	f000 fde4 	bl	d5190 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    gDisplay.setCursor(0, 31);
   d45c8:	221f      	movs	r2, #31
   d45ca:	2100      	movs	r1, #0
   d45cc:	4803      	ldr	r0, [pc, #12]	; (d45dc <_Z11drawDisplayv+0x148>)
   d45ce:	f000 fdd2 	bl	d5176 <_ZN12Adafruit_GFX9setCursorEss>
    gDisplay.print(displayText);
   d45d2:	4629      	mov	r1, r5
   d45d4:	4801      	ldr	r0, [pc, #4]	; (d45dc <_Z11drawDisplayv+0x148>)
   d45d6:	f002 f97d 	bl	d68d4 <_ZN5Print5printEPKc>
   d45da:	e77a      	b.n	d44d2 <_Z11drawDisplayv+0x3e>
   d45dc:	2003e2cc 	.word	0x2003e2cc
   d45e0:	2003e298 	.word	0x2003e298
   d45e4:	2003e200 	.word	0x2003e200
   d45e8:	000d946d 	.word	0x000d946d
   d45ec:	2003e210 	.word	0x2003e210
   d45f0:	000d9475 	.word	0x000d9475
   d45f4:	40240000 	.word	0x40240000
   d45f8:	000d947b 	.word	0x000d947b
   d45fc:	000d947f 	.word	0x000d947f
   d4600:	000d9f3c 	.word	0x000d9f3c
   d4604:	000d977c 	.word	0x000d977c
   d4608:	000d93db 	.word	0x000d93db
   d460c:	000d9380 	.word	0x000d9380

000d4610 <loop>:
}

//
// Main Event loop
//
void loop() {
   d4610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // debounce display buttons
  gDisplay.loop();
   d4614:	4831      	ldr	r0, [pc, #196]	; (d46dc <loop+0xcc>)

  // Handle Dial Rotation
  gDialCurrentPosition = gDial.read();
   d4616:	4f32      	ldr	r7, [pc, #200]	; (d46e0 <loop+0xd0>)
  if (gDialCurrentPosition != gDialReferencePosition) {
   d4618:	4e32      	ldr	r6, [pc, #200]	; (d46e4 <loop+0xd4>)
//
// Main Event loop
//
void loop() {
  // debounce display buttons
  gDisplay.loop();
   d461a:	f001 fc01 	bl	d5e20 <_ZN16OledWingAdafruit4loopEv>
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
	}

	inline int32_t read() {
		noInterrupts();
   d461e:	f001 ff08 	bl	d6432 <_Z12noInterruptsv>
		int32_t ret = position;
   d4622:	4b31      	ldr	r3, [pc, #196]	; (d46e8 <loop+0xd8>)
   d4624:	695c      	ldr	r4, [r3, #20]
		interrupts();
   d4626:	f001 ff06 	bl	d6436 <_Z10interruptsv>

  // Handle Dial Rotation
  gDialCurrentPosition = gDial.read();
   d462a:	4620      	mov	r0, r4
   d462c:	f002 ff48 	bl	d74c0 <__aeabi_i2d>
   d4630:	4604      	mov	r4, r0
   d4632:	460d      	mov	r5, r1
   d4634:	e9c7 4500 	strd	r4, r5, [r7]
  if (gDialCurrentPosition != gDialReferencePosition) {
   d4638:	6830      	ldr	r0, [r6, #0]
   d463a:	f002 ff41 	bl	d74c0 <__aeabi_i2d>
   d463e:	4602      	mov	r2, r0
   d4640:	460b      	mov	r3, r1
   d4642:	4620      	mov	r0, r4
   d4644:	4629      	mov	r1, r5
   d4646:	f003 fa09 	bl	d7a5c <__aeabi_dcmpeq>
   d464a:	4d28      	ldr	r5, [pc, #160]	; (d46ec <loop+0xdc>)
   d464c:	4c28      	ldr	r4, [pc, #160]	; (d46f0 <loop+0xe0>)
   d464e:	b938      	cbnz	r0, d4660 <loop+0x50>
    // bump up or down by 0.5 for each two positions up or down
    // above logic makes sure that a partial click is ignored
    gChangingTargetTemperature = TRUE;
   d4650:	2301      	movs	r3, #1
   d4652:	602b      	str	r3, [r5, #0]
    gState.display = TARGET_TEMPERATURE;
   d4654:	7063      	strb	r3, [r4, #1]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4656:	f001 fc37 	bl	d5ec8 <HAL_Timer_Get_Milli_Seconds>
    gDialLastMod = millis();
   d465a:	4b26      	ldr	r3, [pc, #152]	; (d46f4 <loop+0xe4>)
   d465c:	6018      	str	r0, [r3, #0]
   d465e:	e00a      	b.n	d4676 <loop+0x66>
    // Serial.println(newPosition);
  }
  else if (gChangingTargetTemperature && (millis() - gDialLastMod > 3000)) {
   d4660:	682b      	ldr	r3, [r5, #0]
   d4662:	b143      	cbz	r3, d4676 <loop+0x66>
   d4664:	f001 fc30 	bl	d5ec8 <HAL_Timer_Get_Milli_Seconds>
   d4668:	4b22      	ldr	r3, [pc, #136]	; (d46f4 <loop+0xe4>)
   d466a:	681b      	ldr	r3, [r3, #0]
   d466c:	1ac0      	subs	r0, r0, r3
   d466e:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d4672:	4298      	cmp	r0, r3
   d4674:	d821      	bhi.n	d46ba <loop+0xaa>
  }

  int failure = 0;

  // TODO - maybe don't read these on every loop?    
  float humidity = gDHT.getHumidity();
   d4676:	4820      	ldr	r0, [pc, #128]	; (d46f8 <loop+0xe8>)
   d4678:	f000 fa02 	bl	d4a80 <_ZN3DHT11getHumidityEv>
  // delay(50); TODO put this back when we do the above
  float temperature = gDHT.getTempCelcius();
   d467c:	481e      	ldr	r0, [pc, #120]	; (d46f8 <loop+0xe8>)
  }

  int failure = 0;

  // TODO - maybe don't read these on every loop?    
  float humidity = gDHT.getHumidity();
   d467e:	ee10 5a10 	vmov	r5, s0
  // delay(50); TODO put this back when we do the above
  float temperature = gDHT.getTempCelcius();
   d4682:	f000 f9cf 	bl	d4a24 <_ZN3DHT14getTempCelciusEv>
      if (gDebug) Serial.println("FAILED to read Humidity");
      failure |= ERROR_READING_HUMIDITY;
  }

  // update global (particle) variables
  gTemperature = (double)temperature;
   d4686:	ee10 0a10 	vmov	r0, s0
   d468a:	f002 ff2b 	bl	d74e4 <__aeabi_f2d>
   d468e:	4b1b      	ldr	r3, [pc, #108]	; (d46fc <loop+0xec>)
   d4690:	e9c3 0100 	strd	r0, r1, [r3]
  gHumidity = (double)humidity;
   d4694:	4628      	mov	r0, r5
   d4696:	f002 ff25 	bl	d74e4 <__aeabi_f2d>
   d469a:	4b19      	ldr	r3, [pc, #100]	; (d4700 <loop+0xf0>)
   d469c:	e9c3 0100 	strd	r0, r1, [r3]

  //time_t now = millis();

  int callingForHeat = computeTargetOperatingState();
   d46a0:	f7ff fda8 	bl	d41f4 <_Z27computeTargetOperatingStatev>
  if (callingForHeat != gState.callingForHeat) {
   d46a4:	6862      	ldr	r2, [r4, #4]
   d46a6:	4290      	cmp	r0, r2
   d46a8:	d003      	beq.n	d46b2 <loop+0xa2>
    gState.callingForHeat = callingForHeat;
   d46aa:	4a11      	ldr	r2, [pc, #68]	; (d46f0 <loop+0xe0>)
   d46ac:	6050      	str	r0, [r2, #4]
    // set latching relay based operating state
    setLatchingOperatingState(gState.callingForHeat)
    ;
   d46ae:	f7ff fe07 	bl	d42c0 <_Z25setLatchingOperatingStatei>
    // gintOpState = (int) goperatingState;
  }

  drawDisplay();

}
   d46b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    setLatchingOperatingState(gState.callingForHeat)
    ;
    // gintOpState = (int) goperatingState;
  }

  drawDisplay();
   d46b6:	f7ff beed 	b.w	d4494 <_Z11drawDisplayv>
    gDialLastMod = millis();
    // Serial.println(newPosition);
  }
  else if (gChangingTargetTemperature && (millis() - gDialLastMod > 3000)) {
    // dial has not been modified for more that 3 seconds
    gChangingTargetTemperature = FALSE;
   d46ba:	f04f 0800 	mov.w	r8, #0
   d46be:	f8c5 8000 	str.w	r8, [r5]

    // no target temperature above 30 degrees; no temperature below 5
    gTargetTemp = dialComputeTargetTemperature();
   d46c2:	f7ff feab 	bl	d441c <_Z28dialComputeTargetTemperaturev>
   d46c6:	4b0f      	ldr	r3, [pc, #60]	; (d4704 <loop+0xf4>)
    gState.display = CURRENT_TEMPERATURE;
   d46c8:	f884 8001 	strb.w	r8, [r4, #1]
  else if (gChangingTargetTemperature && (millis() - gDialLastMod > 3000)) {
    // dial has not been modified for more that 3 seconds
    gChangingTargetTemperature = FALSE;

    // no target temperature above 30 degrees; no temperature below 5
    gTargetTemp = dialComputeTargetTemperature();
   d46cc:	ed83 0b00 	vstr	d0, [r3]
    gState.display = CURRENT_TEMPERATURE;
    gDialReferencePosition = gDialCurrentPosition;
   d46d0:	e9d7 0100 	ldrd	r0, r1, [r7]
   d46d4:	f003 f9f4 	bl	d7ac0 <__aeabi_d2iz>
   d46d8:	6030      	str	r0, [r6, #0]
   d46da:	e7cc      	b.n	d4676 <loop+0x66>
   d46dc:	2003e2cc 	.word	0x2003e2cc
   d46e0:	2003e2a8 	.word	0x2003e2a8
   d46e4:	2003e2c8 	.word	0x2003e2c8
   d46e8:	2003e2b0 	.word	0x2003e2b0
   d46ec:	2003e33c 	.word	0x2003e33c
   d46f0:	2003e298 	.word	0x2003e298
   d46f4:	2003e320 	.word	0x2003e320
   d46f8:	2003e324 	.word	0x2003e324
   d46fc:	2003e210 	.word	0x2003e210
   d4700:	2003e200 	.word	0x2003e200
   d4704:	2003e208 	.word	0x2003e208

000d4708 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   d4708:	b5f0      	push	{r4, r5, r6, r7, lr}
   d470a:	b089      	sub	sp, #36	; 0x24
   d470c:	4604      	mov	r4, r0
   d470e:	a802      	add	r0, sp, #8
   d4710:	e880 0006 	stmia.w	r0, {r1, r2}
   d4714:	461d      	mov	r5, r3
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4716:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4718:	2300      	movs	r3, #0
   d471a:	460f      	mov	r7, r1
   d471c:	9e03      	ldr	r6, [sp, #12]
   d471e:	9306      	str	r3, [sp, #24]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4720:	f7ff fcb9 	bl	d4096 <_Znwj>
   d4724:	b110      	cbz	r0, d472c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x24>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d4726:	6007      	str	r7, [r0, #0]
   d4728:	6046      	str	r6, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d472a:	6085      	str	r5, [r0, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d472c:	4b0c      	ldr	r3, [pc, #48]	; (d4760 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x58>)
   d472e:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   d4730:	4b0c      	ldr	r3, [pc, #48]	; (d4764 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x5c>)
   d4732:	9306      	str	r3, [sp, #24]
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   d4734:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4738:	9004      	str	r0, [sp, #16]
   d473a:	9300      	str	r3, [sp, #0]
   d473c:	4620      	mov	r0, r4
   d473e:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
   d4742:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d4746:	a904      	add	r1, sp, #16
   d4748:	f001 fea4 	bl	d6494 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d474c:	9b06      	ldr	r3, [sp, #24]
   d474e:	4604      	mov	r4, r0
   d4750:	b11b      	cbz	r3, d475a <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4752:	a904      	add	r1, sp, #16
   d4754:	2203      	movs	r2, #3
   d4756:	4608      	mov	r0, r1
   d4758:	4798      	blx	r3
}
   d475a:	4620      	mov	r0, r4
   d475c:	b009      	add	sp, #36	; 0x24
   d475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4760:	000d40cd 	.word	0x000d40cd
   d4764:	000d41bd 	.word	0x000d41bd

000d4768 <_ZN7EncoderC1Ett>:
#endif

class Encoder
{
public:
	Encoder(pin_t pin1, pin_t pin2) {
   d4768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d476c:	460f      	mov	r7, r1
   d476e:	4604      	mov	r4, r0
   d4770:	b089      	sub	sp, #36	; 0x24
   d4772:	4616      	mov	r6, r2
		pinMode(pin1, INPUT_PULLUP);
   d4774:	2102      	movs	r1, #2
   d4776:	4638      	mov	r0, r7
   d4778:	f002 fb7e 	bl	d6e78 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
   d477c:	2102      	movs	r1, #2
   d477e:	4630      	mov	r0, r6
   d4780:	f002 fb7a 	bl	d6e78 <pinMode>

		pin1_register = PIN_TO_BASEREG(pin1);
   d4784:	2300      	movs	r3, #0
   d4786:	6023      	str	r3, [r4, #0]
		pin1_bitmask = PIN_TO_BITMASK(pin1);
		pin2_register = PIN_TO_BASEREG(pin2);
   d4788:	6063      	str	r3, [r4, #4]
		pin2_bitmask = PIN_TO_BITMASK(pin2);
		position = 0;
   d478a:	6163      	str	r3, [r4, #20]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d478c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4790:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d483c <_ZN7EncoderC1Ett+0xd4>
	Encoder(pin_t pin1, pin_t pin2) {
		pinMode(pin1, INPUT_PULLUP);
		pinMode(pin2, INPUT_PULLUP);

		pin1_register = PIN_TO_BASEREG(pin1);
		pin1_bitmask = PIN_TO_BITMASK(pin1);
   d4794:	60a7      	str	r7, [r4, #8]
		pin2_register = PIN_TO_BASEREG(pin2);
		pin2_bitmask = PIN_TO_BITMASK(pin2);
   d4796:	60e6      	str	r6, [r4, #12]
   d4798:	f001 fb8e 	bl	d5eb8 <HAL_Delay_Microseconds>
   d479c:	8923      	ldrh	r3, [r4, #8]
   d479e:	f8d9 2000 	ldr.w	r2, [r9]
   d47a2:	011b      	lsls	r3, r3, #4
   d47a4:	18d1      	adds	r1, r2, r3
   d47a6:	5cd5      	ldrb	r5, [r2, r3]
   d47a8:	784b      	ldrb	r3, [r1, #1]
   d47aa:	f003 031f 	and.w	r3, r3, #31
   d47ae:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d47b2:	4628      	mov	r0, r5
   d47b4:	f7ff fc98 	bl	d40e8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d47b8:	4628      	mov	r0, r5
   d47ba:	f7ff fc95 	bl	d40e8 <nrf_gpio_pin_read>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47be:	89a3      	ldrh	r3, [r4, #12]
   d47c0:	f8d9 2000 	ldr.w	r2, [r9]
   d47c4:	011b      	lsls	r3, r3, #4
   d47c6:	18d1      	adds	r1, r2, r3
   d47c8:	5cd5      	ldrb	r5, [r2, r3]
   d47ca:	784b      	ldrb	r3, [r1, #1]
   d47cc:	f003 031f 	and.w	r3, r3, #31
   d47d0:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
		position = 0;
		// allow time for a passive R-C filter to charge
		// through the pullup resistors, before reading
		// the initial state
		delayMicroseconds(2000);
		uint8_t s = 0;
   d47d4:	f110 0800 	adds.w	r8, r0, #0
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d47d8:	4628      	mov	r0, r5
   d47da:	bf18      	it	ne
   d47dc:	f04f 0801 	movne.w	r8, #1
   d47e0:	f7ff fc82 	bl	d40e8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d47e4:	4628      	mov	r0, r5
   d47e6:	f7ff fc7f 	bl	d40e8 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   d47ea:	b118      	cbz	r0, d47f4 <_ZN7EncoderC1Ett+0x8c>
   d47ec:	f048 0802 	orr.w	r8, r8, #2
   d47f0:	fa5f f888 	uxtb.w	r8, r8
		state = s;
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   d47f4:	2500      	movs	r5, #0
		// the initial state
		delayMicroseconds(2000);
		uint8_t s = 0;
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
		state = s;
   d47f6:	f884 8010 	strb.w	r8, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   d47fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   d47fe:	e88d 0120 	stmia.w	sp, {r5, r8}
   d4802:	f8df 903c 	ldr.w	r9, [pc, #60]	; d4840 <_ZN7EncoderC1Ett+0xd8>
   d4806:	f8cd 9010 	str.w	r9, [sp, #16]
   d480a:	9505      	str	r5, [sp, #20]
   d480c:	9502      	str	r5, [sp, #8]
   d480e:	aa04      	add	r2, sp, #16
   d4810:	4623      	mov	r3, r4
   d4812:	ca06      	ldmia	r2, {r1, r2}
   d4814:	4638      	mov	r0, r7
   d4816:	f7ff ff77 	bl	d4708 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
   d481a:	e88d 0120 	stmia.w	sp, {r5, r8}
   d481e:	f8cd 9018 	str.w	r9, [sp, #24]
   d4822:	9507      	str	r5, [sp, #28]
   d4824:	9502      	str	r5, [sp, #8]
   d4826:	aa08      	add	r2, sp, #32
   d4828:	4623      	mov	r3, r4
   d482a:	e912 0006 	ldmdb	r2, {r1, r2}
   d482e:	4630      	mov	r0, r6
   d4830:	f7ff ff6a 	bl	d4708 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>
	}
   d4834:	4620      	mov	r0, r4
   d4836:	b009      	add	sp, #36	; 0x24
   d4838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d483c:	2003e31c 	.word	0x2003e31c
   d4840:	000d4121 	.word	0x000d4121

000d4844 <_GLOBAL__sub_I_gDisplay>:
    // gintOpState = (int) goperatingState;
  }

  drawDisplay();

}
   d4844:	b510      	push	{r4, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4846:	f001 fb47 	bl	d5ed8 <HAL_Pin_Map>

#define ERROR_READING_HUMIDITY 1
#define ERROR_READING_TEMPERATURE 2
#define ERROR_ILLEGAL_COMMAND 4

OledWingAdafruit gDisplay;
   d484a:	4c0c      	ldr	r4, [pc, #48]	; (d487c <_GLOBAL__sub_I_gDisplay+0x38>)
   d484c:	4b0c      	ldr	r3, [pc, #48]	; (d4880 <_GLOBAL__sub_I_gDisplay+0x3c>)
   d484e:	2107      	movs	r1, #7
   d4850:	6018      	str	r0, [r3, #0]
   d4852:	4620      	mov	r0, r4
   d4854:	f001 faa4 	bl	d5da0 <_ZN16OledWingAdafruitC1Ei>
   d4858:	4a0a      	ldr	r2, [pc, #40]	; (d4884 <_GLOBAL__sub_I_gDisplay+0x40>)
   d485a:	490b      	ldr	r1, [pc, #44]	; (d4888 <_GLOBAL__sub_I_gDisplay+0x44>)
   d485c:	4620      	mov	r0, r4
   d485e:	f002 fb8b 	bl	d6f78 <__aeabi_atexit>

Encoder gDial(DIAL_PIN_1, DIAL_PIN_2);
   d4862:	220f      	movs	r2, #15
   d4864:	2110      	movs	r1, #16
   d4866:	4809      	ldr	r0, [pc, #36]	; (d488c <_GLOBAL__sub_I_gDisplay+0x48>)
   d4868:	f7ff ff7e 	bl	d4768 <_ZN7EncoderC1Ett>
long gDialReferencePosition  = 0;
time_t gDialLastMod = 0;
double gDialCurrentPosition = 0.0;
int gChangingTargetTemperature = FALSE;

DHT gDHT(DHT_PIN, DHTTYPE);
   d486c:	2306      	movs	r3, #6
   d486e:	220b      	movs	r2, #11
   d4870:	2105      	movs	r1, #5
   d4872:	4807      	ldr	r0, [pc, #28]	; (d4890 <_GLOBAL__sub_I_gDisplay+0x4c>)
    // gintOpState = (int) goperatingState;
  }

  drawDisplay();

}
   d4874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
long gDialReferencePosition  = 0;
time_t gDialLastMod = 0;
double gDialCurrentPosition = 0.0;
int gChangingTargetTemperature = FALSE;

DHT gDHT(DHT_PIN, DHTTYPE);
   d4878:	f000 b80c 	b.w	d4894 <_ZN3DHTC1Ehhh>
   d487c:	2003e2cc 	.word	0x2003e2cc
   d4880:	2003e31c 	.word	0x2003e31c
   d4884:	2003e290 	.word	0x2003e290
   d4888:	000d5d91 	.word	0x000d5d91
   d488c:	2003e2b0 	.word	0x2003e2b0
   d4890:	2003e324 	.word	0x2003e324

000d4894 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4894:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4896:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d4898:	2301      	movs	r3, #1
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
   d489a:	7181      	strb	r1, [r0, #6]
	_type = type;
   d489c:	71c2      	strb	r2, [r0, #7]
	_count = count;
	firstreading = true;
   d489e:	7403      	strb	r3, [r0, #16]
}
   d48a0:	bd10      	pop	{r4, pc}

000d48a2 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d48a2:	b510      	push	{r4, lr}
   d48a4:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d48a6:	2100      	movs	r1, #0
   d48a8:	7980      	ldrb	r0, [r0, #6]
   d48aa:	f002 fae5 	bl	d6e78 <pinMode>
	digitalWrite(_pin, HIGH);
   d48ae:	2101      	movs	r1, #1
   d48b0:	79a0      	ldrb	r0, [r4, #6]
   d48b2:	f002 faf2 	bl	d6e9a <digitalWrite>
	_lastreadtime = 0;
   d48b6:	2300      	movs	r3, #0
   d48b8:	60e3      	str	r3, [r4, #12]
   d48ba:	bd10      	pop	{r4, pc}

000d48bc <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   d48bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d48c0:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d48c2:	f001 fb01 	bl	d5ec8 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d48c6:	68e3      	ldr	r3, [r4, #12]
   d48c8:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d48ca:	bf84      	itt	hi
   d48cc:	2300      	movhi	r3, #0
   d48ce:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d48d0:	7c23      	ldrb	r3, [r4, #16]
   d48d2:	b93b      	cbnz	r3, d48e4 <_ZN3DHT4readEv+0x28>
   d48d4:	68e3      	ldr	r3, [r4, #12]
   d48d6:	1ac0      	subs	r0, r0, r3
   d48d8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d48dc:	d202      	bcs.n	d48e4 <_ZN3DHT4readEv+0x28>
		return true; // return last correct measurement
   d48de:	2001      	movs	r0, #1
   d48e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d48e4:	2500      	movs	r5, #0
   d48e6:	7425      	strb	r5, [r4, #16]
   d48e8:	f001 faee 	bl	d5ec8 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   d48ec:	2101      	movs	r1, #1
	firstreading = false;
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
   d48ee:	60e0      	str	r0, [r4, #12]

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d48f0:	7125      	strb	r5, [r4, #4]
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   d48f2:	79a0      	ldrb	r0, [r4, #6]
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d48f4:	70e5      	strb	r5, [r4, #3]
   d48f6:	70a5      	strb	r5, [r4, #2]
   d48f8:	7065      	strb	r5, [r4, #1]
   d48fa:	7025      	strb	r5, [r4, #0]
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   d48fc:	f002 facd 	bl	d6e9a <digitalWrite>
	delay(250);
   d4900:	20fa      	movs	r0, #250	; 0xfa
   d4902:	f001 fced 	bl	d62e0 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d4906:	2101      	movs	r1, #1
   d4908:	79a0      	ldrb	r0, [r4, #6]
   d490a:	f002 fab5 	bl	d6e78 <pinMode>
	digitalWrite(_pin, LOW);
   d490e:	4629      	mov	r1, r5
   d4910:	79a0      	ldrb	r0, [r4, #6]
   d4912:	f002 fac2 	bl	d6e9a <digitalWrite>
	delay(20);
   d4916:	2014      	movs	r0, #20
   d4918:	f001 fce2 	bl	d62e0 <delay>
	noInterrupts();
   d491c:	f001 fd89 	bl	d6432 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   d4920:	2101      	movs	r1, #1
   d4922:	79a0      	ldrb	r0, [r4, #6]
   d4924:	f002 fab9 	bl	d6e9a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4928:	2028      	movs	r0, #40	; 0x28
   d492a:	f001 fac5 	bl	d5eb8 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d492e:	4629      	mov	r1, r5
   d4930:	79a0      	ldrb	r0, [r4, #6]
   d4932:	f002 faa1 	bl	d6e78 <pinMode>


boolean DHT::read(void) {
	uint8_t laststate = HIGH;
	uint8_t counter = 0;
	uint8_t j = 0, i;
   d4936:	462e      	mov	r6, r5
	return Td;
}


boolean DHT::read(void) {
	uint8_t laststate = HIGH;
   d4938:	2701      	movs	r7, #1
   d493a:	f04f 0800 	mov.w	r8, #0
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   d493e:	79a0      	ldrb	r0, [r4, #6]
   d4940:	f002 fac4 	bl	d6ecc <digitalRead>
   d4944:	42b8      	cmp	r0, r7
   d4946:	fa5f f988 	uxtb.w	r9, r8
   d494a:	d108      	bne.n	d495e <_ZN3DHT4readEv+0xa2>
   d494c:	2001      	movs	r0, #1
   d494e:	f108 0801 	add.w	r8, r8, #1
   d4952:	f001 fab1 	bl	d5eb8 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   d4956:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d495a:	d1f0      	bne.n	d493e <_ZN3DHT4readEv+0x82>
   d495c:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   d495e:	79a0      	ldrb	r0, [r4, #6]
   d4960:	f002 fab4 	bl	d6ecc <digitalRead>

		if (counter == 255) break;
   d4964:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = digitalRead(_pin);
   d4968:	b2c7      	uxtb	r7, r0

		if (counter == 255) break;
   d496a:	d014      	beq.n	d4996 <_ZN3DHT4readEv+0xda>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d496c:	2d03      	cmp	r5, #3
   d496e:	d90e      	bls.n	d498e <_ZN3DHT4readEv+0xd2>
   d4970:	07eb      	lsls	r3, r5, #31
   d4972:	d40c      	bmi.n	d498e <_ZN3DHT4readEv+0xd2>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4974:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4976:	3601      	adds	r6, #1
		if (counter == 255) break;

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4978:	5ca3      	ldrb	r3, [r4, r2]
   d497a:	005b      	lsls	r3, r3, #1
   d497c:	b2db      	uxtb	r3, r3
   d497e:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4980:	7a21      	ldrb	r1, [r4, #8]
   d4982:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4984:	bf3c      	itt	cc
   d4986:	f043 0301 	orrcc.w	r3, r3, #1
   d498a:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d498c:	b2f6      	uxtb	r6, r6
	digitalWrite(_pin, HIGH);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d498e:	3501      	adds	r5, #1
   d4990:	b2ed      	uxtb	r5, r5
   d4992:	2d55      	cmp	r5, #85	; 0x55
   d4994:	d1d1      	bne.n	d493a <_ZN3DHT4readEv+0x7e>
			j++;
		}

	}

	interrupts();
   d4996:	f001 fd4e 	bl	d6436 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d499a:	2e27      	cmp	r6, #39	; 0x27
   d499c:	d90a      	bls.n	d49b4 <_ZN3DHT4readEv+0xf8>
   d499e:	7822      	ldrb	r2, [r4, #0]
   d49a0:	7863      	ldrb	r3, [r4, #1]
   d49a2:	7921      	ldrb	r1, [r4, #4]
   d49a4:	4413      	add	r3, r2
   d49a6:	78a2      	ldrb	r2, [r4, #2]
   d49a8:	4413      	add	r3, r2
   d49aa:	78e2      	ldrb	r2, [r4, #3]
   d49ac:	4413      	add	r3, r2
   d49ae:	b2db      	uxtb	r3, r3
   d49b0:	4299      	cmp	r1, r3
   d49b2:	d094      	beq.n	d48de <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}
 
	return false;
   d49b4:	2000      	movs	r0, #0

}
   d49b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d49bc <_ZN3DHT15readTemperatureEv>:
	pinMode(_pin, INPUT);
	digitalWrite(_pin, HIGH);
	_lastreadtime = 0;
}

float DHT::readTemperature() {
   d49bc:	b510      	push	{r4, lr}
   d49be:	4604      	mov	r4, r0
	float f;

	if (read()) {
   d49c0:	f7ff ff7c 	bl	d48bc <_ZN3DHT4readEv>
   d49c4:	b330      	cbz	r0, d4a14 <_ZN3DHT15readTemperatureEv+0x58>
		switch (_type) {
   d49c6:	79e3      	ldrb	r3, [r4, #7]
   d49c8:	2b0b      	cmp	r3, #11
   d49ca:	d004      	beq.n	d49d6 <_ZN3DHT15readTemperatureEv+0x1a>
   d49cc:	d322      	bcc.n	d4a14 <_ZN3DHT15readTemperatureEv+0x58>
   d49ce:	3b15      	subs	r3, #21
   d49d0:	2b01      	cmp	r3, #1
   d49d2:	d906      	bls.n	d49e2 <_ZN3DHT15readTemperatureEv+0x26>
   d49d4:	e01e      	b.n	d4a14 <_ZN3DHT15readTemperatureEv+0x58>
			case DHT11:
				f = data[2];
   d49d6:	78a3      	ldrb	r3, [r4, #2]
   d49d8:	ee00 3a10 	vmov	s0, r3
   d49dc:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d49e0:	bd10      	pop	{r4, pc}
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
   d49e2:	78a3      	ldrb	r3, [r4, #2]
				f *= 256;
				f += data[3];
   d49e4:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4a1c <_ZN3DHT15readTemperatureEv+0x60>
			case DHT11:
				f = data[2];
				return f;
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
   d49e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d49ec:	ee07 2a10 	vmov	s14, r2
				f *= 256;
				f += data[3];
   d49f0:	78e2      	ldrb	r2, [r4, #3]
   d49f2:	ee07 2a90 	vmov	s15, r2
			case DHT11:
				f = data[2];
				return f;
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
   d49f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f *= 256;
				f += data[3];
   d49fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				f /= 10;
				if (data[2] & 0x80)
   d49fe:	061b      	lsls	r3, r3, #24
				return f;
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
				f *= 256;
				f += data[3];
   d4a00:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4a04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4a08:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d4a0c:	d504      	bpl.n	d4a18 <_ZN3DHT15readTemperatureEv+0x5c>
					f *= -1;
   d4a0e:	eeb1 0a40 	vneg.f32	s0, s0
   d4a12:	bd10      	pop	{r4, pc}
				return f;
		}
	}
	return NAN;
   d4a14:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4a20 <_ZN3DHT15readTemperatureEv+0x64>
}
   d4a18:	bd10      	pop	{r4, pc}
   d4a1a:	bf00      	nop
   d4a1c:	43800000 	.word	0x43800000
   d4a20:	7fc00000 	.word	0x7fc00000

000d4a24 <_ZN3DHT14getTempCelciusEv>:
float DHT::getHumidity() {
	return readHumidity();
}

float DHT::getTempCelcius() {
	return readTemperature();
   d4a24:	f7ff bfca 	b.w	d49bc <_ZN3DHT15readTemperatureEv>

000d4a28 <_ZN3DHT12readHumidityEv>:

float DHT::convertCtoK(float c) {
	return c + 273.15;
}

float DHT::readHumidity(void) {
   d4a28:	b510      	push	{r4, lr}
   d4a2a:	4604      	mov	r4, r0
	float f;

	if (read()) {
   d4a2c:	f7ff ff46 	bl	d48bc <_ZN3DHT4readEv>
   d4a30:	b1f8      	cbz	r0, d4a72 <_ZN3DHT12readHumidityEv+0x4a>
		switch (_type) {
   d4a32:	79e3      	ldrb	r3, [r4, #7]
   d4a34:	2b0b      	cmp	r3, #11
   d4a36:	d016      	beq.n	d4a66 <_ZN3DHT12readHumidityEv+0x3e>
   d4a38:	d31b      	bcc.n	d4a72 <_ZN3DHT12readHumidityEv+0x4a>
   d4a3a:	3b15      	subs	r3, #21
   d4a3c:	2b01      	cmp	r3, #1
   d4a3e:	d818      	bhi.n	d4a72 <_ZN3DHT12readHumidityEv+0x4a>
			case DHT11:
				f = data[0];
				return f;
			case DHT22:
			case DHT21:
				f = data[0];
   d4a40:	7823      	ldrb	r3, [r4, #0]
				f *= 256;
				f += data[1];
   d4a42:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4a78 <_ZN3DHT12readHumidityEv+0x50>
			case DHT11:
				f = data[0];
				return f;
			case DHT22:
			case DHT21:
				f = data[0];
   d4a46:	ee07 3a10 	vmov	s14, r3
				f *= 256;
				f += data[1];
   d4a4a:	7863      	ldrb	r3, [r4, #1]
   d4a4c:	ee07 3a90 	vmov	s15, r3
			case DHT11:
				f = data[0];
				return f;
			case DHT22:
			case DHT21:
				f = data[0];
   d4a50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f *= 256;
				f += data[1];
   d4a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4a58:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4a5c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4a60:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4a64:	bd10      	pop	{r4, pc}
	float f;

	if (read()) {
		switch (_type) {
			case DHT11:
				f = data[0];
   d4a66:	7823      	ldrb	r3, [r4, #0]
   d4a68:	ee00 3a10 	vmov	s0, r3
   d4a6c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d4a70:	bd10      	pop	{r4, pc}
				f += data[1];
				f /= 10;
				return f;
		}
	}
	return NAN;
   d4a72:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4a7c <_ZN3DHT12readHumidityEv+0x54>
}
   d4a76:	bd10      	pop	{r4, pc}
   d4a78:	43800000 	.word	0x43800000
   d4a7c:	7fc00000 	.word	0x7fc00000

000d4a80 <_ZN3DHT11getHumidityEv>:
	}
	return NAN;
}

float DHT::getHumidity() {
	return readHumidity();
   d4a80:	f7ff bfd2 	b.w	d4a28 <_ZN3DHT12readHumidityEv>

000d4a84 <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
   d4a84:	f001 ba28 	b.w	d5ed8 <HAL_Pin_Map>

000d4a88 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a8c:	b085      	sub	sp, #20
   d4a8e:	461e      	mov	r6, r3
   d4a90:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d4a94:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4a98:	4615      	mov	r5, r2
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4a9a:	1a9a      	subs	r2, r3, r2
   d4a9c:	2a00      	cmp	r2, #0
   d4a9e:	bfb8      	it	lt
   d4aa0:	4252      	neglt	r2, r2
   d4aa2:	9200      	str	r2, [sp, #0]
   d4aa4:	1a72      	subs	r2, r6, r1
   d4aa6:	2a00      	cmp	r2, #0
   d4aa8:	bfb8      	it	lt
   d4aaa:	4252      	neglt	r2, r2
   d4aac:	9201      	str	r2, [sp, #4]
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4aae:	460c      	mov	r4, r1
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
   d4ab0:	9a00      	ldr	r2, [sp, #0]
   d4ab2:	9901      	ldr	r1, [sp, #4]
   d4ab4:	428a      	cmp	r2, r1
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4ab6:	4681      	mov	r9, r0
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
   d4ab8:	dd05      	ble.n	d4ac6 <_ZN12Adafruit_GFX9writeLineEsssst+0x3e>
   d4aba:	4632      	mov	r2, r6
        _swap_int16_t(x0, y0);
        _swap_int16_t(x1, y1);
   d4abc:	461e      	mov	r6, r3
   d4abe:	4613      	mov	r3, r2
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
   d4ac0:	4622      	mov	r2, r4
        _swap_int16_t(x0, y0);
   d4ac2:	462c      	mov	r4, r5
   d4ac4:	4615      	mov	r5, r2
        _swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
   d4ac6:	42b4      	cmp	r4, r6
   d4ac8:	dd05      	ble.n	d4ad6 <_ZN12Adafruit_GFX9writeLineEsssst+0x4e>
   d4aca:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4acc:	461d      	mov	r5, r3
   d4ace:	4613      	mov	r3, r2
    if (steep) {
        _swap_int16_t(x0, y0);
        _swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
   d4ad0:	4622      	mov	r2, r4
   d4ad2:	4634      	mov	r4, r6
   d4ad4:	4616      	mov	r6, r2
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);
   d4ad6:	1b5a      	subs	r2, r3, r5
   d4ad8:	2a00      	cmp	r2, #0
   d4ada:	bfb8      	it	lt
   d4adc:	4252      	neglt	r2, r2
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4ade:	ebc4 0806 	rsb	r8, r4, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4ae2:	429d      	cmp	r5, r3
   d4ae4:	bfb4      	ite	lt
   d4ae6:	2301      	movlt	r3, #1
   d4ae8:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4aec:	fa1f f888 	uxth.w	r8, r8
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4af0:	9302      	str	r3, [sp, #8]
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);
   d4af2:	9203      	str	r2, [sp, #12]

    int16_t err = dx / 2;
   d4af4:	fa0f f788 	sxth.w	r7, r8
   d4af8:	2202      	movs	r2, #2
   d4afa:	fb97 f7f2 	sdiv	r7, r7, r2
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
   d4afe:	42b4      	cmp	r4, r6
   d4b00:	dc1f      	bgt.n	d4b42 <_ZN12Adafruit_GFX9writeLineEsssst+0xba>
        if (steep) {
   d4b02:	9a01      	ldr	r2, [sp, #4]
   d4b04:	9b00      	ldr	r3, [sp, #0]
   d4b06:	4293      	cmp	r3, r2
   d4b08:	f8d9 3000 	ldr.w	r3, [r9]
            writePixel(y0, x0, color);
   d4b0c:	bfc8      	it	gt
   d4b0e:	4622      	movgt	r2, r4
   d4b10:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d4b14:	bfc8      	it	gt
   d4b16:	4629      	movgt	r1, r5
   d4b18:	4653      	mov	r3, sl
        } else {
            writePixel(x0, y0, color);
   d4b1a:	bfdc      	itt	le
   d4b1c:	462a      	movle	r2, r5
   d4b1e:	4621      	movle	r1, r4
   d4b20:	4648      	mov	r0, r9
   d4b22:	47d8      	blx	fp
        }
        err -= dy;
   d4b24:	9b03      	ldr	r3, [sp, #12]
   d4b26:	1aff      	subs	r7, r7, r3
   d4b28:	b2bb      	uxth	r3, r7
   d4b2a:	b21f      	sxth	r7, r3
        if (err < 0) {
   d4b2c:	2f00      	cmp	r7, #0
   d4b2e:	da05      	bge.n	d4b3c <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
            y0 += ystep;
   d4b30:	9a02      	ldr	r2, [sp, #8]
            err += dx;
   d4b32:	eb08 0703 	add.w	r7, r8, r3
        } else {
            writePixel(x0, y0, color);
        }
        err -= dy;
        if (err < 0) {
            y0 += ystep;
   d4b36:	4415      	add	r5, r2
   d4b38:	b22d      	sxth	r5, r5
            err += dx;
   d4b3a:	b23f      	sxth	r7, r7
   d4b3c:	3401      	adds	r4, #1
   d4b3e:	b224      	sxth	r4, r4
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
   d4b40:	e7dd      	b.n	d4afe <_ZN12Adafruit_GFX9writeLineEsssst+0x76>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
   d4b42:	b005      	add	sp, #20
   d4b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4b48 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4b48:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4b4a:	6804      	ldr	r4, [r0, #0]
   d4b4c:	6924      	ldr	r4, [r4, #16]
   d4b4e:	46a4      	mov	ip, r4
}
   d4b50:	f85d 4b04 	ldr.w	r4, [sp], #4
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
    drawPixel(x, y, color);
   d4b54:	4760      	bx	ip

000d4b56 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4b56:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4b58:	6804      	ldr	r4, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4b5a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4b5e:	9502      	str	r5, [sp, #8]
   d4b60:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4b62:	46a4      	mov	ip, r4
}
   d4b64:	bc30      	pop	{r4, r5}
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4b66:	4760      	bx	ip

000d4b68 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4b68:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4b6a:	6804      	ldr	r4, [r0, #0]
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4b6c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4b70:	9502      	str	r5, [sp, #8]
   d4b72:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4b74:	46a4      	mov	ip, r4
}
   d4b76:	bc30      	pop	{r4, r5}
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4b78:	4760      	bx	ip

000d4b7a <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4b7a:	b470      	push	{r4, r5, r6}
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4b7c:	6804      	ldr	r4, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4b7e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4b82:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4b86:	9604      	str	r6, [sp, #16]
   d4b88:	9503      	str	r5, [sp, #12]
   d4b8a:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4b8c:	46a4      	mov	ip, r4
}
   d4b8e:	bc70      	pop	{r4, r5, r6}
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4b90:	4760      	bx	ip

000d4b92 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    End a display-writing routine, overwrite in subclasses if startWrite is defined!
*/
/**************************************************************************/
void Adafruit_GFX::endWrite(){
   d4b92:	4770      	bx	lr

000d4b94 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4b94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4b98:	461c      	mov	r4, r3
    startWrite();
   d4b9a:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4b9c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4ba0:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4ba2:	4605      	mov	r5, r0
   d4ba4:	4616      	mov	r6, r2
    startWrite();
    writeLine(x, y, x, y+h-1, color);
   d4ba6:	3c01      	subs	r4, #1
   d4ba8:	4434      	add	r4, r6
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4baa:	460f      	mov	r7, r1
    startWrite();
    writeLine(x, y, x, y+h-1, color);
   d4bac:	b224      	sxth	r4, r4
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    startWrite();
   d4bae:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4bb0:	682b      	ldr	r3, [r5, #0]
   d4bb2:	f8cd 8004 	str.w	r8, [sp, #4]
   d4bb6:	9400      	str	r4, [sp, #0]
   d4bb8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4bba:	4628      	mov	r0, r5
   d4bbc:	463b      	mov	r3, r7
   d4bbe:	4632      	mov	r2, r6
   d4bc0:	4639      	mov	r1, r7
   d4bc2:	47a0      	blx	r4
    endWrite();
   d4bc4:	682b      	ldr	r3, [r5, #0]
   d4bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4bc8:	4628      	mov	r0, r5
}
   d4bca:	b002      	add	sp, #8
   d4bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    startWrite();
    writeLine(x, y, x, y+h-1, color);
    endWrite();
   d4bd0:	4718      	bx	r3

000d4bd2 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4bd2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4bd6:	461d      	mov	r5, r3
    startWrite();
   d4bd8:	6803      	ldr	r3, [r0, #0]
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4bda:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4bde:	695b      	ldr	r3, [r3, #20]
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4be0:	4604      	mov	r4, r0
   d4be2:	4617      	mov	r7, r2
   d4be4:	460e      	mov	r6, r1
    startWrite();
   d4be6:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4be8:	e88d 0180 	stmia.w	sp, {r7, r8}
   d4bec:	6822      	ldr	r2, [r4, #0]
   d4bee:	1e6b      	subs	r3, r5, #1
   d4bf0:	4433      	add	r3, r6
   d4bf2:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4bf4:	4620      	mov	r0, r4
   d4bf6:	b21b      	sxth	r3, r3
   d4bf8:	463a      	mov	r2, r7
   d4bfa:	4631      	mov	r1, r6
   d4bfc:	47a8      	blx	r5
    endWrite();
   d4bfe:	6823      	ldr	r3, [r4, #0]
   d4c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c02:	4620      	mov	r0, r4
}
   d4c04:	b002      	add	sp, #8
   d4c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    startWrite();
    writeLine(x, y, x+w-1, y, color);
    endWrite();
   d4c0a:	4718      	bx	r3

000d4c0c <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4c0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4c10:	461e      	mov	r6, r3
    startWrite();
   d4c12:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4c14:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
    startWrite();
   d4c18:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4c1a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4c1e:	460c      	mov	r4, r1
   d4c20:	4605      	mov	r5, r0
   d4c22:	4617      	mov	r7, r2
    startWrite();
   d4c24:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d4c26:	4426      	add	r6, r4
   d4c28:	42b4      	cmp	r4, r6
   d4c2a:	682a      	ldr	r2, [r5, #0]
   d4c2c:	da0b      	bge.n	d4c46 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d4c2e:	f8cd 9000 	str.w	r9, [sp]
   d4c32:	f8d2 a020 	ldr.w	sl, [r2, #32]
   d4c36:	4621      	mov	r1, r4
   d4c38:	4643      	mov	r3, r8
   d4c3a:	463a      	mov	r2, r7
   d4c3c:	4628      	mov	r0, r5
   d4c3e:	3401      	adds	r4, #1
   d4c40:	47d0      	blx	sl
   d4c42:	b224      	sxth	r4, r4
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    startWrite();
    for (int16_t i=x; i<x+w; i++) {
   d4c44:	e7f0      	b.n	d4c28 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
        writeFastVLine(i, y, h, color);
    }
    endWrite();
   d4c46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d4c48:	4628      	mov	r0, r5
}
   d4c4a:	b002      	add	sp, #8
   d4c4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        uint16_t color) {
    startWrite();
    for (int16_t i=x; i<x+w; i++) {
        writeFastVLine(i, y, h, color);
    }
    endWrite();
   d4c50:	4718      	bx	r3

000d4c52 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d4c52:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4c54:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4c58:	6804      	ldr	r4, [r0, #0]
   d4c5a:	9101      	str	r1, [sp, #4]
   d4c5c:	9200      	str	r2, [sp, #0]
   d4c5e:	2200      	movs	r2, #0
   d4c60:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4c64:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4c66:	4611      	mov	r1, r2
   d4c68:	47a0      	blx	r4
}
   d4c6a:	b002      	add	sp, #8
   d4c6c:	bd10      	pop	{r4, pc}

000d4c6e <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4c6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   d4c72:	4299      	cmp	r1, r3
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4c74:	4690      	mov	r8, r2
   d4c76:	4607      	mov	r7, r0
   d4c78:	460e      	mov	r6, r1
   d4c7a:	461c      	mov	r4, r3
   d4c7c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
   d4c80:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4c84:	6802      	ldr	r2, [r0, #0]
    // Update in subclasses if desired!
    if(x0 == x1){
   d4c86:	d10b      	bne.n	d4ca0 <_ZN12Adafruit_GFX8drawLineEsssst+0x32>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4c88:	45a8      	cmp	r8, r5
   d4c8a:	bfc2      	ittt	gt
   d4c8c:	4643      	movgt	r3, r8
   d4c8e:	46a8      	movgt	r8, r5
   d4c90:	461d      	movgt	r5, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4c92:	1c6b      	adds	r3, r5, #1
   d4c94:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d4c98:	ebc8 0303 	rsb	r3, r8, r3
   d4c9c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d4c9e:	e00c      	b.n	d4cba <_ZN12Adafruit_GFX8drawLineEsssst+0x4c>
    } else if(y0 == y1){
   d4ca0:	45a8      	cmp	r8, r5
   d4ca2:	d113      	bne.n	d4ccc <_ZN12Adafruit_GFX8drawLineEsssst+0x5e>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d4ca4:	4299      	cmp	r1, r3
   d4ca6:	bfc4      	itt	gt
   d4ca8:	460b      	movgt	r3, r1
   d4caa:	4626      	movgt	r6, r4
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4cac:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    // Update in subclasses if desired!
    if(x0 == x1){
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
   d4cb0:	bfc8      	it	gt
   d4cb2:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4cb4:	1c63      	adds	r3, r4, #1
   d4cb6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4cb8:	1b9b      	subs	r3, r3, r6
   d4cba:	b21b      	sxth	r3, r3
   d4cbc:	4642      	mov	r2, r8
   d4cbe:	4631      	mov	r1, r6
   d4cc0:	4638      	mov	r0, r7
   d4cc2:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   d4cc4:	b003      	add	sp, #12
   d4cc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4cca:	4760      	bx	ip
    } else {
        startWrite();
   d4ccc:	6953      	ldr	r3, [r2, #20]
   d4cce:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d4cd0:	683b      	ldr	r3, [r7, #0]
   d4cd2:	e88d 0220 	stmia.w	sp, {r5, r9}
   d4cd6:	4638      	mov	r0, r7
   d4cd8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   d4cda:	4642      	mov	r2, r8
   d4cdc:	4623      	mov	r3, r4
   d4cde:	4631      	mov	r1, r6
   d4ce0:	47a8      	blx	r5
        endWrite();
   d4ce2:	683b      	ldr	r3, [r7, #0]
   d4ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ce6:	4638      	mov	r0, r7
    }
}
   d4ce8:	b003      	add	sp, #12
   d4cea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
   d4cee:	4718      	bx	r3

000d4cf0 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4cf0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4cf4:	461e      	mov	r6, r3
    startWrite();
   d4cf6:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4cf8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d4cfc:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4cfe:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4d02:	4604      	mov	r4, r0
   d4d04:	460d      	mov	r5, r1
   d4d06:	4617      	mov	r7, r2
    startWrite();
   d4d08:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4d0a:	6823      	ldr	r3, [r4, #0]
   d4d0c:	f8cd 8000 	str.w	r8, [sp]
   d4d10:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4d14:	463a      	mov	r2, r7
   d4d16:	4633      	mov	r3, r6
   d4d18:	4629      	mov	r1, r5
   d4d1a:	4620      	mov	r0, r4
   d4d1c:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d4d1e:	6823      	ldr	r3, [r4, #0]
   d4d20:	f8cd 8000 	str.w	r8, [sp]
   d4d24:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   d4d28:	443a      	add	r2, r7
   d4d2a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4d2e:	4629      	mov	r1, r5
   d4d30:	4633      	mov	r3, r6
   d4d32:	4620      	mov	r0, r4
   d4d34:	b212      	sxth	r2, r2
   d4d36:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d4d38:	6823      	ldr	r3, [r4, #0]
   d4d3a:	f8cd 8000 	str.w	r8, [sp]
   d4d3e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4d42:	463a      	mov	r2, r7
   d4d44:	464b      	mov	r3, r9
   d4d46:	4629      	mov	r1, r5
   d4d48:	4620      	mov	r0, r4
   d4d4a:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d4d4c:	6823      	ldr	r3, [r4, #0]
   d4d4e:	f8cd 8000 	str.w	r8, [sp]
   d4d52:	1e71      	subs	r1, r6, #1
   d4d54:	4429      	add	r1, r5
   d4d56:	4620      	mov	r0, r4
   d4d58:	6a1d      	ldr	r5, [r3, #32]
   d4d5a:	463a      	mov	r2, r7
   d4d5c:	464b      	mov	r3, r9
   d4d5e:	b209      	sxth	r1, r1
   d4d60:	47a8      	blx	r5
    endWrite();
   d4d62:	6823      	ldr	r3, [r4, #0]
   d4d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d66:	4620      	mov	r0, r4
}
   d4d68:	b002      	add	sp, #8
   d4d6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    startWrite();
    writeFastHLine(x, y, w, color);
    writeFastHLine(x, y+h-1, w, color);
    writeFastVLine(x, y, h, color);
    writeFastVLine(x+w-1, y, h, color);
    endWrite();
   d4d6e:	4718      	bx	r3

000d4d70 <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
   d4d70:	4770      	bx	lr

000d4d72 <_ZN12Adafruit_GFX11setRotationEh>:
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    rotation = (x & 3);
   d4d72:	f001 0103 	and.w	r1, r1, #3
    switch(rotation) {
   d4d76:	2901      	cmp	r1, #1
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    rotation = (x & 3);
   d4d78:	7641      	strb	r1, [r0, #25]
   d4d7a:	8903      	ldrh	r3, [r0, #8]
   d4d7c:	8942      	ldrh	r2, [r0, #10]
    switch(rotation) {
   d4d7e:	d004      	beq.n	d4d8a <_ZN12Adafruit_GFX11setRotationEh+0x18>
   d4d80:	2903      	cmp	r1, #3
   d4d82:	d002      	beq.n	d4d8a <_ZN12Adafruit_GFX11setRotationEh+0x18>
        case 0:
        case 2:
            _width  = WIDTH;
   d4d84:	8183      	strh	r3, [r0, #12]
            _height = HEIGHT;
   d4d86:	81c2      	strh	r2, [r0, #14]
   d4d88:	4770      	bx	lr
            break;
        case 1:
        case 3:
            _width  = HEIGHT;
   d4d8a:	8182      	strh	r2, [r0, #12]
            _height = WIDTH;
   d4d8c:	81c3      	strh	r3, [r0, #14]
   d4d8e:	4770      	bx	lr

000d4d90 <_ZN12Adafruit_GFXC1Ess>:
   @brief    Instatiate a GFX context for graphics! Can only be done by a superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4d90:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d4d92:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4d94:	2400      	movs	r4, #0
   d4d96:	4d09      	ldr	r5, [pc, #36]	; (d4dbc <_ZN12Adafruit_GFXC1Ess+0x2c>)
   d4d98:	8142      	strh	r2, [r0, #10]
{
    _width    = WIDTH;
   d4d9a:	8181      	strh	r1, [r0, #12]
    _height   = HEIGHT;
   d4d9c:	81c2      	strh	r2, [r0, #14]
    rotation  = 0;
    cursor_y  = cursor_x    = 0;
    textsize  = 1;
    textcolor = textbgcolor = 0xFFFF;
   d4d9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    _width    = WIDTH;
    _height   = HEIGHT;
    rotation  = 0;
    cursor_y  = cursor_x    = 0;
    textsize  = 1;
   d4da2:	2201      	movs	r2, #1
   d4da4:	6044      	str	r4, [r0, #4]
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
WIDTH(w), HEIGHT(h)
   d4da6:	6005      	str	r5, [r0, #0]
{
    _width    = WIDTH;
    _height   = HEIGHT;
    rotation  = 0;
   d4da8:	7644      	strb	r4, [r0, #25]
    cursor_y  = cursor_x    = 0;
   d4daa:	8204      	strh	r4, [r0, #16]
   d4dac:	8244      	strh	r4, [r0, #18]
    textsize  = 1;
   d4dae:	7602      	strb	r2, [r0, #24]
    textcolor = textbgcolor = 0xFFFF;
   d4db0:	82c1      	strh	r1, [r0, #22]
   d4db2:	8281      	strh	r1, [r0, #20]
    wrap      = true;
   d4db4:	7682      	strb	r2, [r0, #26]
    _cp437    = false;
   d4db6:	76c4      	strb	r4, [r0, #27]
    gfxFont   = NULL;
   d4db8:	61c4      	str	r4, [r0, #28]
}
   d4dba:	bd30      	pop	{r4, r5, pc}
   d4dbc:	000da248 	.word	0x000da248

000d4dc0 <_ZN12Adafruit_GFX8drawCharEsshtth>:
    @param    bg 16-bit 5-6-5 Color to fill background with (if same as color, no background)
    @param    size  Font magnification level, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
   d4dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4dc4:	b091      	sub	sp, #68	; 0x44
   d4dc6:	4691      	mov	r9, r2

    if(!gfxFont) { // 'Classic' built-in font
   d4dc8:	69c2      	ldr	r2, [r0, #28]
    @param    bg 16-bit 5-6-5 Color to fill background with (if same as color, no background)
    @param    size  Font magnification level, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
   d4dca:	9105      	str	r1, [sp, #20]
   d4dcc:	461e      	mov	r6, r3
   d4dce:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
   d4dd2:	9302      	str	r3, [sp, #8]
   d4dd4:	4604      	mov	r4, r0
   d4dd6:	f8bd a06c 	ldrh.w	sl, [sp, #108]	; 0x6c
   d4dda:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70

    if(!gfxFont) { // 'Classic' built-in font
   d4dde:	2a00      	cmp	r2, #0
   d4de0:	f040 80b7 	bne.w	d4f52 <_ZN12Adafruit_GFX8drawCharEsshtth+0x192>

        if((x >= _width)            || // Clip right
   d4de4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4de8:	428b      	cmp	r3, r1
   d4dea:	f340 8145 	ble.w	d5078 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b8>
   d4dee:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d4df2:	454b      	cmp	r3, r9
   d4df4:	f340 8140 	ble.w	d5078 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b8>
           (y >= _height)           || // Clip bottom
           ((x + 6 * size - 1) < 0) || // Clip left
   d4df8:	2306      	movs	r3, #6
  uint16_t color, uint16_t bg, uint8_t size) {

    if(!gfxFont) { // 'Classic' built-in font

        if((x >= _width)            || // Clip right
           (y >= _height)           || // Clip bottom
   d4dfa:	fb13 1305 	smlabb	r3, r3, r5, r1
   d4dfe:	2b00      	cmp	r3, #0
   d4e00:	f340 813a 	ble.w	d5078 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b8>
           ((x + 6 * size - 1) < 0) || // Clip left
   d4e04:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   d4e08:	2b00      	cmp	r3, #0
   d4e0a:	f340 8135 	ble.w	d5078 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b8>
           ((y + 8 * size - 1) < 0))   // Clip top
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d4e0e:	7ec3      	ldrb	r3, [r0, #27]
   d4e10:	b91b      	cbnz	r3, d4e1a <_ZN12Adafruit_GFX8drawCharEsshtth+0x5a>
   d4e12:	2eaf      	cmp	r6, #175	; 0xaf
   d4e14:	bf84      	itt	hi
   d4e16:	3601      	addhi	r6, #1
   d4e18:	b2f6      	uxtbhi	r6, r6

        startWrite();
   d4e1a:	6823      	ldr	r3, [r4, #0]
   d4e1c:	4620      	mov	r0, r4
   d4e1e:	695b      	ldr	r3, [r3, #20]
   d4e20:	4798      	blx	r3
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4e22:	2305      	movs	r3, #5
   d4e24:	930c      	str	r3, [sp, #48]	; 0x30
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4e26:	2300      	movs	r3, #0
   d4e28:	9303      	str	r3, [sp, #12]
   d4e2a:	fa1f f389 	uxth.w	r3, r9
   d4e2e:	9307      	str	r3, [sp, #28]
   d4e30:	3308      	adds	r3, #8
   d4e32:	b29b      	uxth	r3, r3
   d4e34:	930e      	str	r3, [sp, #56]	; 0x38
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4e36:	2305      	movs	r3, #5
   d4e38:	461a      	mov	r2, r3
   d4e3a:	9b03      	ldr	r3, [sp, #12]
   d4e3c:	f8dd 801c 	ldr.w	r8, [sp, #28]
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d4e40:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4e44:	fb12 3306 	smlabb	r3, r2, r6, r3
   d4e48:	4a8d      	ldr	r2, [pc, #564]	; (d5080 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2c0>)
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d4e4a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4e4e:	5cd3      	ldrb	r3, [r2, r3]
   d4e50:	9308      	str	r3, [sp, #32]
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d4e52:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4e56:	9304      	str	r3, [sp, #16]
   d4e58:	9a04      	ldr	r2, [sp, #16]
   d4e5a:	9b03      	ldr	r3, [sp, #12]
   d4e5c:	b2af      	uxth	r7, r5
   d4e5e:	fb03 2307 	mla	r3, r3, r7, r2
   d4e62:	b21b      	sxth	r3, r3
   d4e64:	930b      	str	r3, [sp, #44]	; 0x2c
                } else if(bg != color) {
                    if(size == 1)
                        writePixel(x+i, y+j, bg);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d4e66:	b22b      	sxth	r3, r5
   d4e68:	9306      	str	r3, [sp, #24]
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
                } else if(bg != color) {
                    if(size == 1)
                        writePixel(x+i, y+j, bg);
   d4e6a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   d4e6e:	9b04      	ldr	r3, [sp, #16]
   d4e70:	fa13 f382 	uxtah	r3, r3, r2
   d4e74:	b21b      	sxth	r3, r3
   d4e76:	930d      	str	r3, [sp, #52]	; 0x34

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
   d4e78:	9b08      	ldr	r3, [sp, #32]
   d4e7a:	07d9      	lsls	r1, r3, #31
   d4e7c:	d510      	bpl.n	d4ea0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe0>
                    if(size == 1)
   d4e7e:	2d01      	cmp	r5, #1
   d4e80:	6823      	ldr	r3, [r4, #0]
   d4e82:	d103      	bne.n	d4e8c <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
                        writePixel(x+i, y+j, color);
   d4e84:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d4e88:	9b02      	ldr	r3, [sp, #8]
   d4e8a:	e012      	b.n	d4eb2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d4e8c:	9a02      	ldr	r2, [sp, #8]
   d4e8e:	9201      	str	r2, [sp, #4]
   d4e90:	9a06      	ldr	r2, [sp, #24]
   d4e92:	9200      	str	r2, [sp, #0]
   d4e94:	f8d3 b01c 	ldr.w	fp, [r3, #28]
   d4e98:	4613      	mov	r3, r2
   d4e9a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   d4e9e:	e017      	b.n	d4ed0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x110>
                } else if(bg != color) {
   d4ea0:	9b02      	ldr	r3, [sp, #8]
   d4ea2:	4553      	cmp	r3, sl
   d4ea4:	d017      	beq.n	d4ed6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x116>
                    if(size == 1)
   d4ea6:	2d01      	cmp	r5, #1
   d4ea8:	6823      	ldr	r3, [r4, #0]
   d4eaa:	d108      	bne.n	d4ebe <_ZN12Adafruit_GFX8drawCharEsshtth+0xfe>
                        writePixel(x+i, y+j, bg);
   d4eac:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d4eb0:	4653      	mov	r3, sl
   d4eb2:	fa0f f288 	sxth.w	r2, r8
   d4eb6:	990d      	ldr	r1, [sp, #52]	; 0x34
   d4eb8:	4620      	mov	r0, r4
   d4eba:	47d8      	blx	fp
   d4ebc:	e00b      	b.n	d4ed6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x116>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d4ebe:	9a06      	ldr	r2, [sp, #24]
   d4ec0:	9200      	str	r2, [sp, #0]
   d4ec2:	f8cd a004 	str.w	sl, [sp, #4]
   d4ec6:	f8d3 b01c 	ldr.w	fp, [r3, #28]
   d4eca:	4613      	mov	r3, r2
   d4ecc:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
   d4ed0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4ed2:	4620      	mov	r0, r4
   d4ed4:	47d8      	blx	fp
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4ed6:	9b08      	ldr	r3, [sp, #32]
   d4ed8:	085b      	lsrs	r3, r3, #1
   d4eda:	9308      	str	r3, [sp, #32]
   d4edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4ede:	443b      	add	r3, r7
   d4ee0:	b29b      	uxth	r3, r3
   d4ee2:	930a      	str	r3, [sp, #40]	; 0x28
   d4ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4ee6:	443b      	add	r3, r7
   d4ee8:	b29b      	uxth	r3, r3
   d4eea:	9309      	str	r3, [sp, #36]	; 0x24
   d4eec:	f108 0801 	add.w	r8, r8, #1
   d4ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d4ef2:	fa1f f888 	uxth.w	r8, r8
   d4ef6:	4543      	cmp	r3, r8
   d4ef8:	d1be      	bne.n	d4e78 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4efa:	9b03      	ldr	r3, [sp, #12]
   d4efc:	3301      	adds	r3, #1
   d4efe:	b25b      	sxtb	r3, r3
   d4f00:	9303      	str	r3, [sp, #12]
   d4f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4f04:	3b01      	subs	r3, #1
   d4f06:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4f0a:	930c      	str	r3, [sp, #48]	; 0x30
   d4f0c:	d193      	bne.n	d4e36 <_ZN12Adafruit_GFX8drawCharEsshtth+0x76>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
                }
            }
        }
        if(bg != color) { // If opaque, draw vertical line for last column
   d4f0e:	9b02      	ldr	r3, [sp, #8]
   d4f10:	4553      	cmp	r3, sl
   d4f12:	f000 80aa 	beq.w	d506a <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
   d4f16:	2d01      	cmp	r5, #1
   d4f18:	6823      	ldr	r3, [r4, #0]
   d4f1a:	d10a      	bne.n	d4f32 <_ZN12Adafruit_GFX8drawCharEsshtth+0x172>
   d4f1c:	9904      	ldr	r1, [sp, #16]
   d4f1e:	f8cd a000 	str.w	sl, [sp]
   d4f22:	3105      	adds	r1, #5
   d4f24:	6a1d      	ldr	r5, [r3, #32]
   d4f26:	464a      	mov	r2, r9
   d4f28:	2308      	movs	r3, #8
   d4f2a:	b209      	sxth	r1, r1
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	47a8      	blx	r5
   d4f30:	e09b      	b.n	d506a <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
   d4f32:	9a04      	ldr	r2, [sp, #16]
   d4f34:	f8cd a004 	str.w	sl, [sp, #4]
   d4f38:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   d4f3c:	440a      	add	r2, r1
   d4f3e:	00ff      	lsls	r7, r7, #3
   d4f40:	4611      	mov	r1, r2
   d4f42:	9700      	str	r7, [sp, #0]
   d4f44:	69de      	ldr	r6, [r3, #28]
   d4f46:	464a      	mov	r2, r9
   d4f48:	462b      	mov	r3, r5
   d4f4a:	b209      	sxth	r1, r1
   d4f4c:	4620      	mov	r0, r4
   d4f4e:	47b0      	blx	r6
   d4f50:	e08b      	b.n	d506a <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d4f52:	7a13      	ldrb	r3, [r2, #8]
   d4f54:	1af6      	subs	r6, r6, r3
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
   d4f56:	6853      	ldr	r3, [r2, #4]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d4f58:	b2f6      	uxtb	r6, r6
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
   d4f5a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
   d4f5e:	6813      	ldr	r3, [r2, #0]
   d4f60:	930b      	str	r3, [sp, #44]	; 0x2c

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d4f62:	78b3      	ldrb	r3, [r6, #2]
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
   d4f64:	f996 a006 	ldrsb.w	sl, [r6, #6]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d4f68:	9307      	str	r3, [sp, #28]
                 h  = pgm_read_byte(&glyph->height);
   d4f6a:	78f3      	ldrb	r3, [r6, #3]
   d4f6c:	930c      	str	r3, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
   d4f6e:	2d01      	cmp	r5, #1
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d4f70:	f996 3005 	ldrsb.w	r3, [r6, #5]
   d4f74:	9308      	str	r3, [sp, #32]
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;
   d4f76:	bf94      	ite	ls
   d4f78:	2300      	movls	r3, #0

        if(size > 1) {
            xo16 = xo;
            yo16 = yo;
   d4f7a:	fa0f f38a 	sxthhi.w	r3, sl

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d4f7e:	f8b6 b000 	ldrh.w	fp, [r6]
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
            xo16 = xo;
            yo16 = yo;
   d4f82:	bf8e      	itee	hi
   d4f84:	9304      	strhi	r3, [sp, #16]
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;
   d4f86:	461e      	movls	r6, r3
   d4f88:	9304      	strls	r3, [sp, #16]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
   d4f8a:	6803      	ldr	r3, [r0, #0]
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
            xo16 = xo;
   d4f8c:	bf88      	it	hi
   d4f8e:	f9bd 6020 	ldrshhi.w	r6, [sp, #32]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
   d4f92:	695b      	ldr	r3, [r3, #20]
   d4f94:	4798      	blx	r3
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d4f96:	b2ab      	uxth	r3, r5
   d4f98:	9306      	str	r3, [sp, #24]
   d4f9a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4f9e:	9305      	str	r3, [sp, #20]
   d4fa0:	9a05      	ldr	r2, [sp, #20]
   d4fa2:	9b06      	ldr	r3, [sp, #24]
   d4fa4:	fb06 2603 	mla	r6, r6, r3, r2
   d4fa8:	b2b3      	uxth	r3, r6
   d4faa:	930a      	str	r3, [sp, #40]	; 0x28
   d4fac:	fa1f f389 	uxth.w	r3, r9
   d4fb0:	2600      	movs	r6, #0
   d4fb2:	9309      	str	r3, [sp, #36]	; 0x24
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4fb4:	4453      	add	r3, sl
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4fb6:	46b0      	mov	r8, r6
   d4fb8:	9603      	str	r6, [sp, #12]
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4fba:	930f      	str	r3, [sp, #60]	; 0x3c
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
   d4fbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4fbe:	b2f2      	uxtb	r2, r6
   d4fc0:	429a      	cmp	r2, r3
   d4fc2:	d252      	bcs.n	d506a <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d4fc4:	9b04      	ldr	r3, [sp, #16]
   d4fc6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   d4fca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   d4fce:	18f3      	adds	r3, r6, r3
   d4fd0:	fb13 f301 	smulbb	r3, r3, r1
   d4fd4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4fd6:	440b      	add	r3, r1
   d4fd8:	b21b      	sxth	r3, r3
   d4fda:	930d      	str	r3, [sp, #52]	; 0x34
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4fde:	441a      	add	r2, r3
   d4fe0:	b213      	sxth	r3, r2
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d4fe2:	f04f 0a00 	mov.w	sl, #0
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4fe6:	930e      	str	r3, [sp, #56]	; 0x38
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
   d4fe8:	9907      	ldr	r1, [sp, #28]
   d4fea:	fa5f f28a 	uxtb.w	r2, sl
   d4fee:	eb08 0302 	add.w	r3, r8, r2
   d4ff2:	4291      	cmp	r1, r2
   d4ff4:	b2db      	uxtb	r3, r3
   d4ff6:	d932      	bls.n	d505e <_ZN12Adafruit_GFX8drawCharEsshtth+0x29e>
                if(!(bit++ & 7)) {
   d4ff8:	075a      	lsls	r2, r3, #29
   d4ffa:	d107      	bne.n	d500c <_ZN12Adafruit_GFX8drawCharEsshtth+0x24c>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d4ffc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d4ffe:	f10b 0301 	add.w	r3, fp, #1
   d5002:	f812 200b 	ldrb.w	r2, [r2, fp]
   d5006:	9203      	str	r2, [sp, #12]
   d5008:	fa1f fb83 	uxth.w	fp, r3
                }
                if(bits & 0x80) {
   d500c:	9b03      	ldr	r3, [sp, #12]
   d500e:	061b      	lsls	r3, r3, #24
   d5010:	d51a      	bpl.n	d5048 <_ZN12Adafruit_GFX8drawCharEsshtth+0x288>
                    if(size == 1) {
   d5012:	2d01      	cmp	r5, #1
   d5014:	d10c      	bne.n	d5030 <_ZN12Adafruit_GFX8drawCharEsshtth+0x270>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5016:	9b05      	ldr	r3, [sp, #20]
   d5018:	9a08      	ldr	r2, [sp, #32]
   d501a:	1899      	adds	r1, r3, r2
   d501c:	6823      	ldr	r3, [r4, #0]
   d501e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d5020:	699b      	ldr	r3, [r3, #24]
   d5022:	4451      	add	r1, sl
   d5024:	461f      	mov	r7, r3
   d5026:	b209      	sxth	r1, r1
   d5028:	9b02      	ldr	r3, [sp, #8]
   d502a:	4620      	mov	r0, r4
   d502c:	47b8      	blx	r7
   d502e:	e00b      	b.n	d5048 <_ZN12Adafruit_GFX8drawCharEsshtth+0x288>
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
                          size, size, color);
   d5030:	9902      	ldr	r1, [sp, #8]
   d5032:	6822      	ldr	r2, [r4, #0]
   d5034:	9101      	str	r1, [sp, #4]
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d5036:	b22b      	sxth	r3, r5
                          size, size, color);
   d5038:	9300      	str	r3, [sp, #0]
   d503a:	69d2      	ldr	r2, [r2, #28]
   d503c:	fa0f f189 	sxth.w	r1, r9
   d5040:	4617      	mov	r7, r2
   d5042:	4620      	mov	r0, r4
   d5044:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d5046:	47b8      	blx	r7
                    }
                }
                bits <<= 1;
   d5048:	9b03      	ldr	r3, [sp, #12]
   d504a:	005f      	lsls	r7, r3, #1
   d504c:	b2fb      	uxtb	r3, r7
   d504e:	9303      	str	r3, [sp, #12]
   d5050:	9b06      	ldr	r3, [sp, #24]
   d5052:	4499      	add	r9, r3
   d5054:	f10a 0a01 	add.w	sl, sl, #1
   d5058:	fa1f f989 	uxth.w	r9, r9
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
   d505c:	e7c4      	b.n	d4fe8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x228>
   d505e:	9b07      	ldr	r3, [sp, #28]
   d5060:	4498      	add	r8, r3
   d5062:	fa5f f888 	uxtb.w	r8, r8
   d5066:	3601      	adds	r6, #1
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
   d5068:	e7a8      	b.n	d4fbc <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fc>
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();
   d506a:	6823      	ldr	r3, [r4, #0]
   d506c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d506e:	4620      	mov	r0, r4

    } // End classic vs custom font
}
   d5070:	b011      	add	sp, #68	; 0x44
   d5072:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();
   d5076:	4718      	bx	r3

    } // End classic vs custom font
}
   d5078:	b011      	add	sp, #68	; 0x44
   d507a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d507e:	bf00      	nop
   d5080:	000da298 	.word	0x000da298

000d5084 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
   d5084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d5086:	69c2      	ldr	r2, [r0, #28]
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
   d5088:	4604      	mov	r4, r0
   d508a:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d508c:	2a00      	cmp	r2, #0
   d508e:	d12d      	bne.n	d50ec <_ZN12Adafruit_GFX5writeEh+0x68>

        if(c == '\n') {                        // Newline?
   d5090:	290a      	cmp	r1, #10
   d5092:	d105      	bne.n	d50a0 <_ZN12Adafruit_GFX5writeEh+0x1c>
            cursor_x  = 0;                     // Reset x to zero,
   d5094:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize * 8;          // advance y one line
   d5096:	8a43      	ldrh	r3, [r0, #18]
   d5098:	7e02      	ldrb	r2, [r0, #24]
   d509a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d509e:	e02e      	b.n	d50fe <_ZN12Adafruit_GFX5writeEh+0x7a>
        } else if(c != '\r') {                 // Ignore carriage returns
   d50a0:	290d      	cmp	r1, #13
   d50a2:	d065      	beq.n	d5170 <_ZN12Adafruit_GFX5writeEh+0xec>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
   d50a4:	7e81      	ldrb	r1, [r0, #26]
   d50a6:	7e00      	ldrb	r0, [r0, #24]
   d50a8:	b169      	cbz	r1, d50c6 <_ZN12Adafruit_GFX5writeEh+0x42>
   d50aa:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
   d50ae:	2106      	movs	r1, #6
   d50b0:	fb11 5100 	smlabb	r1, r1, r0, r5
   d50b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   d50b8:	42a9      	cmp	r1, r5
                cursor_x  = 0;                 // Reset x to zero,
   d50ba:	bfc1      	itttt	gt
   d50bc:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize * 8;      // advance y one line
   d50be:	8a62      	ldrhgt	r2, [r4, #18]
   d50c0:	eb02 02c0 	addgt.w	r2, r2, r0, lsl #3
   d50c4:	8262      	strhgt	r2, [r4, #18]
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d50c6:	9002      	str	r0, [sp, #8]
   d50c8:	8ae0      	ldrh	r0, [r4, #22]
   d50ca:	9001      	str	r0, [sp, #4]
   d50cc:	8aa0      	ldrh	r0, [r4, #20]
   d50ce:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d50d2:	9000      	str	r0, [sp, #0]
   d50d4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d50d8:	4620      	mov	r0, r4
   d50da:	f7ff fe71 	bl	d4dc0 <_ZN12Adafruit_GFX8drawCharEsshtth>
            cursor_x += textsize * 6;          // Advance x one char
   d50de:	7e23      	ldrb	r3, [r4, #24]
   d50e0:	8a22      	ldrh	r2, [r4, #16]
   d50e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d50e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d50ea:	e040      	b.n	d516e <_ZN12Adafruit_GFX5writeEh+0xea>
        }

    } else { // Custom font

        if(c == '\n') {
   d50ec:	290a      	cmp	r1, #10
   d50ee:	d108      	bne.n	d5102 <_ZN12Adafruit_GFX5writeEh+0x7e>
            cursor_x  = 0;
   d50f0:	2300      	movs	r3, #0
   d50f2:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d50f4:	7e01      	ldrb	r1, [r0, #24]
   d50f6:	7a92      	ldrb	r2, [r2, #10]
   d50f8:	8a43      	ldrh	r3, [r0, #18]
   d50fa:	fb01 3302 	mla	r3, r1, r2, r3
   d50fe:	8263      	strh	r3, [r4, #18]
   d5100:	e036      	b.n	d5170 <_ZN12Adafruit_GFX5writeEh+0xec>
        } else if(c != '\r') {
   d5102:	290d      	cmp	r1, #13
   d5104:	d034      	beq.n	d5170 <_ZN12Adafruit_GFX5writeEh+0xec>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d5106:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d5108:	42a9      	cmp	r1, r5
   d510a:	d331      	bcc.n	d5170 <_ZN12Adafruit_GFX5writeEh+0xec>
   d510c:	7a51      	ldrb	r1, [r2, #9]
   d510e:	4299      	cmp	r1, r3
   d5110:	d32e      	bcc.n	d5170 <_ZN12Adafruit_GFX5writeEh+0xec>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
   d5112:	6851      	ldr	r1, [r2, #4]
   d5114:	1b5d      	subs	r5, r3, r5
   d5116:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d511a:	78a9      	ldrb	r1, [r5, #2]
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d511c:	b311      	cbz	r1, d5164 <_ZN12Adafruit_GFX5writeEh+0xe0>
   d511e:	78e8      	ldrb	r0, [r5, #3]
   d5120:	b300      	cbz	r0, d5164 <_ZN12Adafruit_GFX5writeEh+0xe0>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
   d5122:	7ea6      	ldrb	r6, [r4, #26]
   d5124:	7e20      	ldrb	r0, [r4, #24]
   d5126:	b18e      	cbz	r6, d514c <_ZN12Adafruit_GFX5writeEh+0xc8>
   d5128:	f995 6005 	ldrsb.w	r6, [r5, #5]
   d512c:	4431      	add	r1, r6
   d512e:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d5132:	fb00 6101 	mla	r1, r0, r1, r6
   d5136:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d513a:	42b1      	cmp	r1, r6
   d513c:	dd06      	ble.n	d514c <_ZN12Adafruit_GFX5writeEh+0xc8>
                        cursor_x  = 0;
   d513e:	2100      	movs	r1, #0
   d5140:	8221      	strh	r1, [r4, #16]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5142:	7a92      	ldrb	r2, [r2, #10]
   d5144:	8a61      	ldrh	r1, [r4, #18]
   d5146:	fb02 1200 	mla	r2, r2, r0, r1
   d514a:	8262      	strh	r2, [r4, #18]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d514c:	9002      	str	r0, [sp, #8]
   d514e:	8ae0      	ldrh	r0, [r4, #22]
   d5150:	9001      	str	r0, [sp, #4]
   d5152:	8aa0      	ldrh	r0, [r4, #20]
   d5154:	9000      	str	r0, [sp, #0]
   d5156:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d515a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d515e:	4620      	mov	r0, r4
   d5160:	f7ff fe2e 	bl	d4dc0 <_ZN12Adafruit_GFX8drawCharEsshtth>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
   d5164:	7929      	ldrb	r1, [r5, #4]
   d5166:	7e22      	ldrb	r2, [r4, #24]
   d5168:	8a23      	ldrh	r3, [r4, #16]
   d516a:	fb01 3302 	mla	r3, r1, r2, r3
   d516e:	8223      	strh	r3, [r4, #16]
            }
        }

    }
    return 1;
}
   d5170:	2001      	movs	r0, #1
   d5172:	b004      	add	sp, #16
   d5174:	bd70      	pop	{r4, r5, r6, pc}

000d5176 <_ZN12Adafruit_GFX9setCursorEss>:
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
*/
/**************************************************************************/
void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   d5176:	8201      	strh	r1, [r0, #16]
    cursor_y = y;
   d5178:	8242      	strh	r2, [r0, #18]
   d517a:	4770      	bx	lr

000d517c <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    textsize = (s > 0) ? s : 1;
   d517c:	2900      	cmp	r1, #0
   d517e:	bf08      	it	eq
   d5180:	2101      	moveq	r1, #1
   d5182:	7601      	strb	r1, [r0, #24]
   d5184:	4770      	bx	lr

000d5186 <_ZN12Adafruit_GFX12setTextColorEt>:
*/
/**************************************************************************/
void Adafruit_GFX::setTextColor(uint16_t c) {
    // For 'transparent' background, we'll set the bg
    // to the same as fg instead of using a flag
    textcolor = textbgcolor = c;
   d5186:	82c1      	strh	r1, [r0, #22]
   d5188:	8281      	strh	r1, [r0, #20]
   d518a:	4770      	bx	lr

000d518c <_ZNK12Adafruit_GFX11getRotationEv>:
    @returns    0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
uint8_t Adafruit_GFX::getRotation(void) const {
    return rotation;
}
   d518c:	7e40      	ldrb	r0, [r0, #25]
   d518e:	4770      	bx	lr

000d5190 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void Adafruit_GFX::setFont(const GFXfont *f) {
   d5190:	69c3      	ldr	r3, [r0, #28]
    if(f) {            // Font struct pointer passed in?
   d5192:	b119      	cbz	r1, d519c <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
        if(!gfxFont) { // And no current font struct?
   d5194:	b933      	cbnz	r3, d51a4 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x14>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
   d5196:	8a43      	ldrh	r3, [r0, #18]
   d5198:	3306      	adds	r3, #6
   d519a:	e002      	b.n	d51a2 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x12>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
   d519c:	b113      	cbz	r3, d51a4 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x14>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
   d519e:	8a43      	ldrh	r3, [r0, #18]
   d51a0:	3b06      	subs	r3, #6
   d51a2:	8243      	strh	r3, [r0, #18]
    }
    gfxFont = (GFXfont *)f;
   d51a4:	61c1      	str	r1, [r0, #28]
   d51a6:	4770      	bx	lr

000d51a8 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_>:
    @param    maxx  Maximum clipping value for X
    @param    maxy  Maximum clipping value for Y
*/
/**************************************************************************/
void Adafruit_GFX::charBounds(char c, int16_t *x, int16_t *y,
  int16_t *minx, int16_t *miny, int16_t *maxx, int16_t *maxy) {
   d51a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if(gfxFont) {
   d51ac:	69c4      	ldr	r4, [r0, #28]
    @param    maxx  Maximum clipping value for X
    @param    maxy  Maximum clipping value for Y
*/
/**************************************************************************/
void Adafruit_GFX::charBounds(char c, int16_t *x, int16_t *y,
  int16_t *minx, int16_t *miny, int16_t *maxx, int16_t *maxy) {
   d51ae:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   d51b2:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
   d51b6:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   d51ba:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c

    if(gfxFont) {
   d51be:	2c00      	cmp	r4, #0
   d51c0:	d06a      	beq.n	d5298 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0xf0>

        if(c == '\n') { // Newline?
   d51c2:	290a      	cmp	r1, #10
   d51c4:	d108      	bne.n	d51d8 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0x30>
            *x  = 0;    // Reset x to zero, advance y by one line
   d51c6:	2100      	movs	r1, #0
   d51c8:	8011      	strh	r1, [r2, #0]
            *y += textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d51ca:	69c2      	ldr	r2, [r0, #28]
   d51cc:	7e01      	ldrb	r1, [r0, #24]
   d51ce:	7a94      	ldrb	r4, [r2, #10]
   d51d0:	881a      	ldrh	r2, [r3, #0]
   d51d2:	fb04 2201 	mla	r2, r4, r1, r2
   d51d6:	e066      	b.n	d52a6 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0xfe>
        } else if(c != '\r') { // Not a carriage return; is normal char
   d51d8:	290d      	cmp	r1, #13
   d51da:	f000 80a9 	beq.w	d5330 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0x188>
            uint8_t first = pgm_read_byte(&gfxFont->first),
   d51de:	7a25      	ldrb	r5, [r4, #8]
                    last  = pgm_read_byte(&gfxFont->last);
            if((c >= first) && (c <= last)) { // Char present in this font?
   d51e0:	42a9      	cmp	r1, r5
   d51e2:	f0c0 80a5 	bcc.w	d5330 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0x188>
   d51e6:	7a66      	ldrb	r6, [r4, #9]
   d51e8:	428e      	cmp	r6, r1
   d51ea:	f0c0 80a1 	bcc.w	d5330 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0x188>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
   d51ee:	6864      	ldr	r4, [r4, #4]
                uint8_t gw = pgm_read_byte(&glyph->width),
                        gh = pgm_read_byte(&glyph->height),
                        xa = pgm_read_byte(&glyph->xAdvance);
                int8_t  xo = pgm_read_byte(&glyph->xOffset),
                        yo = pgm_read_byte(&glyph->yOffset);
                if(wrap && ((*x+(((int16_t)xo+gw)*textsize)) > _width)) {
   d51f0:	7e87      	ldrb	r7, [r0, #26]
        } else if(c != '\r') { // Not a carriage return; is normal char
            uint8_t first = pgm_read_byte(&gfxFont->first),
                    last  = pgm_read_byte(&gfxFont->last);
            if((c >= first) && (c <= last)) { // Char present in this font?
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
   d51f2:	1b49      	subs	r1, r1, r5
   d51f4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
                uint8_t gw = pgm_read_byte(&glyph->width),
                        gh = pgm_read_byte(&glyph->height),
                        xa = pgm_read_byte(&glyph->xAdvance);
   d51f8:	790e      	ldrb	r6, [r1, #4]
            uint8_t first = pgm_read_byte(&gfxFont->first),
                    last  = pgm_read_byte(&gfxFont->last);
            if((c >= first) && (c <= last)) { // Char present in this font?
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
                uint8_t gw = pgm_read_byte(&glyph->width),
   d51fa:	788c      	ldrb	r4, [r1, #2]
                        gh = pgm_read_byte(&glyph->height),
   d51fc:	78cd      	ldrb	r5, [r1, #3]
                        xa = pgm_read_byte(&glyph->xAdvance);
   d51fe:	9601      	str	r6, [sp, #4]
                int8_t  xo = pgm_read_byte(&glyph->xOffset),
   d5200:	f991 6005 	ldrsb.w	r6, [r1, #5]
                        yo = pgm_read_byte(&glyph->yOffset);
   d5204:	f991 1006 	ldrsb.w	r1, [r1, #6]
                if(wrap && ((*x+(((int16_t)xo+gw)*textsize)) > _width)) {
   d5208:	b1af      	cbz	r7, d5236 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0x8e>
   d520a:	f9b2 a000 	ldrsh.w	sl, [r2]
   d520e:	f890 b018 	ldrb.w	fp, [r0, #24]
   d5212:	1937      	adds	r7, r6, r4
   d5214:	fb0b a707 	mla	r7, fp, r7, sl
   d5218:	f9b0 a00c 	ldrsh.w	sl, [r0, #12]
   d521c:	4557      	cmp	r7, sl
   d521e:	dd0a      	ble.n	d5236 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0x8e>
                    *x  = 0; // Reset x to zero, advance y by one line
   d5220:	2700      	movs	r7, #0
   d5222:	8017      	strh	r7, [r2, #0]
                    *y += textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5224:	69c7      	ldr	r7, [r0, #28]
   d5226:	f8b3 a000 	ldrh.w	sl, [r3]
   d522a:	f897 b00a 	ldrb.w	fp, [r7, #10]
   d522e:	7e07      	ldrb	r7, [r0, #24]
   d5230:	fb0b a707 	mla	r7, fp, r7, sl
   d5234:	801f      	strh	r7, [r3, #0]
                }
                int16_t ts = (int16_t)textsize,
                        x1 = *x + xo * ts,
   d5236:	7e00      	ldrb	r0, [r0, #24]
                        y1 = *y + yo * ts,
   d5238:	881b      	ldrh	r3, [r3, #0]
                if(wrap && ((*x+(((int16_t)xo+gw)*textsize)) > _width)) {
                    *x  = 0; // Reset x to zero, advance y by one line
                    *y += textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                }
                int16_t ts = (int16_t)textsize,
                        x1 = *x + xo * ts,
   d523a:	8817      	ldrh	r7, [r2, #0]
                        y1 = *y + yo * ts,
   d523c:	fb01 3100 	mla	r1, r1, r0, r3
                if(wrap && ((*x+(((int16_t)xo+gw)*textsize)) > _width)) {
                    *x  = 0; // Reset x to zero, advance y by one line
                    *y += textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                }
                int16_t ts = (int16_t)textsize,
                        x1 = *x + xo * ts,
   d5240:	fb06 7600 	mla	r6, r6, r0, r7
                        y1 = *y + yo * ts,
   d5244:	b289      	uxth	r1, r1
   d5246:	b20b      	sxth	r3, r1
                        x2 = x1 + gw * ts - 1,
                        y2 = y1 + gh * ts - 1;
   d5248:	fb05 1500 	mla	r5, r5, r0, r1
                if(wrap && ((*x+(((int16_t)xo+gw)*textsize)) > _width)) {
                    *x  = 0; // Reset x to zero, advance y by one line
                    *y += textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                }
                int16_t ts = (int16_t)textsize,
                        x1 = *x + xo * ts,
   d524c:	b2b6      	uxth	r6, r6
                        y1 = *y + yo * ts,
                        x2 = x1 + gw * ts - 1,
                        y2 = y1 + gh * ts - 1;
                if(x1 < *minx) *minx = x1;
   d524e:	f9bc 1000 	ldrsh.w	r1, [ip]
                if(wrap && ((*x+(((int16_t)xo+gw)*textsize)) > _width)) {
                    *x  = 0; // Reset x to zero, advance y by one line
                    *y += textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                }
                int16_t ts = (int16_t)textsize,
                        x1 = *x + xo * ts,
   d5252:	b237      	sxth	r7, r6
                        y1 = *y + yo * ts,
                        x2 = x1 + gw * ts - 1,
                        y2 = y1 + gh * ts - 1;
                if(x1 < *minx) *minx = x1;
   d5254:	42b9      	cmp	r1, r7
   d5256:	bfc8      	it	gt
   d5258:	f8ac 7000 	strhgt.w	r7, [ip]
                if(y1 < *miny) *miny = y1;
   d525c:	f9be 1000 	ldrsh.w	r1, [lr]
   d5260:	4299      	cmp	r1, r3
   d5262:	bfc8      	it	gt
   d5264:	f8ae 3000 	strhgt.w	r3, [lr]
                    *y += textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                }
                int16_t ts = (int16_t)textsize,
                        x1 = *x + xo * ts,
                        y1 = *y + yo * ts,
                        x2 = x1 + gw * ts - 1,
   d5268:	fb04 6400 	mla	r4, r4, r0, r6
                        y2 = y1 + gh * ts - 1;
                if(x1 < *minx) *minx = x1;
                if(y1 < *miny) *miny = y1;
                if(x2 > *maxx) *maxx = x2;
   d526c:	f9b9 3000 	ldrsh.w	r3, [r9]
                if(y2 > *maxy) *maxy = y2;
                *x += xa * ts;
   d5270:	9901      	ldr	r1, [sp, #4]
                    *y += textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                }
                int16_t ts = (int16_t)textsize,
                        x1 = *x + xo * ts,
                        y1 = *y + yo * ts,
                        x2 = x1 + gw * ts - 1,
   d5272:	3c01      	subs	r4, #1
   d5274:	b224      	sxth	r4, r4
                        y2 = y1 + gh * ts - 1;
                if(x1 < *minx) *minx = x1;
                if(y1 < *miny) *miny = y1;
                if(x2 > *maxx) *maxx = x2;
   d5276:	42a3      	cmp	r3, r4
   d5278:	bfb8      	it	lt
   d527a:	f8a9 4000 	strhlt.w	r4, [r9]
                if(y2 > *maxy) *maxy = y2;
   d527e:	f9b8 3000 	ldrsh.w	r3, [r8]
                }
                int16_t ts = (int16_t)textsize,
                        x1 = *x + xo * ts,
                        y1 = *y + yo * ts,
                        x2 = x1 + gw * ts - 1,
                        y2 = y1 + gh * ts - 1;
   d5282:	3d01      	subs	r5, #1
   d5284:	b22d      	sxth	r5, r5
                if(x1 < *minx) *minx = x1;
                if(y1 < *miny) *miny = y1;
                if(x2 > *maxx) *maxx = x2;
                if(y2 > *maxy) *maxy = y2;
   d5286:	42ab      	cmp	r3, r5
   d5288:	bfb8      	it	lt
   d528a:	f8a8 5000 	strhlt.w	r5, [r8]
                *x += xa * ts;
   d528e:	8813      	ldrh	r3, [r2, #0]
   d5290:	fb01 3000 	mla	r0, r1, r0, r3
   d5294:	8010      	strh	r0, [r2, #0]
   d5296:	e04b      	b.n	d5330 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0x188>
            }
        }

    } else { // Default font

        if(c == '\n') {                     // Newline?
   d5298:	290a      	cmp	r1, #10
   d529a:	d106      	bne.n	d52aa <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0x102>
            *x  = 0;                        // Reset x to zero,
   d529c:	8014      	strh	r4, [r2, #0]
            *y += textsize * 8;             // advance y one line
   d529e:	7e01      	ldrb	r1, [r0, #24]
   d52a0:	881a      	ldrh	r2, [r3, #0]
   d52a2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   d52a6:	801a      	strh	r2, [r3, #0]
   d52a8:	e042      	b.n	d5330 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0x188>
            // min/max x/y unchaged -- that waits for next 'normal' character
        } else if(c != '\r') {  // Normal char; ignore carriage returns
   d52aa:	290d      	cmp	r1, #13
   d52ac:	d040      	beq.n	d5330 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0x188>
            if(wrap && ((*x + textsize * 6) > _width)) { // Off right?
   d52ae:	7e81      	ldrb	r1, [r0, #26]
   d52b0:	b179      	cbz	r1, d52d2 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0x12a>
   d52b2:	f9b2 1000 	ldrsh.w	r1, [r2]
   d52b6:	7e06      	ldrb	r6, [r0, #24]
   d52b8:	2506      	movs	r5, #6
   d52ba:	fb15 1106 	smlabb	r1, r5, r6, r1
   d52be:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
   d52c2:	42a9      	cmp	r1, r5
   d52c4:	dd05      	ble.n	d52d2 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_+0x12a>
                *x  = 0;                    // Reset x to zero,
   d52c6:	8014      	strh	r4, [r2, #0]
                *y += textsize * 8;         // advance y one line
   d52c8:	7e04      	ldrb	r4, [r0, #24]
   d52ca:	8819      	ldrh	r1, [r3, #0]
   d52cc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   d52d0:	8019      	strh	r1, [r3, #0]
            }
            int x2 = *x + textsize * 6 - 1, // Lower-right pixel of char
   d52d2:	7e05      	ldrb	r5, [r0, #24]
   d52d4:	f9b2 1000 	ldrsh.w	r1, [r2]
   d52d8:	2406      	movs	r4, #6
   d52da:	fb14 1405 	smlabb	r4, r4, r5, r1
                y2 = *y + textsize * 8 - 1;
   d52de:	f9b3 1000 	ldrsh.w	r1, [r3]
   d52e2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
            if(x2 > *maxx) *maxx = x2;      // Track max x, y
   d52e6:	f9b9 5000 	ldrsh.w	r5, [r9]
        } else if(c != '\r') {  // Normal char; ignore carriage returns
            if(wrap && ((*x + textsize * 6) > _width)) { // Off right?
                *x  = 0;                    // Reset x to zero,
                *y += textsize * 8;         // advance y one line
            }
            int x2 = *x + textsize * 6 - 1, // Lower-right pixel of char
   d52ea:	3c01      	subs	r4, #1
                y2 = *y + textsize * 8 - 1;
            if(x2 > *maxx) *maxx = x2;      // Track max x, y
   d52ec:	42ac      	cmp	r4, r5
   d52ee:	bfc8      	it	gt
   d52f0:	f8a9 4000 	strhgt.w	r4, [r9]
            if(y2 > *maxy) *maxy = y2;
   d52f4:	f9b8 4000 	ldrsh.w	r4, [r8]
            if(wrap && ((*x + textsize * 6) > _width)) { // Off right?
                *x  = 0;                    // Reset x to zero,
                *y += textsize * 8;         // advance y one line
            }
            int x2 = *x + textsize * 6 - 1, // Lower-right pixel of char
                y2 = *y + textsize * 8 - 1;
   d52f8:	3901      	subs	r1, #1
            if(x2 > *maxx) *maxx = x2;      // Track max x, y
            if(y2 > *maxy) *maxy = y2;
   d52fa:	42a1      	cmp	r1, r4
   d52fc:	bfc8      	it	gt
   d52fe:	f8a8 1000 	strhgt.w	r1, [r8]
            if(*x < *minx) *minx = *x;      // Track min x, y
   d5302:	f9b2 1000 	ldrsh.w	r1, [r2]
   d5306:	f9bc 4000 	ldrsh.w	r4, [ip]
   d530a:	428c      	cmp	r4, r1
   d530c:	bfc8      	it	gt
   d530e:	f8ac 1000 	strhgt.w	r1, [ip]
            if(*y < *miny) *miny = *y;
   d5312:	f9b3 3000 	ldrsh.w	r3, [r3]
   d5316:	f9be 1000 	ldrsh.w	r1, [lr]
   d531a:	4299      	cmp	r1, r3
   d531c:	bfc8      	it	gt
   d531e:	f8ae 3000 	strhgt.w	r3, [lr]
            *x += textsize * 6;             // Advance x one char
   d5322:	7e03      	ldrb	r3, [r0, #24]
   d5324:	8811      	ldrh	r1, [r2, #0]
   d5326:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d532a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d532e:	8013      	strh	r3, [r2, #0]
        }
    }
}
   d5330:	b003      	add	sp, #12
   d5332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5336 <_ZN12Adafruit_GFX13getTextBoundsEPK19__FlashStringHelperssPsS3_PtS4_>:
    @param    w      The boundary width, set by function
    @param    h      The boundary height, set by function
*/
/**************************************************************************/
void Adafruit_GFX::getTextBounds(const __FlashStringHelper *str,
        int16_t x, int16_t y, int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h) {
   d5336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d533a:	b088      	sub	sp, #32
   d533c:	4606      	mov	r6, r0
   d533e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   d5342:	9d11      	ldr	r5, [sp, #68]	; 0x44
   d5344:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d5346:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    uint8_t *s = (uint8_t *)str, c;

    *x1 = x;
   d5348:	f8a8 2000 	strh.w	r2, [r8]
    @param    w      The boundary width, set by function
    @param    h      The boundary height, set by function
*/
/**************************************************************************/
void Adafruit_GFX::getTextBounds(const __FlashStringHelper *str,
        int16_t x, int16_t y, int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h) {
   d534c:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8_t *s = (uint8_t *)str, c;

    *x1 = x;
    *y1 = y;
   d5350:	802b      	strh	r3, [r5, #0]
    *w  = *h = 0;
   d5352:	2300      	movs	r3, #0
   d5354:	8023      	strh	r3, [r4, #0]
   d5356:	803b      	strh	r3, [r7, #0]

    int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;
   d5358:	8983      	ldrh	r3, [r0, #12]
   d535a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d535e:	89c3      	ldrh	r3, [r0, #14]
   d5360:	f8ad 301a 	strh.w	r3, [sp, #26]
   d5364:	f64f 73ff 	movw	r3, #65535	; 0xffff
    @param    w      The boundary width, set by function
    @param    h      The boundary height, set by function
*/
/**************************************************************************/
void Adafruit_GFX::getTextBounds(const __FlashStringHelper *str,
        int16_t x, int16_t y, int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h) {
   d5368:	4689      	mov	r9, r1
   d536a:	f8ad 2016 	strh.w	r2, [sp, #22]

    *x1 = x;
    *y1 = y;
    *w  = *h = 0;

    int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;
   d536e:	f8ad 301c 	strh.w	r3, [sp, #28]
   d5372:	f8ad 301e 	strh.w	r3, [sp, #30]

    while((c = pgm_read_byte(s++)))
        charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
   d5376:	f10d 0a1e 	add.w	sl, sp, #30
    *y1 = y;
    *w  = *h = 0;

    int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;

    while((c = pgm_read_byte(s++)))
   d537a:	f819 1b01 	ldrb.w	r1, [r9], #1
   d537e:	b179      	cbz	r1, d53a0 <_ZN12Adafruit_GFX13getTextBoundsEPK19__FlashStringHelperssPsS3_PtS4_+0x6a>
        charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
   d5380:	ab07      	add	r3, sp, #28
   d5382:	9302      	str	r3, [sp, #8]
   d5384:	f10d 031a 	add.w	r3, sp, #26
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	ab06      	add	r3, sp, #24
   d538c:	9300      	str	r3, [sp, #0]
   d538e:	f8cd a00c 	str.w	sl, [sp, #12]
   d5392:	ab05      	add	r3, sp, #20
   d5394:	f10d 0216 	add.w	r2, sp, #22
   d5398:	4630      	mov	r0, r6
   d539a:	f7ff ff05 	bl	d51a8 <_ZN12Adafruit_GFX10charBoundsEcPsS0_S0_S0_S0_S0_>
    *y1 = y;
    *w  = *h = 0;

    int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;

    while((c = pgm_read_byte(s++)))
   d539e:	e7ec      	b.n	d537a <_ZN12Adafruit_GFX13getTextBoundsEPK19__FlashStringHelperssPsS3_PtS4_+0x44>
        charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);

    if(maxx >= minx) {
   d53a0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
   d53a4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   d53a8:	4293      	cmp	r3, r2
        *x1 = minx;
        *w  = maxx - minx + 1;
   d53aa:	bfa1      	itttt	ge
   d53ac:	3301      	addge	r3, #1
   d53ae:	1a9b      	subge	r3, r3, r2

    while((c = pgm_read_byte(s++)))
        charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);

    if(maxx >= minx) {
        *x1 = minx;
   d53b0:	f8a8 2000 	strhge.w	r2, [r8]
        *w  = maxx - minx + 1;
   d53b4:	803b      	strhge	r3, [r7, #0]
    }
    if(maxy >= miny) {
   d53b6:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
   d53ba:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   d53be:	4293      	cmp	r3, r2
        *y1 = miny;
        *h  = maxy - miny + 1;
   d53c0:	bfa1      	itttt	ge
   d53c2:	3301      	addge	r3, #1
   d53c4:	1a9b      	subge	r3, r3, r2
    if(maxx >= minx) {
        *x1 = minx;
        *w  = maxx - minx + 1;
    }
    if(maxy >= miny) {
        *y1 = miny;
   d53c6:	802a      	strhge	r2, [r5, #0]
        *h  = maxy - miny + 1;
   d53c8:	8023      	strhge	r3, [r4, #0]
    }
}
   d53ca:	b008      	add	sp, #32
   d53cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d53d0 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>:
   d53d0:	b410      	push	{r4}
   d53d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   d53d6:	f7ff bfae 	b.w	d5336 <_ZN12Adafruit_GFX13getTextBoundsEPK19__FlashStringHelperssPsS3_PtS4_>

000d53da <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d53da:	f000 bd7d 	b.w	d5ed8 <HAL_Pin_Map>
	...

000d53e0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
#endif
    }
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d53e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) {
   d53e2:	7e44      	ldrb	r4, [r0, #25]
#endif
    }
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d53e4:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  boolean bSwap = false;
  switch(rotation) {
   d53e8:	2c02      	cmp	r4, #2
   d53ea:	d009      	beq.n	d5400 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x20>
   d53ec:	2c03      	cmp	r4, #3
   d53ee:	d010      	beq.n	d5412 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x32>
   d53f0:	2c01      	cmp	r4, #1
   d53f2:	f040 809d 	bne.w	d5530 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x150>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d53f6:	8904      	ldrh	r4, [r0, #8]
   d53f8:	3c01      	subs	r4, #1
   d53fa:	1aa2      	subs	r2, r4, r2
   d53fc:	b212      	sxth	r2, r2
      break;
   d53fe:	e00c      	b.n	d541a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for _height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d5400:	8944      	ldrh	r4, [r0, #10]
   d5402:	3c01      	subs	r4, #1
   d5404:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d5406:	8904      	ldrh	r4, [r0, #8]
   d5408:	1ae4      	subs	r4, r4, r3
   d540a:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for _height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d540c:	b212      	sxth	r2, r2
      x -= (w-1);
   d540e:	b209      	sxth	r1, r1
      break;
   d5410:	e08e      	b.n	d5530 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x150>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d5412:	8944      	ldrh	r4, [r0, #10]
   d5414:	1ae4      	subs	r4, r4, r3
   d5416:	1a61      	subs	r1, r4, r1
   d5418:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d541a:	2a00      	cmp	r2, #0
   d541c:	f2c0 8087 	blt.w	d552e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d5420:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5424:	4294      	cmp	r4, r2
   d5426:	f340 80cd 	ble.w	d55c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>

  // make sure we don't try to draw below 0
  if(__y < 0) {
   d542a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d542c:	bfbe      	ittt	lt
   d542e:	185b      	addlt	r3, r3, r1
   d5430:	b21b      	sxthlt	r3, r3
    __y = 0;
   d5432:	2100      	movlt	r1, #0

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
   d5434:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5438:	18cd      	adds	r5, r1, r3
   d543a:	42a5      	cmp	r5, r4
    __h = (HEIGHT - __y);
   d543c:	bfc4      	itt	gt
   d543e:	1a63      	subgt	r3, r4, r1
   d5440:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt
  if(__h <= 0) {
   d5442:	2b00      	cmp	r3, #0
   d5444:	f340 80be 	ble.w	d55c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d5448:	b2c9      	uxtb	r1, r1
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d544a:	6a05      	ldr	r5, [r0, #32]
  register uint8_t y = __y;
  register uint8_t h = __h;


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
   d544c:	6b07      	ldr	r7, [r0, #48]	; 0x30
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d544e:	08cc      	lsrs	r4, r1, #3
   d5450:	fb05 2204 	mla	r2, r5, r4, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5454:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d5458:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d545a:	eb07 0502 	add.w	r5, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d545e:	d02f      	beq.n	d54c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
    // mask off the high n bits we want to set
    mod = 8-mod;
   d5460:	f1c1 0408 	rsb	r4, r1, #8
   d5464:	b2e4      	uxtb	r4, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5466:	4958      	ldr	r1, [pc, #352]	; (d55c8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e8>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
   d5468:	42a3      	cmp	r3, r4
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d546a:	5d09      	ldrb	r1, [r1, r4]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
   d546c:	d20d      	bcs.n	d548a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      mask &= (0XFF >> (mod-h));
   d546e:	ebc3 0c04 	rsb	ip, r3, r4
   d5472:	f04f 0eff 	mov.w	lr, #255	; 0xff
   d5476:	fa4e fe0c 	asr.w	lr, lr, ip
    }

  switch (color)
   d547a:	2e01      	cmp	r6, #1
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
   d547c:	ea0e 0101 	and.w	r1, lr, r1
    }

  switch (color)
   d5480:	d005      	beq.n	d548e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xae>
   d5482:	d30a      	bcc.n	d549a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xba>
   d5484:	2e02      	cmp	r6, #2
   d5486:	d00f      	beq.n	d54a8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc8>
   d5488:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d548a:	2e01      	cmp	r6, #1
   d548c:	d104      	bne.n	d5498 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xb8>
    {
    case WHITE:   *pBuf |=  mask;  break;
   d548e:	f817 e002 	ldrb.w	lr, [r7, r2]
   d5492:	ea41 010e 	orr.w	r1, r1, lr
   d5496:	e00b      	b.n	d54b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd0>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

  switch (color)
   d5498:	d204      	bcs.n	d54a4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc4>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
   d549a:	f817 e002 	ldrb.w	lr, [r7, r2]
   d549e:	ea2e 0101 	bic.w	r1, lr, r1
   d54a2:	e005      	b.n	d54b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd0>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

  switch (color)
   d54a4:	2e02      	cmp	r6, #2
   d54a6:	d107      	bne.n	d54b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd8>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
   d54a8:	f817 e002 	ldrb.w	lr, [r7, r2]
   d54ac:	ea81 010e 	eor.w	r1, r1, lr
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d54b0:	42a3      	cmp	r3, r4

  switch (color)
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
   d54b2:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d54b4:	f0c0 8086 	bcc.w	d55c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>

    h -= mod;

    pBuf += _width;
   d54b8:	6a02      	ldr	r2, [r0, #32]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }

    h -= mod;
   d54ba:	1b1b      	subs	r3, r3, r4
   d54bc:	b2db      	uxtb	r3, r3

    pBuf += _width;
   d54be:	4415      	add	r5, r2
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
   d54c0:	2b07      	cmp	r3, #7
   d54c2:	d91a      	bls.n	d54fa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x11a>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
   d54c4:	2e02      	cmp	r6, #2
   d54c6:	d10a      	bne.n	d54de <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xfe>
   d54c8:	461a      	mov	r2, r3
      do  {
      *pBuf=~(*pBuf);
   d54ca:	7829      	ldrb	r1, [r5, #0]
   d54cc:	43c9      	mvns	r1, r1
   d54ce:	7029      	strb	r1, [r5, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d54d0:	3a08      	subs	r2, #8
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do  {
      *pBuf=~(*pBuf);

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d54d2:	6a01      	ldr	r1, [r0, #32]

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d54d4:	b2d2      	uxtb	r2, r2
      } while(h >= 8);
   d54d6:	2a07      	cmp	r2, #7
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do  {
      *pBuf=~(*pBuf);

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d54d8:	440d      	add	r5, r1

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
      } while(h >= 8);
   d54da:	d8f6      	bhi.n	d54ca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xea>
   d54dc:	e01f      	b.n	d551e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13e>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
   d54de:	2e01      	cmp	r6, #1
   d54e0:	bf0c      	ite	eq
   d54e2:	24ff      	moveq	r4, #255	; 0xff
   d54e4:	2400      	movne	r4, #0
   d54e6:	461a      	mov	r2, r3

      do  {
        // write our value in
      *pBuf = val;
   d54e8:	702c      	strb	r4, [r5, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d54ea:	3a08      	subs	r2, #8
      do  {
        // write our value in
      *pBuf = val;

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d54ec:	6a01      	ldr	r1, [r0, #32]

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d54ee:	b2d2      	uxtb	r2, r2
      } while(h >= 8);
   d54f0:	2a07      	cmp	r2, #7
      do  {
        // write our value in
      *pBuf = val;

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d54f2:	440d      	add	r5, r1

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
      } while(h >= 8);
   d54f4:	d8f8      	bhi.n	d54e8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x108>
   d54f6:	f003 0307 	and.w	r3, r3, #7
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
   d54fa:	2b00      	cmp	r3, #0
   d54fc:	d062      	beq.n	d55c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d54fe:	4a33      	ldr	r2, [pc, #204]	; (d55cc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ec>)
    switch (color)
   d5500:	2e01      	cmp	r6, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d5502:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
   d5504:	d003      	beq.n	d550e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x12e>
   d5506:	d305      	bcc.n	d5514 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
   d5508:	2e02      	cmp	r6, #2
   d550a:	d15b      	bne.n	d55c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
   d550c:	e00c      	b.n	d5528 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x148>
    {
      case WHITE:   *pBuf |=  mask;  break;
   d550e:	782a      	ldrb	r2, [r5, #0]
   d5510:	4313      	orrs	r3, r2
   d5512:	e002      	b.n	d551a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
      case BLACK:   *pBuf &= ~mask;  break;
   d5514:	782a      	ldrb	r2, [r5, #0]
   d5516:	ea22 0303 	bic.w	r3, r2, r3
   d551a:	702b      	strb	r3, [r5, #0]
   d551c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      } while(h >= 8);
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
   d551e:	f013 0307 	ands.w	r3, r3, #7
   d5522:	d04f      	beq.n	d55c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d5524:	4a29      	ldr	r2, [pc, #164]	; (d55cc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ec>)
   d5526:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
   d5528:	782a      	ldrb	r2, [r5, #0]
   d552a:	4053      	eors	r3, r2
   d552c:	e7f5      	b.n	d551a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
   d552e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d5530:	2a00      	cmp	r2, #0
   d5532:	db46      	blt.n	d55c2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
   d5534:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5538:	4294      	cmp	r4, r2
   d553a:	dd43      	ble.n	d55c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>

  // make sure we don't try to draw below 0
  if(x < 0) {
   d553c:	2900      	cmp	r1, #0
    w += x;
   d553e:	bfbc      	itt	lt
   d5540:	18c9      	addlt	r1, r1, r3
   d5542:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
   d5544:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) {
    w += x;
    x = 0;
   d5548:	bfb8      	it	lt
   d554a:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
   d554c:	18cd      	adds	r5, r1, r3
   d554e:	42a5      	cmp	r5, r4
    w = (WIDTH - x);
   d5550:	bfc4      	itt	gt
   d5552:	1a63      	subgt	r3, r4, r1
   d5554:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d5556:	2b00      	cmp	r3, #0
   d5558:	dd34      	ble.n	d55c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
   d555a:	6b05      	ldr	r5, [r0, #48]	; 0x30
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d555c:	6a00      	ldr	r0, [r0, #32]
   d555e:	2408      	movs	r4, #8
   d5560:	fb92 f4f4 	sdiv	r4, r2, r4
   d5564:	fb00 1104 	mla	r1, r0, r4, r1
   d5568:	1868      	adds	r0, r5, r1

  register uint8_t mask = 1 << (y&7);
   d556a:	f002 0207 	and.w	r2, r2, #7
   d556e:	2101      	movs	r1, #1
   d5570:	fa01 f202 	lsl.w	r2, r1, r2

  switch (color)
   d5574:	428e      	cmp	r6, r1
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d5576:	b2d2      	uxtb	r2, r2

  switch (color)
   d5578:	d003      	beq.n	d5582 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1a2>
   d557a:	d30c      	bcc.n	d5596 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1b6>
   d557c:	2e02      	cmp	r6, #2
   d557e:	d016      	beq.n	d55ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ce>
   d5580:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5582:	3b01      	subs	r3, #1
   d5584:	b21b      	sxth	r3, r3
  {
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
   d5586:	1c5d      	adds	r5, r3, #1
   d5588:	d01c      	beq.n	d55c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
   d558a:	f810 1b01 	ldrb.w	r1, [r0], #1
   d558e:	4311      	orrs	r1, r2
   d5590:	f800 1c01 	strb.w	r1, [r0, #-1]
   d5594:	e7f5      	b.n	d5582 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1a2>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
   d5596:	43d2      	mvns	r2, r2
   d5598:	b2d2      	uxtb	r2, r2
   d559a:	3b01      	subs	r3, #1
   d559c:	b21b      	sxth	r3, r3
   d559e:	1c5c      	adds	r4, r3, #1
   d55a0:	d010      	beq.n	d55c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
   d55a2:	f810 1b01 	ldrb.w	r1, [r0], #1
   d55a6:	4011      	ands	r1, r2
   d55a8:	f800 1c01 	strb.w	r1, [r0, #-1]
   d55ac:	e7f5      	b.n	d559a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ba>
   d55ae:	3b01      	subs	r3, #1
   d55b0:	b21b      	sxth	r3, r3
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
   d55b2:	1c59      	adds	r1, r3, #1
   d55b4:	d006      	beq.n	d55c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
   d55b6:	f810 1b01 	ldrb.w	r1, [r0], #1
   d55ba:	4051      	eors	r1, r2
   d55bc:	f800 1c01 	strb.w	r1, [r0, #-1]
   d55c0:	e7f5      	b.n	d55ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ce>
   d55c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55c6:	bf00      	nop
   d55c8:	2003e220 	.word	0x2003e220
   d55cc:	2003e218 	.word	0x2003e218

000d55d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d55d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) {
   d55d2:	7e44      	ldrb	r4, [r0, #25]
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d55d4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) {
   d55d8:	2c02      	cmp	r4, #2
   d55da:	d008      	beq.n	d55ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d55dc:	2c03      	cmp	r4, #3
   d55de:	d00f      	beq.n	d5600 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d55e0:	2c01      	cmp	r4, #1
   d55e2:	d160      	bne.n	d56a6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d55e4:	8904      	ldrh	r4, [r0, #8]
   d55e6:	1ae4      	subs	r4, r4, r3
   d55e8:	1aa2      	subs	r2, r4, r2
   d55ea:	b212      	sxth	r2, r2
      break;
   d55ec:	e00c      	b.n	d5608 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d55ee:	8904      	ldrh	r4, [r0, #8]
   d55f0:	3c01      	subs	r4, #1
   d55f2:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d55f4:	8944      	ldrh	r4, [r0, #10]
   d55f6:	1ae4      	subs	r4, r4, r3
   d55f8:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d55fa:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d55fc:	b212      	sxth	r2, r2
      break;
   d55fe:	e052      	b.n	d56a6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y
      bSwap = true;
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
   d5600:	8944      	ldrh	r4, [r0, #10]
   d5602:	3c01      	subs	r4, #1
   d5604:	1a61      	subs	r1, r4, r1
   d5606:	b209      	sxth	r1, r1
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d5608:	2900      	cmp	r1, #0
   d560a:	db4b      	blt.n	d56a4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd4>
   d560c:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5610:	428c      	cmp	r4, r1
   d5612:	f340 80cf 	ble.w	d57b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>

  // make sure we don't try to draw below 0
  if(x < 0) {
   d5616:	2a00      	cmp	r2, #0
    w += x;
   d5618:	bfbc      	itt	lt
   d561a:	18d2      	addlt	r2, r2, r3
   d561c:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
   d561e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) {
    w += x;
    x = 0;
   d5622:	bfb8      	it	lt
   d5624:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
   d5626:	18d6      	adds	r6, r2, r3
   d5628:	42a6      	cmp	r6, r4
    w = (WIDTH - x);
   d562a:	bfc4      	itt	gt
   d562c:	1aa3      	subgt	r3, r4, r2
   d562e:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d5630:	2b00      	cmp	r3, #0
   d5632:	f340 80bf 	ble.w	d57b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
   d5636:	6b06      	ldr	r6, [r0, #48]	; 0x30
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d5638:	6a00      	ldr	r0, [r0, #32]
   d563a:	2408      	movs	r4, #8
   d563c:	fb91 f4f4 	sdiv	r4, r1, r4
   d5640:	fb00 2204 	mla	r2, r0, r4, r2
   d5644:	18b0      	adds	r0, r6, r2

  register uint8_t mask = 1 << (y&7);
   d5646:	f001 0107 	and.w	r1, r1, #7
   d564a:	2201      	movs	r2, #1
   d564c:	fa02 f101 	lsl.w	r1, r2, r1

  switch (color)
   d5650:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d5652:	b2c9      	uxtb	r1, r1

  switch (color)
   d5654:	d003      	beq.n	d565e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x8e>
   d5656:	d30d      	bcc.n	d5674 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xa4>
   d5658:	2d02      	cmp	r5, #2
   d565a:	d018      	beq.n	d568e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xbe>
   d565c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d565e:	3b01      	subs	r3, #1
   d5660:	b21b      	sxth	r3, r3
  {
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
   d5662:	1c5d      	adds	r5, r3, #1
   d5664:	f000 80a6 	beq.w	d57b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
   d5668:	f810 2b01 	ldrb.w	r2, [r0], #1
   d566c:	430a      	orrs	r2, r1
   d566e:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5672:	e7f4      	b.n	d565e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x8e>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
   d5674:	43c9      	mvns	r1, r1
   d5676:	b2c9      	uxtb	r1, r1
   d5678:	3b01      	subs	r3, #1
   d567a:	b21b      	sxth	r3, r3
   d567c:	1c5c      	adds	r4, r3, #1
   d567e:	f000 8099 	beq.w	d57b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
   d5682:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5686:	400a      	ands	r2, r1
   d5688:	f800 2c01 	strb.w	r2, [r0, #-1]
   d568c:	e7f4      	b.n	d5678 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xa8>
   d568e:	3b01      	subs	r3, #1
   d5690:	b21b      	sxth	r3, r3
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
   d5692:	1c5a      	adds	r2, r3, #1
   d5694:	f000 808e 	beq.w	d57b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
   d5698:	f810 2b01 	ldrb.w	r2, [r0], #1
   d569c:	404a      	eors	r2, r1
   d569e:	f800 2c01 	strb.w	r2, [r0, #-1]
   d56a2:	e7f4      	b.n	d568e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xbe>
   d56a4:	bdf0      	pop	{r4, r5, r6, r7, pc}


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d56a6:	2900      	cmp	r1, #0
   d56a8:	f2c0 8083 	blt.w	d57b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e2>
   d56ac:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d56b0:	428c      	cmp	r4, r1
   d56b2:	dd7f      	ble.n	d57b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>

  // make sure we don't try to draw below 0
  if(__y < 0) {
   d56b4:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d56b6:	bfbe      	ittt	lt
   d56b8:	189b      	addlt	r3, r3, r2
   d56ba:	b21b      	sxthlt	r3, r3
    __y = 0;
   d56bc:	2200      	movlt	r2, #0

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
   d56be:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d56c2:	18d6      	adds	r6, r2, r3
   d56c4:	42a6      	cmp	r6, r4
    __h = (HEIGHT - __y);
   d56c6:	bfc4      	itt	gt
   d56c8:	1aa3      	subgt	r3, r4, r2
   d56ca:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt
  if(__h <= 0) {
   d56cc:	2b00      	cmp	r3, #0
   d56ce:	dd71      	ble.n	d57b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d56d0:	b2d2      	uxtb	r2, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d56d2:	6a06      	ldr	r6, [r0, #32]
  register uint8_t y = __y;
  register uint8_t h = __h;


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
   d56d4:	6b07      	ldr	r7, [r0, #48]	; 0x30
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d56d6:	08d4      	lsrs	r4, r2, #3
   d56d8:	fb06 1104 	mla	r1, r6, r4, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d56dc:	f012 0207 	ands.w	r2, r2, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d56e0:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d56e2:	eb07 0601 	add.w	r6, r7, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d56e6:	d02e      	beq.n	d5746 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x176>
    // mask off the high n bits we want to set
    mod = 8-mod;
   d56e8:	f1c2 0408 	rsb	r4, r2, #8
   d56ec:	b2e4      	uxtb	r4, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d56ee:	4a32      	ldr	r2, [pc, #200]	; (d57b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e8>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
   d56f0:	42a3      	cmp	r3, r4
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d56f2:	5d12      	ldrb	r2, [r2, r4]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
   d56f4:	d20d      	bcs.n	d5712 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
      mask &= (0XFF >> (mod-h));
   d56f6:	ebc3 0c04 	rsb	ip, r3, r4
   d56fa:	f04f 0eff 	mov.w	lr, #255	; 0xff
   d56fe:	fa4e fe0c 	asr.w	lr, lr, ip
    }

  switch (color)
   d5702:	2d01      	cmp	r5, #1
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
   d5704:	ea0e 0202 	and.w	r2, lr, r2
    }

  switch (color)
   d5708:	d005      	beq.n	d5716 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   d570a:	d30a      	bcc.n	d5722 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d570c:	2d02      	cmp	r5, #2
   d570e:	d00f      	beq.n	d5730 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x160>
   d5710:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5712:	2d01      	cmp	r5, #1
   d5714:	d104      	bne.n	d5720 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x150>
    {
    case WHITE:   *pBuf |=  mask;  break;
   d5716:	f817 e001 	ldrb.w	lr, [r7, r1]
   d571a:	ea42 020e 	orr.w	r2, r2, lr
   d571e:	e00b      	b.n	d5738 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

  switch (color)
   d5720:	d204      	bcs.n	d572c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x15c>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
   d5722:	f817 e001 	ldrb.w	lr, [r7, r1]
   d5726:	ea2e 0202 	bic.w	r2, lr, r2
   d572a:	e005      	b.n	d5738 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

  switch (color)
   d572c:	2d02      	cmp	r5, #2
   d572e:	d106      	bne.n	d573e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16e>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
   d5730:	f817 e001 	ldrb.w	lr, [r7, r1]
   d5734:	ea82 020e 	eor.w	r2, r2, lr
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5738:	42a3      	cmp	r3, r4

  switch (color)
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
   d573a:	547a      	strb	r2, [r7, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d573c:	d33a      	bcc.n	d57b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>

    h -= mod;

    pBuf += _width;
   d573e:	6a02      	ldr	r2, [r0, #32]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }

    h -= mod;
   d5740:	1b1b      	subs	r3, r3, r4
   d5742:	b2db      	uxtb	r3, r3

    pBuf += _width;
   d5744:	4416      	add	r6, r2
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
   d5746:	2b07      	cmp	r3, #7
   d5748:	d91a      	bls.n	d5780 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1b0>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
   d574a:	2d02      	cmp	r5, #2
   d574c:	d10a      	bne.n	d5764 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x194>
   d574e:	461a      	mov	r2, r3
      do  {
      *pBuf=~(*pBuf);
   d5750:	7831      	ldrb	r1, [r6, #0]
   d5752:	43c9      	mvns	r1, r1
   d5754:	7031      	strb	r1, [r6, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d5756:	3a08      	subs	r2, #8
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do  {
      *pBuf=~(*pBuf);

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d5758:	6a01      	ldr	r1, [r0, #32]

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d575a:	b2d2      	uxtb	r2, r2
      } while(h >= 8);
   d575c:	2a07      	cmp	r2, #7
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do  {
      *pBuf=~(*pBuf);

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d575e:	440e      	add	r6, r1

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
      } while(h >= 8);
   d5760:	d8f6      	bhi.n	d5750 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x180>
   d5762:	e01d      	b.n	d57a0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1d0>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
   d5764:	2d01      	cmp	r5, #1
   d5766:	bf0c      	ite	eq
   d5768:	24ff      	moveq	r4, #255	; 0xff
   d576a:	2400      	movne	r4, #0
   d576c:	461a      	mov	r2, r3

      do  {
        // write our value in
      *pBuf = val;
   d576e:	7034      	strb	r4, [r6, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d5770:	3a08      	subs	r2, #8
      do  {
        // write our value in
      *pBuf = val;

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d5772:	6a01      	ldr	r1, [r0, #32]

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d5774:	b2d2      	uxtb	r2, r2
      } while(h >= 8);
   d5776:	2a07      	cmp	r2, #7
      do  {
        // write our value in
      *pBuf = val;

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d5778:	440e      	add	r6, r1

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
      } while(h >= 8);
   d577a:	d8f8      	bhi.n	d576e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x19e>
   d577c:	f003 0307 	and.w	r3, r3, #7
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
   d5780:	b1c3      	cbz	r3, d57b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d5782:	4a0e      	ldr	r2, [pc, #56]	; (d57bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ec>)
    switch (color)
   d5784:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d5786:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
   d5788:	d003      	beq.n	d5792 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1c2>
   d578a:	d305      	bcc.n	d5798 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1c8>
   d578c:	2d02      	cmp	r5, #2
   d578e:	d111      	bne.n	d57b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
   d5790:	e00b      	b.n	d57aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1da>
    {
      case WHITE:   *pBuf |=  mask;  break;
   d5792:	7832      	ldrb	r2, [r6, #0]
   d5794:	4313      	orrs	r3, r2
   d5796:	e00a      	b.n	d57ae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1de>
      case BLACK:   *pBuf &= ~mask;  break;
   d5798:	7832      	ldrb	r2, [r6, #0]
   d579a:	ea22 0303 	bic.w	r3, r2, r3
   d579e:	e006      	b.n	d57ae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1de>
      } while(h >= 8);
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
   d57a0:	f013 0307 	ands.w	r3, r3, #7
   d57a4:	d006      	beq.n	d57b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d57a6:	4a05      	ldr	r2, [pc, #20]	; (d57bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ec>)
   d57a8:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
   d57aa:	7832      	ldrb	r2, [r6, #0]
   d57ac:	4053      	eors	r3, r2
   d57ae:	7033      	strb	r3, [r6, #0]
  if(bSwap) {
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d57b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d57b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d57b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d57b6:	bf00      	nop
   d57b8:	2003e220 	.word	0x2003e220
   d57bc:	2003e218 	.word	0x2003e218

000d57c0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d57c0:	4770      	bx	lr

000d57c2 <_ZN16Adafruit_SSD1306D0Ev>:
   d57c2:	b510      	push	{r4, lr}
   d57c4:	2134      	movs	r1, #52	; 0x34
   d57c6:	4604      	mov	r4, r0
   d57c8:	f001 fbdb 	bl	d6f82 <_ZdlPvj>
   d57cc:	4620      	mov	r0, r4
   d57ce:	bd10      	pop	{r4, pc}

000d57d0 <_ZN16Adafruit_SSD13069drawPixelEsst>:


#define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }

// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d57d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
   d57d2:	1e0e      	subs	r6, r1, #0


#define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }

// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d57d4:	4605      	mov	r5, r0
   d57d6:	4614      	mov	r4, r2
   d57d8:	461f      	mov	r7, r3
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
   d57da:	db57      	blt.n	d588c <_ZN16Adafruit_SSD13069drawPixelEsst+0xbc>
   d57dc:	6a03      	ldr	r3, [r0, #32]
   d57de:	429e      	cmp	r6, r3
   d57e0:	d254      	bcs.n	d588c <_ZN16Adafruit_SSD13069drawPixelEsst+0xbc>
   d57e2:	2a00      	cmp	r2, #0
   d57e4:	db52      	blt.n	d588c <_ZN16Adafruit_SSD13069drawPixelEsst+0xbc>
   d57e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d57e8:	429a      	cmp	r2, r3
   d57ea:	d24f      	bcs.n	d588c <_ZN16Adafruit_SSD13069drawPixelEsst+0xbc>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d57ec:	f7ff fcce 	bl	d518c <_ZNK12Adafruit_GFX11getRotationEv>
   d57f0:	2802      	cmp	r0, #2
   d57f2:	d009      	beq.n	d5808 <_ZN16Adafruit_SSD13069drawPixelEsst+0x38>
   d57f4:	2803      	cmp	r0, #3
   d57f6:	d010      	beq.n	d581a <_ZN16Adafruit_SSD13069drawPixelEsst+0x4a>
   d57f8:	2801      	cmp	r0, #1
   d57fa:	d113      	bne.n	d5824 <_ZN16Adafruit_SSD13069drawPixelEsst+0x54>
  case 1:
    ssd1306_swap(x, y);
    x = _width - x - 1;
   d57fc:	6a2b      	ldr	r3, [r5, #32]
   d57fe:	3b01      	subs	r3, #1
   d5800:	1b1b      	subs	r3, r3, r4
   d5802:	4634      	mov	r4, r6
   d5804:	b21e      	sxth	r6, r3
   d5806:	e00d      	b.n	d5824 <_ZN16Adafruit_SSD13069drawPixelEsst+0x54>
    break;
  case 2:
    x = _width - x - 1;
   d5808:	6a29      	ldr	r1, [r5, #32]
    y = _height - y - 1;
   d580a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  case 1:
    ssd1306_swap(x, y);
    x = _width - x - 1;
    break;
  case 2:
    x = _width - x - 1;
   d580c:	3901      	subs	r1, #1
    y = _height - y - 1;
   d580e:	3a01      	subs	r2, #1
  case 1:
    ssd1306_swap(x, y);
    x = _width - x - 1;
    break;
  case 2:
    x = _width - x - 1;
   d5810:	1b8e      	subs	r6, r1, r6
    y = _height - y - 1;
   d5812:	1b14      	subs	r4, r2, r4
  case 1:
    ssd1306_swap(x, y);
    x = _width - x - 1;
    break;
  case 2:
    x = _width - x - 1;
   d5814:	b236      	sxth	r6, r6
    y = _height - y - 1;
   d5816:	b224      	sxth	r4, r4
   d5818:	e004      	b.n	d5824 <_ZN16Adafruit_SSD13069drawPixelEsst+0x54>
    break;
  case 3:
    ssd1306_swap(x, y);
    y = _height - y - 1;
   d581a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d581c:	3b01      	subs	r3, #1
   d581e:	1b9b      	subs	r3, r3, r6
   d5820:	4626      	mov	r6, r4
   d5822:	b21c      	sxth	r4, r3
    break;
  }

  // x is which column
    switch (color)
   d5824:	2f01      	cmp	r7, #1
   d5826:	d003      	beq.n	d5830 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d5828:	d310      	bcc.n	d584c <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   d582a:	2f02      	cmp	r7, #2
   d582c:	d01f      	beq.n	d586e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d582e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
      case WHITE:   buffer[x+ (y/8)*_width] |=  (1 << (y&7)); break;
   d5830:	6a2b      	ldr	r3, [r5, #32]
   d5832:	2108      	movs	r1, #8
   d5834:	fb94 f1f1 	sdiv	r1, r4, r1
   d5838:	fb03 6601 	mla	r6, r3, r1, r6
   d583c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d583e:	f004 0407 	and.w	r4, r4, #7
   d5842:	5d8b      	ldrb	r3, [r1, r6]
   d5844:	40a7      	lsls	r7, r4
   d5846:	431f      	orrs	r7, r3
   d5848:	558f      	strb	r7, [r1, r6]
   d584a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      case BLACK:   buffer[x+ (y/8)*_width] &= ~(1 << (y&7)); break;
   d584c:	6a29      	ldr	r1, [r5, #32]
   d584e:	6b28      	ldr	r0, [r5, #48]	; 0x30
   d5850:	2308      	movs	r3, #8
   d5852:	fb94 f3f3 	sdiv	r3, r4, r3
   d5856:	fb01 6603 	mla	r6, r1, r3, r6
   d585a:	f004 0407 	and.w	r4, r4, #7
   d585e:	5d83      	ldrb	r3, [r0, r6]
   d5860:	2101      	movs	r1, #1
   d5862:	fa01 f404 	lsl.w	r4, r1, r4
   d5866:	ea23 0404 	bic.w	r4, r3, r4
   d586a:	5584      	strb	r4, [r0, r6]
   d586c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      case INVERSE: buffer[x+ (y/8)*_width] ^=  (1 << (y&7)); break;
   d586e:	6a29      	ldr	r1, [r5, #32]
   d5870:	2308      	movs	r3, #8
   d5872:	fb94 f3f3 	sdiv	r3, r4, r3
   d5876:	fb01 6603 	mla	r6, r1, r3, r6
   d587a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d587c:	f004 0407 	and.w	r4, r4, #7
   d5880:	5d8b      	ldrb	r3, [r1, r6]
   d5882:	2201      	movs	r2, #1
   d5884:	fa02 f404 	lsl.w	r4, r2, r4
   d5888:	405c      	eors	r4, r3
   d588a:	558c      	strb	r4, [r1, r6]
   d588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5890 <_ZN16Adafruit_SSD1306C1Ejja>:
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(size_t width, size_t height, int8_t reset) : Adafruit_GFX(width, height), _width(width), _height(height) {
   d5890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5894:	4604      	mov	r4, r0
   d5896:	460f      	mov	r7, r1
   d5898:	4615      	mov	r5, r2
   d589a:	b209      	sxth	r1, r1
   d589c:	b212      	sxth	r2, r2
   d589e:	2600      	movs	r6, #0
   d58a0:	4698      	mov	r8, r3
   d58a2:	f7ff fa75 	bl	d4d90 <_ZN12Adafruit_GFXC1Ess>
   d58a6:	22ff      	movs	r2, #255	; 0xff
   d58a8:	4b11      	ldr	r3, [pc, #68]	; (d58f0 <_ZN16Adafruit_SSD1306C1Ejja+0x60>)
   d58aa:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
  rst = reset;

  buffer = new uint8_t[_width * _height / 8];
   d58ac:	fb05 f007 	mul.w	r0, r5, r7
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(size_t width, size_t height, int8_t reset) : Adafruit_GFX(width, height), _width(width), _height(height) {
   d58b0:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  sclk = dc = cs = sid = -1;
   d58b4:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
   d58b8:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
   d58bc:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(size_t width, size_t height, int8_t reset) : Adafruit_GFX(width, height), _width(width), _height(height) {
   d58c0:	6227      	str	r7, [r4, #32]
   d58c2:	6265      	str	r5, [r4, #36]	; 0x24
   d58c4:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
   d58c8:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
   d58cc:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
  sclk = dc = cs = sid = -1;
  rst = reset;
   d58d0:	f884 802d 	strb.w	r8, [r4, #45]	; 0x2d

  buffer = new uint8_t[_width * _height / 8];
   d58d4:	08c0      	lsrs	r0, r0, #3
   d58d6:	f7fe fbe0 	bl	d409a <_Znaj>
  memset(buffer, 0, _width * _height / 8);
   d58da:	6a22      	ldr	r2, [r4, #32]
   d58dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(size_t width, size_t height, int8_t reset) : Adafruit_GFX(width, height), _width(width), _height(height) {
  sclk = dc = cs = sid = -1;
  rst = reset;

  buffer = new uint8_t[_width * _height / 8];
   d58de:	6320      	str	r0, [r4, #48]	; 0x30
  memset(buffer, 0, _width * _height / 8);
   d58e0:	435a      	muls	r2, r3
   d58e2:	08d2      	lsrs	r2, r2, #3
   d58e4:	4631      	mov	r1, r6
   d58e6:	f002 f92c 	bl	d7b42 <memset>
}
   d58ea:	4620      	mov	r0, r4
   d58ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58f0:	000da7a0 	.word	0x000da7a0

000d58f4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (_width*_height/8));
   d58f4:	6a02      	ldr	r2, [r0, #32]
   d58f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d58f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   d58fa:	435a      	muls	r2, r3
   d58fc:	08d2      	lsrs	r2, r2, #3
   d58fe:	2100      	movs	r1, #0
   d5900:	f002 b91f 	b.w	d7b42 <memset>

000d5904 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d5904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if(hwSPI) {
   d5906:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (_width*_height/8));
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d590a:	4605      	mov	r5, r0
   d590c:	460f      	mov	r7, r1

  if(hwSPI) {
   d590e:	b123      	cbz	r3, d591a <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x16>
    (void)SPI.transfer(d);
   d5910:	4810      	ldr	r0, [pc, #64]	; (d5954 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x50>)
      else        digitalWrite(sid, LOW);
      digitalWrite(sclk, HIGH);
#endif
    }
  }
}
   d5912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {

  if(hwSPI) {
    (void)SPI.transfer(d);
   d5916:	f001 b8b9 	b.w	d6a8c <_ZN8SPIClass8transferEh>
   d591a:	2608      	movs	r6, #8
   d591c:	2480      	movs	r4, #128	; 0x80
      *clkport &= ~clkpinmask;
      if(d & bit) *mosiport |=  mosipinmask;
      else        *mosiport &= ~mosipinmask;
      *clkport |=  clkpinmask;
#else
      digitalWrite(sclk, LOW);
   d591e:	f995 002b 	ldrsb.w	r0, [r5, #43]	; 0x2b
   d5922:	2100      	movs	r1, #0
   d5924:	b280      	uxth	r0, r0
   d5926:	f001 fab8 	bl	d6e9a <digitalWrite>
   d592a:	f995 002a 	ldrsb.w	r0, [r5, #42]	; 0x2a
      if(d & bit) digitalWrite(sid, HIGH);
   d592e:	ea17 0104 	ands.w	r1, r7, r4
   d5932:	bf18      	it	ne
   d5934:	2101      	movne	r1, #1
      else        digitalWrite(sid, LOW);
   d5936:	b280      	uxth	r0, r0
   d5938:	f001 faaf 	bl	d6e9a <digitalWrite>
      digitalWrite(sclk, HIGH);
   d593c:	f995 002b 	ldrsb.w	r0, [r5, #43]	; 0x2b
   d5940:	2101      	movs	r1, #1
   d5942:	b280      	uxth	r0, r0
   d5944:	f001 faa9 	bl	d6e9a <digitalWrite>
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {

  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5948:	3e01      	subs	r6, #1
   d594a:	ea4f 0454 	mov.w	r4, r4, lsr #1
   d594e:	d1e6      	bne.n	d591e <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
      else        digitalWrite(sid, LOW);
      digitalWrite(sclk, HIGH);
#endif
    }
  }
}
   d5950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5952:	bf00      	nop
   d5954:	2003e730 	.word	0x2003e730

000d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
   d5958:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d595a:	f990 302a 	ldrsb.w	r3, [r0, #42]	; 0x2a
   d595e:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
   d5960:	4604      	mov	r4, r0
   d5962:	460d      	mov	r5, r1
  if (sid != -1)
   d5964:	d01d      	beq.n	d59a2 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
    *dcport &= ~dcpinmask;
    *csport &= ~cspinmask;
#else
    digitalWrite(cs, HIGH);
   d5966:	f990 002e 	ldrsb.w	r0, [r0, #46]	; 0x2e
   d596a:	2101      	movs	r1, #1
   d596c:	b280      	uxth	r0, r0
   d596e:	f001 fa94 	bl	d6e9a <digitalWrite>
    digitalWrite(dc, LOW);
   d5972:	f994 002c 	ldrsb.w	r0, [r4, #44]	; 0x2c
   d5976:	2100      	movs	r1, #0
   d5978:	b280      	uxth	r0, r0
   d597a:	f001 fa8e 	bl	d6e9a <digitalWrite>
    digitalWrite(cs, LOW);
   d597e:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5982:	2100      	movs	r1, #0
   d5984:	b280      	uxth	r0, r0
   d5986:	f001 fa88 	bl	d6e9a <digitalWrite>
#endif
    fastSPIwrite(c);
   d598a:	4629      	mov	r1, r5
   d598c:	4620      	mov	r0, r4
   d598e:	f7ff ffb9 	bl	d5904 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
#else
    digitalWrite(cs, HIGH);
   d5992:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5996:	2101      	movs	r1, #1
   d5998:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d599a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    fastSPIwrite(c);
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
#else
    digitalWrite(cs, HIGH);
   d599e:	f001 ba7c 	b.w	d6e9a <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d59a2:	f001 faa7 	bl	d6ef4 <_Z19__fetch_global_Wirev>
   d59a6:	f994 1028 	ldrsb.w	r1, [r4, #40]	; 0x28
   d59aa:	f000 fd2b 	bl	d6404 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d59ae:	f001 faa1 	bl	d6ef4 <_Z19__fetch_global_Wirev>
   d59b2:	6803      	ldr	r3, [r0, #0]
   d59b4:	2100      	movs	r1, #0
   d59b6:	689b      	ldr	r3, [r3, #8]
   d59b8:	4798      	blx	r3
    Wire.write(c);
   d59ba:	f001 fa9b 	bl	d6ef4 <_Z19__fetch_global_Wirev>
   d59be:	6803      	ldr	r3, [r0, #0]
   d59c0:	4629      	mov	r1, r5
   d59c2:	689b      	ldr	r3, [r3, #8]
   d59c4:	4798      	blx	r3
    Wire.endTransmission();
   d59c6:	f001 fa95 	bl	d6ef4 <_Z19__fetch_global_Wirev>
  }
}
   d59ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d59ce:	f000 bd20 	b.w	d6412 <_ZN7TwoWire15endTransmissionEv>
	...

000d59d4 <_ZN16Adafruit_SSD13065beginEhhb>:
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}


void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
   d59d4:	b570      	push	{r4, r5, r6, lr}
   d59d6:	4604      	mov	r4, r0
   d59d8:	461e      	mov	r6, r3
  _vccstate = vccstate;
   d59da:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d59de:	f990 302a 	ldrsb.w	r3, [r0, #42]	; 0x2a
}


void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d59e2:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28

  // set pin directions
  if (sid != -1){
   d59e6:	3301      	adds	r3, #1
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}


void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
   d59e8:	460d      	mov	r5, r1
  _vccstate = vccstate;
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d59ea:	d025      	beq.n	d5a38 <_ZN16Adafruit_SSD13065beginEhhb+0x64>
    pinMode(dc, OUTPUT);
   d59ec:	f990 002c 	ldrsb.w	r0, [r0, #44]	; 0x2c
   d59f0:	2101      	movs	r1, #1
   d59f2:	b280      	uxth	r0, r0
   d59f4:	f001 fa40 	bl	d6e78 <pinMode>
    pinMode(cs, OUTPUT);
   d59f8:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d59fc:	2101      	movs	r1, #1
   d59fe:	b280      	uxth	r0, r0
   d5a00:	f001 fa3a 	bl	d6e78 <pinMode>
    csport      = portOutputRegister(digitalPinToPort(cs));
    cspinmask   = digitalPinToBitMask(cs);
    dcport      = portOutputRegister(digitalPinToPort(dc));
    dcpinmask   = digitalPinToBitMask(dc);
#endif
    if (!hwSPI){
   d5a04:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   d5a08:	b95b      	cbnz	r3, d5a22 <_ZN16Adafruit_SSD13065beginEhhb+0x4e>
      // set pins for software-SPI
      pinMode(sid, OUTPUT);
   d5a0a:	f994 002a 	ldrsb.w	r0, [r4, #42]	; 0x2a
   d5a0e:	2101      	movs	r1, #1
   d5a10:	b280      	uxth	r0, r0
   d5a12:	f001 fa31 	bl	d6e78 <pinMode>
      pinMode(sclk, OUTPUT);
   d5a16:	f994 002b 	ldrsb.w	r0, [r4, #43]	; 0x2b
   d5a1a:	2101      	movs	r1, #1
   d5a1c:	b280      	uxth	r0, r0
   d5a1e:	f001 fa2b 	bl	d6e78 <pinMode>
      clkpinmask  = digitalPinToBitMask(sclk);
      mosiport    = portOutputRegister(digitalPinToPort(sid));
      mosipinmask = digitalPinToBitMask(sid);
#endif
      }
    if (hwSPI){
   d5a22:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   d5a26:	b15b      	cbz	r3, d5a40 <_ZN16Adafruit_SSD13065beginEhhb+0x6c>
      SPI.begin();
   d5a28:	486b      	ldr	r0, [pc, #428]	; (d5bd8 <_ZN16Adafruit_SSD13065beginEhhb+0x204>)
   d5a2a:	f000 ffcf 	bl	d69cc <_ZN8SPIClass5beginEv>
#ifdef SPI_HAS_TRANSACTION
      SPI.beginTransaction(SPISettings(8000000, MSBFIRST, SPI_MODE0));
#else
      SPI.setClockDivider (4);
   d5a2e:	2104      	movs	r1, #4
   d5a30:	4869      	ldr	r0, [pc, #420]	; (d5bd8 <_ZN16Adafruit_SSD13065beginEhhb+0x204>)
   d5a32:	f001 f817 	bl	d6a64 <_ZN8SPIClass15setClockDividerEh>
   d5a36:	e003      	b.n	d5a40 <_ZN16Adafruit_SSD13065beginEhhb+0x6c>
    }
  }
  else
  {
    // I2C Init
    Wire.begin();
   d5a38:	f001 fa5c 	bl	d6ef4 <_Z19__fetch_global_Wirev>
   d5a3c:	f000 fcd8 	bl	d63f0 <_ZN7TwoWire5beginEv>
    // Force 400 KHz I2C, rawr! (Uses pins 20, 21 for SDA, SCL)
    TWI1->TWI_CWGR = 0;
    TWI1->TWI_CWGR = ((VARIANT_MCK / (2 * 400000)) - 4) * 0x101;
#endif
  }
  if ((reset) && (rst >= 0)) {
   d5a40:	b1fe      	cbz	r6, d5a82 <_ZN16Adafruit_SSD13065beginEhhb+0xae>
   d5a42:	f994 002d 	ldrsb.w	r0, [r4, #45]	; 0x2d
   d5a46:	2800      	cmp	r0, #0
   d5a48:	db1b      	blt.n	d5a82 <_ZN16Adafruit_SSD13065beginEhhb+0xae>
    // Setup reset pin direction (used by both SPI and I2C)
    pinMode(rst, OUTPUT);
   d5a4a:	2101      	movs	r1, #1
   d5a4c:	b280      	uxth	r0, r0
   d5a4e:	f001 fa13 	bl	d6e78 <pinMode>
    digitalWrite(rst, HIGH);
   d5a52:	f994 002d 	ldrsb.w	r0, [r4, #45]	; 0x2d
   d5a56:	2101      	movs	r1, #1
   d5a58:	b280      	uxth	r0, r0
   d5a5a:	f001 fa1e 	bl	d6e9a <digitalWrite>
    // VDD (3.3V) goes high at start, lets just chill for a ms
    delay(1);
   d5a5e:	2001      	movs	r0, #1
   d5a60:	f000 fc3e 	bl	d62e0 <delay>
    // bring reset low
    digitalWrite(rst, LOW);
   d5a64:	f994 002d 	ldrsb.w	r0, [r4, #45]	; 0x2d
   d5a68:	2100      	movs	r1, #0
   d5a6a:	b280      	uxth	r0, r0
   d5a6c:	f001 fa15 	bl	d6e9a <digitalWrite>
    // wait 10ms
    delay(10);
   d5a70:	200a      	movs	r0, #10
   d5a72:	f000 fc35 	bl	d62e0 <delay>
    // bring out of reset
    digitalWrite(rst, HIGH);
   d5a76:	f994 002d 	ldrsb.w	r0, [r4, #45]	; 0x2d
   d5a7a:	2101      	movs	r1, #1
   d5a7c:	b280      	uxth	r0, r0
   d5a7e:	f001 fa0c 	bl	d6e9a <digitalWrite>
    // turn on VCC (9V?)
  }

  // Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d5a82:	21ae      	movs	r1, #174	; 0xae
   d5a84:	4620      	mov	r0, r4
   d5a86:	f7ff ff67 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d5a8a:	21d5      	movs	r1, #213	; 0xd5
   d5a8c:	4620      	mov	r0, r4
   d5a8e:	f7ff ff63 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d5a92:	2180      	movs	r1, #128	; 0x80
   d5a94:	4620      	mov	r0, r4
   d5a96:	f7ff ff5f 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d5a9a:	21a8      	movs	r1, #168	; 0xa8
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	f7ff ff5b 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(_height - 1);
   d5aa2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   d5aa4:	3901      	subs	r1, #1
   d5aa6:	b2c9      	uxtb	r1, r1
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	f7ff ff55 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d5aae:	21d3      	movs	r1, #211	; 0xd3
   d5ab0:	4620      	mov	r0, r4
   d5ab2:	f7ff ff51 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x0);                                   // no offset
   d5ab6:	2100      	movs	r1, #0
   d5ab8:	4620      	mov	r0, r4
   d5aba:	f7ff ff4d 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d5abe:	2140      	movs	r1, #64	; 0x40
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	f7ff ff49 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d5ac6:	218d      	movs	r1, #141	; 0x8d
   d5ac8:	4620      	mov	r0, r4
   d5aca:	f7ff ff45 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (vccstate == SSD1306_EXTERNALVCC)
   d5ace:	2d01      	cmp	r5, #1
    { ssd1306_command(0x10); }
   d5ad0:	bf0c      	ite	eq
   d5ad2:	2110      	moveq	r1, #16
  else
    { ssd1306_command(0x14); }
   d5ad4:	2114      	movne	r1, #20
   d5ad6:	4620      	mov	r0, r4
   d5ad8:	f7ff ff3e 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d5adc:	2120      	movs	r1, #32
   d5ade:	4620      	mov	r0, r4
   d5ae0:	f7ff ff3a 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d5ae4:	2100      	movs	r1, #0
   d5ae6:	4620      	mov	r0, r4
   d5ae8:	f7ff ff36 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d5aec:	21a1      	movs	r1, #161	; 0xa1
   d5aee:	4620      	mov	r0, r4
   d5af0:	f7ff ff32 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_COMSCANDEC);
   d5af4:	21c8      	movs	r1, #200	; 0xc8
   d5af6:	4620      	mov	r0, r4
   d5af8:	f7ff ff2e 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (_width == 128 && _height == 32) {
   d5afc:	6a23      	ldr	r3, [r4, #32]
   d5afe:	2b80      	cmp	r3, #128	; 0x80
   d5b00:	d112      	bne.n	d5b28 <_ZN16Adafruit_SSD13065beginEhhb+0x154>
   d5b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5b04:	2b20      	cmp	r3, #32
   d5b06:	d10f      	bne.n	d5b28 <_ZN16Adafruit_SSD13065beginEhhb+0x154>
	  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5b08:	21da      	movs	r1, #218	; 0xda
   d5b0a:	4620      	mov	r0, r4
   d5b0c:	f7ff ff24 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(0x02);
   d5b10:	2102      	movs	r1, #2
   d5b12:	4620      	mov	r0, r4
   d5b14:	f7ff ff20 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5b18:	2181      	movs	r1, #129	; 0x81
   d5b1a:	4620      	mov	r0, r4
   d5b1c:	f7ff ff1c 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(0x8F);
   d5b20:	218f      	movs	r1, #143	; 0x8f
   d5b22:	4620      	mov	r0, r4
   d5b24:	f7ff ff18 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }

  if (_width == 128 && _height == 64) {
   d5b28:	6a23      	ldr	r3, [r4, #32]
   d5b2a:	2b80      	cmp	r3, #128	; 0x80
   d5b2c:	d115      	bne.n	d5b5a <_ZN16Adafruit_SSD13065beginEhhb+0x186>
   d5b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5b30:	2b40      	cmp	r3, #64	; 0x40
   d5b32:	d112      	bne.n	d5b5a <_ZN16Adafruit_SSD13065beginEhhb+0x186>
	  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5b34:	21da      	movs	r1, #218	; 0xda
   d5b36:	4620      	mov	r0, r4
   d5b38:	f7ff ff0e 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(0x12);
   d5b3c:	2112      	movs	r1, #18
   d5b3e:	4620      	mov	r0, r4
   d5b40:	f7ff ff0a 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5b44:	2181      	movs	r1, #129	; 0x81
   d5b46:	4620      	mov	r0, r4
   d5b48:	f7ff ff06 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  if (vccstate == SSD1306_EXTERNALVCC)
   d5b4c:	2d01      	cmp	r5, #1
		{ ssd1306_command(0x9F); }
   d5b4e:	bf0c      	ite	eq
   d5b50:	219f      	moveq	r1, #159	; 0x9f
	  else
		{ ssd1306_command(0xCF); }
   d5b52:	21cf      	movne	r1, #207	; 0xcf
   d5b54:	4620      	mov	r0, r4
   d5b56:	f7ff feff 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }

  if (_width == 96 && _height == 16) {
   d5b5a:	6a23      	ldr	r3, [r4, #32]
   d5b5c:	2b60      	cmp	r3, #96	; 0x60
   d5b5e:	d115      	bne.n	d5b8c <_ZN16Adafruit_SSD13065beginEhhb+0x1b8>
   d5b60:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d5b62:	2e10      	cmp	r6, #16
   d5b64:	d112      	bne.n	d5b8c <_ZN16Adafruit_SSD13065beginEhhb+0x1b8>
	  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5b66:	21da      	movs	r1, #218	; 0xda
   d5b68:	4620      	mov	r0, r4
   d5b6a:	f7ff fef5 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(0x2);   //ada x12
   d5b6e:	2102      	movs	r1, #2
   d5b70:	4620      	mov	r0, r4
   d5b72:	f7ff fef1 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5b76:	2181      	movs	r1, #129	; 0x81
   d5b78:	4620      	mov	r0, r4
   d5b7a:	f7ff feed 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  if (vccstate == SSD1306_EXTERNALVCC)
   d5b7e:	2d01      	cmp	r5, #1
		{ ssd1306_command(0x10); }
   d5b80:	bf0c      	ite	eq
   d5b82:	4631      	moveq	r1, r6
	  else
		{ ssd1306_command(0xAF); }
   d5b84:	21af      	movne	r1, #175	; 0xaf
   d5b86:	4620      	mov	r0, r4
   d5b88:	f7ff fee6 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d5b8c:	21d9      	movs	r1, #217	; 0xd9
   d5b8e:	4620      	mov	r0, r4
   d5b90:	f7ff fee2 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (vccstate == SSD1306_EXTERNALVCC)
   d5b94:	2d01      	cmp	r5, #1
    { ssd1306_command(0x22); }
   d5b96:	bf0c      	ite	eq
   d5b98:	2122      	moveq	r1, #34	; 0x22
  else
    { ssd1306_command(0xF1); }
   d5b9a:	21f1      	movne	r1, #241	; 0xf1
   d5b9c:	4620      	mov	r0, r4
   d5b9e:	f7ff fedb 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d5ba2:	4620      	mov	r0, r4
   d5ba4:	21db      	movs	r1, #219	; 0xdb
   d5ba6:	f7ff fed7 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x40);
   d5baa:	4620      	mov	r0, r4
   d5bac:	2140      	movs	r1, #64	; 0x40
   d5bae:	f7ff fed3 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d5bb2:	4620      	mov	r0, r4
   d5bb4:	21a4      	movs	r1, #164	; 0xa4
   d5bb6:	f7ff fecf 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5bba:	4620      	mov	r0, r4
   d5bbc:	21a6      	movs	r1, #166	; 0xa6
   d5bbe:	f7ff fecb 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
   d5bc2:	4620      	mov	r0, r4
   d5bc4:	212e      	movs	r1, #46	; 0x2e
   d5bc6:	f7ff fec7 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5bca:	4620      	mov	r0, r4
   d5bcc:	21af      	movs	r1, #175	; 0xaf
}
   d5bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5bd2:	f7ff bec1 	b.w	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
   d5bd6:	bf00      	nop
   d5bd8:	2003e730 	.word	0x2003e730

000d5bdc <_ZN16Adafruit_SSD13067displayEv>:
  // it is useful to dim the display
  ssd1306_command(SSD1306_SETCONTRAST);
  ssd1306_command(contrast);
}

void Adafruit_SSD1306::display(void) {
   d5bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d5bde:	2121      	movs	r1, #33	; 0x21
  // it is useful to dim the display
  ssd1306_command(SSD1306_SETCONTRAST);
  ssd1306_command(contrast);
}

void Adafruit_SSD1306::display(void) {
   d5be0:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d5be2:	f7ff feb9 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d5be6:	2100      	movs	r1, #0
   d5be8:	4620      	mov	r0, r4
   d5bea:	f7ff feb5 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(_width-1); // Column end address (127 = reset)
   d5bee:	6a21      	ldr	r1, [r4, #32]
   d5bf0:	3901      	subs	r1, #1
   d5bf2:	b2c9      	uxtb	r1, r1
   d5bf4:	4620      	mov	r0, r4
   d5bf6:	f7ff feaf 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d5bfa:	2122      	movs	r1, #34	; 0x22
   d5bfc:	4620      	mov	r0, r4
   d5bfe:	f7ff feab 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d5c02:	2100      	movs	r1, #0
   d5c04:	4620      	mov	r0, r4
   d5c06:	f7ff fea7 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (_height == 64) {
   d5c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c0c:	2b40      	cmp	r3, #64	; 0x40
   d5c0e:	d103      	bne.n	d5c18 <_ZN16Adafruit_SSD13067displayEv+0x3c>
    ssd1306_command(7); // Page end address
   d5c10:	2107      	movs	r1, #7
   d5c12:	4620      	mov	r0, r4
   d5c14:	f7ff fea0 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }
  if (_height == 32) {
   d5c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c1a:	2b20      	cmp	r3, #32
   d5c1c:	d103      	bne.n	d5c26 <_ZN16Adafruit_SSD13067displayEv+0x4a>
    ssd1306_command(3); // Page end address
   d5c1e:	2103      	movs	r1, #3
   d5c20:	4620      	mov	r0, r4
   d5c22:	f7ff fe99 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }
  if (_height == 16) {
   d5c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c28:	2b10      	cmp	r3, #16
   d5c2a:	d103      	bne.n	d5c34 <_ZN16Adafruit_SSD13067displayEv+0x58>
    ssd1306_command(1); // Page end address
   d5c2c:	2101      	movs	r1, #1
   d5c2e:	4620      	mov	r0, r4
   d5c30:	f7ff fe92 	bl	d5958 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }

  if (sid != -1)
   d5c34:	f994 302a 	ldrsb.w	r3, [r4, #42]	; 0x2a
   d5c38:	3301      	adds	r3, #1
   d5c3a:	d101      	bne.n	d5c40 <_ZN16Adafruit_SSD13067displayEv+0x64>
   d5c3c:	2500      	movs	r5, #0
   d5c3e:	e03b      	b.n	d5cb8 <_ZN16Adafruit_SSD13067displayEv+0xdc>
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
    *dcport |= dcpinmask;
    *csport &= ~cspinmask;
#else
    digitalWrite(cs, HIGH);
   d5c40:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5c44:	2101      	movs	r1, #1
   d5c46:	b280      	uxth	r0, r0
   d5c48:	f001 f927 	bl	d6e9a <digitalWrite>
    digitalWrite(dc, HIGH);
   d5c4c:	f994 002c 	ldrsb.w	r0, [r4, #44]	; 0x2c
   d5c50:	2101      	movs	r1, #1
   d5c52:	b280      	uxth	r0, r0
   d5c54:	f001 f921 	bl	d6e9a <digitalWrite>
    digitalWrite(cs, LOW);
   d5c58:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5c5c:	2100      	movs	r1, #0
   d5c5e:	b280      	uxth	r0, r0
   d5c60:	f001 f91b 	bl	d6e9a <digitalWrite>
   d5c64:	2500      	movs	r5, #0
#endif

    for (uint16_t i=0; i<(_width*_height/8); i++) {
   d5c66:	6a21      	ldr	r1, [r4, #32]
   d5c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c6a:	b2aa      	uxth	r2, r5
   d5c6c:	434b      	muls	r3, r1
   d5c6e:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   d5c72:	f105 0501 	add.w	r5, r5, #1
   d5c76:	d205      	bcs.n	d5c84 <_ZN16Adafruit_SSD13067displayEv+0xa8>
      fastSPIwrite(buffer[i]);
   d5c78:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d5c7a:	4620      	mov	r0, r4
   d5c7c:	5c99      	ldrb	r1, [r3, r2]
   d5c7e:	f7ff fe41 	bl	d5904 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
#endif

    for (uint16_t i=0; i<(_width*_height/8); i++) {
   d5c82:	e7f0      	b.n	d5c66 <_ZN16Adafruit_SSD13067displayEv+0x8a>
      fastSPIwrite(buffer[i]);
    }
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
#else
    digitalWrite(cs, HIGH);
   d5c84:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5c88:	2101      	movs	r1, #1
   d5c8a:	b280      	uxth	r0, r0
    }
#ifdef TWBR
    TWBR = twbrbackup;
#endif
  }
}
   d5c8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      fastSPIwrite(buffer[i]);
    }
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
#else
    digitalWrite(cs, HIGH);
   d5c90:	f001 b903 	b.w	d6e9a <digitalWrite>
    for (uint16_t i=0; i<(_width*_height/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      WIRE_WRITE(0x40);
      for (uint8_t x=0; x<16; x++) {
        WIRE_WRITE(buffer[i]);
   d5c94:	f001 f92e 	bl	d6ef4 <_Z19__fetch_global_Wirev>
   d5c98:	19af      	adds	r7, r5, r6
   d5c9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   d5c9c:	6803      	ldr	r3, [r0, #0]
   d5c9e:	b2bf      	uxth	r7, r7
   d5ca0:	689b      	ldr	r3, [r3, #8]
   d5ca2:	5dd1      	ldrb	r1, [r2, r7]
   d5ca4:	3601      	adds	r6, #1
   d5ca6:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(_width*_height/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      WIRE_WRITE(0x40);
      for (uint8_t x=0; x<16; x++) {
   d5ca8:	2e10      	cmp	r6, #16
   d5caa:	d1f3      	bne.n	d5c94 <_ZN16Adafruit_SSD13067displayEv+0xb8>
   d5cac:	3510      	adds	r5, #16
   d5cae:	b2ad      	uxth	r5, r5
        WIRE_WRITE(buffer[i]);
        i++;
      }
      i--;
      Wire.endTransmission();
   d5cb0:	f001 f920 	bl	d6ef4 <_Z19__fetch_global_Wirev>
   d5cb4:	f000 fbad 	bl	d6412 <_ZN7TwoWire15endTransmissionEv>

    //Serial.println(TWBR, DEC);
    //Serial.println(TWSR & 0x3, DEC);

    // I2C
    for (uint16_t i=0; i<(_width*_height/8); i++) {
   d5cb8:	6a22      	ldr	r2, [r4, #32]
   d5cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5cbc:	4353      	muls	r3, r2
   d5cbe:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
   d5cc2:	d20d      	bcs.n	d5ce0 <_ZN16Adafruit_SSD13067displayEv+0x104>
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d5cc4:	f001 f916 	bl	d6ef4 <_Z19__fetch_global_Wirev>
   d5cc8:	f994 1028 	ldrsb.w	r1, [r4, #40]	; 0x28
   d5ccc:	f000 fb9a 	bl	d6404 <_ZN7TwoWire17beginTransmissionEi>
      WIRE_WRITE(0x40);
   d5cd0:	f001 f910 	bl	d6ef4 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5cd4:	6803      	ldr	r3, [r0, #0]
   d5cd6:	2140      	movs	r1, #64	; 0x40
   d5cd8:	689b      	ldr	r3, [r3, #8]
   d5cda:	4798      	blx	r3
   d5cdc:	2600      	movs	r6, #0
   d5cde:	e7d9      	b.n	d5c94 <_ZN16Adafruit_SSD13067displayEv+0xb8>
   d5ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ce2 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d5ce2:	f000 b8f9 	b.w	d5ed8 <HAL_Pin_Map>

000d5ce6 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d5ce6:	2200      	movs	r2, #0
   d5ce8:	210a      	movs	r1, #10
   d5cea:	6002      	str	r2, [r0, #0]
   d5cec:	8081      	strh	r1, [r0, #4]
   d5cee:	7182      	strb	r2, [r0, #6]
   d5cf0:	71c2      	strb	r2, [r0, #7]
{}
   d5cf2:	4770      	bx	lr

000d5cf4 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d5cf4:	2300      	movs	r3, #0
    , interval_millis(10)
    , state(0)
    , pin(0)
{}

void Debounce::attach(int pin) {
   d5cf6:	b510      	push	{r4, lr}
   d5cf8:	4604      	mov	r4, r0
    this->pin = pin;
   d5cfa:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d5cfc:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d5cfe:	b288      	uxth	r0, r1
   d5d00:	f001 f8e4 	bl	d6ecc <digitalRead>
   d5d04:	b108      	cbz	r0, d5d0a <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d5d06:	2303      	movs	r3, #3
   d5d08:	71a3      	strb	r3, [r4, #6]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5d0a:	f000 f8dd 	bl	d5ec8 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d5d0e:	6020      	str	r0, [r4, #0]
   d5d10:	bd10      	pop	{r4, pc}

000d5d12 <_ZN8Debounce6attachEi7PinMode>:
#endif
}

void Debounce::attach(int pin, PinMode mode){
   d5d12:	b538      	push	{r3, r4, r5, lr}
   d5d14:	460c      	mov	r4, r1
   d5d16:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d5d18:	4611      	mov	r1, r2
   d5d1a:	b2a0      	uxth	r0, r4
   d5d1c:	f001 f8ac 	bl	d6e78 <pinMode>
  
  this->attach(pin);
   d5d20:	4621      	mov	r1, r4
   d5d22:	4628      	mov	r0, r5
}
   d5d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void Debounce::attach(int pin, PinMode mode){
  pinMode(pin, mode);
  
  this->attach(pin);
   d5d28:	f7ff bfe4 	b.w	d5cf4 <_ZN8Debounce6attachEi>

000d5d2c <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d5d2c:	b538      	push	{r3, r4, r5, lr}
   d5d2e:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d5d30:	79c0      	ldrb	r0, [r0, #7]
   d5d32:	f001 f8cb 	bl	d6ecc <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d5d36:	79a3      	ldrb	r3, [r4, #6]
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d5d38:	1c05      	adds	r5, r0, #0
    state &= ~_BV(STATE_CHANGED);
   d5d3a:	f023 0208 	bic.w	r2, r3, #8
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d5d3e:	bf18      	it	ne
   d5d40:	2501      	movne	r5, #1
    state &= ~_BV(STATE_CHANGED);

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d5d42:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d5d46:	429d      	cmp	r5, r3
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
    state &= ~_BV(STATE_CHANGED);
   d5d48:	71a2      	strb	r2, [r4, #6]

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d5d4a:	d006      	beq.n	d5d5a <_ZN8Debounce6updateEv+0x2e>
   d5d4c:	f000 f8bc 	bl	d5ec8 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d5d50:	79a3      	ldrb	r3, [r4, #6]
    bool currentState = digitalRead(pin);
    state &= ~_BV(STATE_CHANGED);

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
        previous_millis = millis();
   d5d52:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d5d54:	f083 0302 	eor.w	r3, r3, #2
   d5d58:	e013      	b.n	d5d82 <_ZN8Debounce6updateEv+0x56>
   d5d5a:	f000 f8b5 	bl	d5ec8 <HAL_Timer_Get_Milli_Seconds>
    } else
        if ( millis() - previous_millis >= interval_millis ) {
   d5d5e:	6823      	ldr	r3, [r4, #0]
   d5d60:	1ac0      	subs	r0, r0, r3
   d5d62:	88a3      	ldrh	r3, [r4, #4]
   d5d64:	4298      	cmp	r0, r3
   d5d66:	d30d      	bcc.n	d5d84 <_ZN8Debounce6updateEv+0x58>
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d5d68:	79a3      	ldrb	r3, [r4, #6]
   d5d6a:	f003 0301 	and.w	r3, r3, #1
   d5d6e:	429d      	cmp	r5, r3
   d5d70:	d008      	beq.n	d5d84 <_ZN8Debounce6updateEv+0x58>
   d5d72:	f000 f8a9 	bl	d5ec8 <HAL_Timer_Get_Milli_Seconds>
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d5d76:	79a3      	ldrb	r3, [r4, #6]
    } else
        if ( millis() - previous_millis >= interval_millis ) {
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
   d5d78:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d5d7a:	f083 0301 	eor.w	r3, r3, #1
   d5d7e:	f043 0308 	orr.w	r3, r3, #8
   d5d82:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d5d84:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d5d86:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d5d8a:	bd38      	pop	{r3, r4, r5, pc}

000d5d8c <_GLOBAL__sub_I__ZN8DebounceC2Ev>:
   d5d8c:	f000 b8a4 	b.w	d5ed8 <HAL_Pin_Map>

000d5d90 <_ZN16OledWingAdafruitD1Ev>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {

}
   d5d90:	4770      	bx	lr

000d5d92 <_ZN16OledWingAdafruitD0Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d5d92:	b510      	push	{r4, lr}

}
   d5d94:	2150      	movs	r1, #80	; 0x50


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d5d96:	4604      	mov	r4, r0

}
   d5d98:	f001 f8f3 	bl	d6f82 <_ZdlPvj>
   d5d9c:	4620      	mov	r0, r4
   d5d9e:	bd10      	pop	{r4, pc}

000d5da0 <_ZN16OledWingAdafruitC1Ei>:
#include "oled-wing-adafruit.h"


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d5da0:	b538      	push	{r3, r4, r5, lr}
   d5da2:	2220      	movs	r2, #32
   d5da4:	4604      	mov	r4, r0
   d5da6:	460d      	mov	r5, r1
   d5da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5dac:	2180      	movs	r1, #128	; 0x80
   d5dae:	f7ff fd6f 	bl	d5890 <_ZN16Adafruit_SSD1306C1Ejja>
   d5db2:	4b08      	ldr	r3, [pc, #32]	; (d5dd4 <_ZN16OledWingAdafruitC1Ei+0x34>)
   d5db4:	6023      	str	r3, [r4, #0]
   d5db6:	6365      	str	r5, [r4, #52]	; 0x34
   d5db8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5dbc:	f7ff ff93 	bl	d5ce6 <_ZN8DebounceC1Ev>
   d5dc0:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d5dc4:	f7ff ff8f 	bl	d5ce6 <_ZN8DebounceC1Ev>
   d5dc8:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5dcc:	f7ff ff8b 	bl	d5ce6 <_ZN8DebounceC1Ev>

}
   d5dd0:	4620      	mov	r0, r4
   d5dd2:	bd38      	pop	{r3, r4, r5, pc}
   d5dd4:	000da7f8 	.word	0x000da7f8

000d5dd8 <_ZN16OledWingAdafruit5setupEv>:
OledWingAdafruit::~OledWingAdafruit() {

}

void OledWingAdafruit::setup() {
   d5dd8:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d5dda:	6b43      	ldr	r3, [r0, #52]	; 0x34
   d5ddc:	07d9      	lsls	r1, r3, #31
}
OledWingAdafruit::~OledWingAdafruit() {

}

void OledWingAdafruit::setup() {
   d5dde:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d5de0:	d504      	bpl.n	d5dec <_ZN16OledWingAdafruit5setupEv+0x14>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d5de2:	2202      	movs	r2, #2
   d5de4:	2104      	movs	r1, #4
   d5de6:	3038      	adds	r0, #56	; 0x38
   d5de8:	f7ff ff93 	bl	d5d12 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d5dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d5dee:	079a      	lsls	r2, r3, #30
   d5df0:	d505      	bpl.n	d5dfe <_ZN16OledWingAdafruit5setupEv+0x26>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d5df2:	2200      	movs	r2, #0
   d5df4:	2103      	movs	r1, #3
   d5df6:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d5dfa:	f7ff ff8a 	bl	d5d12 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d5dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d5e00:	075b      	lsls	r3, r3, #29
   d5e02:	d505      	bpl.n	d5e10 <_ZN16OledWingAdafruit5setupEv+0x38>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d5e04:	2202      	movs	r2, #2
   d5e06:	4611      	mov	r1, r2
   d5e08:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5e0c:	f7ff ff81 	bl	d5d12 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d5e10:	4620      	mov	r0, r4
   d5e12:	2301      	movs	r3, #1
   d5e14:	223c      	movs	r2, #60	; 0x3c
   d5e16:	2102      	movs	r1, #2
}
   d5e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (useButtons & USE_BUTTON_C) {
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d5e1c:	f7ff bdda 	b.w	d59d4 <_ZN16Adafruit_SSD13065beginEhhb>

000d5e20 <_ZN16OledWingAdafruit4loopEv>:
}

void OledWingAdafruit::loop() {
   d5e20:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d5e22:	6b43      	ldr	r3, [r0, #52]	; 0x34
   d5e24:	07d9      	lsls	r1, r3, #31

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
}

void OledWingAdafruit::loop() {
   d5e26:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d5e28:	d502      	bpl.n	d5e30 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d5e2a:	3038      	adds	r0, #56	; 0x38
   d5e2c:	f7ff ff7e 	bl	d5d2c <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d5e30:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d5e32:	079a      	lsls	r2, r3, #30
   d5e34:	d503      	bpl.n	d5e3e <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d5e36:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d5e3a:	f7ff ff77 	bl	d5d2c <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d5e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d5e40:	075b      	lsls	r3, r3, #29
   d5e42:	d505      	bpl.n	d5e50 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d5e44:	f104 0048 	add.w	r0, r4, #72	; 0x48
	}
}
   d5e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	if (useButtons & USE_BUTTON_B) {
		buttonB.update();
	}
	if (useButtons & USE_BUTTON_C) {
		buttonC.update();
   d5e4c:	f7ff bf6e 	b.w	d5d2c <_ZN8Debounce6updateEv>
   d5e50:	bd10      	pop	{r4, pc}

000d5e52 <_GLOBAL__sub_I__ZN16OledWingAdafruitC2Ei>:
   d5e52:	f000 b841 	b.w	d5ed8 <HAL_Pin_Map>
	...

000d5e58 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <os_thread_is_current+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	689b      	ldr	r3, [r3, #8]
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	00030248 	.word	0x00030248

000d5e68 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <os_thread_join+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	691b      	ldr	r3, [r3, #16]
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	00030248 	.word	0x00030248

000d5e78 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5e78:	b508      	push	{r3, lr}
   d5e7a:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <os_thread_cleanup+0xc>)
   d5e7c:	681b      	ldr	r3, [r3, #0]
   d5e7e:	695b      	ldr	r3, [r3, #20]
   d5e80:	9301      	str	r3, [sp, #4]
   d5e82:	bd08      	pop	{r3, pc}
   d5e84:	00030248 	.word	0x00030248

000d5e88 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <os_mutex_create+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	00030248 	.word	0x00030248

000d5e98 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <os_mutex_recursive_create+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	00030248 	.word	0x00030248

000d5ea8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <HAL_RNG_GetRandomNumber+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	685b      	ldr	r3, [r3, #4]
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	00030218 	.word	0x00030218

000d5eb8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5eb8:	b508      	push	{r3, lr}
   d5eba:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <HAL_Delay_Microseconds+0xc>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	68db      	ldr	r3, [r3, #12]
   d5ec0:	9301      	str	r3, [sp, #4]
   d5ec2:	bd08      	pop	{r3, pc}
   d5ec4:	00030218 	.word	0x00030218

000d5ec8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5ec8:	b508      	push	{r3, lr}
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5ecc:	681b      	ldr	r3, [r3, #0]
   d5ece:	695b      	ldr	r3, [r3, #20]
   d5ed0:	9301      	str	r3, [sp, #4]
   d5ed2:	bd08      	pop	{r3, pc}
   d5ed4:	00030218 	.word	0x00030218

000d5ed8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d5ed8:	b508      	push	{r3, lr}
   d5eda:	4b02      	ldr	r3, [pc, #8]	; (d5ee4 <HAL_Pin_Map+0xc>)
   d5edc:	681b      	ldr	r3, [r3, #0]
   d5ede:	681b      	ldr	r3, [r3, #0]
   d5ee0:	9301      	str	r3, [sp, #4]
   d5ee2:	bd08      	pop	{r3, pc}
   d5ee4:	0003022c 	.word	0x0003022c

000d5ee8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5ee8:	b508      	push	{r3, lr}
   d5eea:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <HAL_Pin_Mode+0xc>)
   d5eec:	681b      	ldr	r3, [r3, #0]
   d5eee:	689b      	ldr	r3, [r3, #8]
   d5ef0:	9301      	str	r3, [sp, #4]
   d5ef2:	bd08      	pop	{r3, pc}
   d5ef4:	0003022c 	.word	0x0003022c

000d5ef8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5ef8:	b508      	push	{r3, lr}
   d5efa:	4b02      	ldr	r3, [pc, #8]	; (d5f04 <HAL_Get_Pin_Mode+0xc>)
   d5efc:	681b      	ldr	r3, [r3, #0]
   d5efe:	68db      	ldr	r3, [r3, #12]
   d5f00:	9301      	str	r3, [sp, #4]
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	0003022c 	.word	0x0003022c

000d5f08 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5f08:	b508      	push	{r3, lr}
   d5f0a:	4b02      	ldr	r3, [pc, #8]	; (d5f14 <HAL_GPIO_Write+0xc>)
   d5f0c:	681b      	ldr	r3, [r3, #0]
   d5f0e:	691b      	ldr	r3, [r3, #16]
   d5f10:	9301      	str	r3, [sp, #4]
   d5f12:	bd08      	pop	{r3, pc}
   d5f14:	0003022c 	.word	0x0003022c

000d5f18 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5f18:	b508      	push	{r3, lr}
   d5f1a:	4b02      	ldr	r3, [pc, #8]	; (d5f24 <HAL_GPIO_Read+0xc>)
   d5f1c:	681b      	ldr	r3, [r3, #0]
   d5f1e:	695b      	ldr	r3, [r3, #20]
   d5f20:	9301      	str	r3, [sp, #4]
   d5f22:	bd08      	pop	{r3, pc}
   d5f24:	0003022c 	.word	0x0003022c

000d5f28 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d5f28:	b508      	push	{r3, lr}
   d5f2a:	4b02      	ldr	r3, [pc, #8]	; (d5f34 <HAL_Interrupts_Attach+0xc>)
   d5f2c:	681b      	ldr	r3, [r3, #0]
   d5f2e:	699b      	ldr	r3, [r3, #24]
   d5f30:	9301      	str	r3, [sp, #4]
   d5f32:	bd08      	pop	{r3, pc}
   d5f34:	0003022c 	.word	0x0003022c

000d5f38 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
   d5f38:	b508      	push	{r3, lr}
   d5f3a:	4b02      	ldr	r3, [pc, #8]	; (d5f44 <HAL_Interrupts_Detach+0xc>)
   d5f3c:	681b      	ldr	r3, [r3, #0]
   d5f3e:	69db      	ldr	r3, [r3, #28]
   d5f40:	9301      	str	r3, [sp, #4]
   d5f42:	bd08      	pop	{r3, pc}
   d5f44:	0003022c 	.word	0x0003022c

000d5f48 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d5f48:	b508      	push	{r3, lr}
   d5f4a:	4b02      	ldr	r3, [pc, #8]	; (d5f54 <HAL_Interrupts_Enable_All+0xc>)
   d5f4c:	681b      	ldr	r3, [r3, #0]
   d5f4e:	6a1b      	ldr	r3, [r3, #32]
   d5f50:	9301      	str	r3, [sp, #4]
   d5f52:	bd08      	pop	{r3, pc}
   d5f54:	0003022c 	.word	0x0003022c

000d5f58 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d5f58:	b508      	push	{r3, lr}
   d5f5a:	4b02      	ldr	r3, [pc, #8]	; (d5f64 <HAL_Interrupts_Disable_All+0xc>)
   d5f5c:	681b      	ldr	r3, [r3, #0]
   d5f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f60:	9301      	str	r3, [sp, #4]
   d5f62:	bd08      	pop	{r3, pc}
   d5f64:	0003022c 	.word	0x0003022c

000d5f68 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5f68:	b508      	push	{r3, lr}
   d5f6a:	4b02      	ldr	r3, [pc, #8]	; (d5f74 <HAL_I2C_Begin+0xc>)
   d5f6c:	681b      	ldr	r3, [r3, #0]
   d5f6e:	68db      	ldr	r3, [r3, #12]
   d5f70:	9301      	str	r3, [sp, #4]
   d5f72:	bd08      	pop	{r3, pc}
   d5f74:	00030228 	.word	0x00030228

000d5f78 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5f78:	b508      	push	{r3, lr}
   d5f7a:	4b02      	ldr	r3, [pc, #8]	; (d5f84 <HAL_I2C_Begin_Transmission+0xc>)
   d5f7c:	681b      	ldr	r3, [r3, #0]
   d5f7e:	699b      	ldr	r3, [r3, #24]
   d5f80:	9301      	str	r3, [sp, #4]
   d5f82:	bd08      	pop	{r3, pc}
   d5f84:	00030228 	.word	0x00030228

000d5f88 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5f88:	b508      	push	{r3, lr}
   d5f8a:	4b02      	ldr	r3, [pc, #8]	; (d5f94 <HAL_I2C_End_Transmission+0xc>)
   d5f8c:	681b      	ldr	r3, [r3, #0]
   d5f8e:	69db      	ldr	r3, [r3, #28]
   d5f90:	9301      	str	r3, [sp, #4]
   d5f92:	bd08      	pop	{r3, pc}
   d5f94:	00030228 	.word	0x00030228

000d5f98 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5f98:	b508      	push	{r3, lr}
   d5f9a:	4b02      	ldr	r3, [pc, #8]	; (d5fa4 <HAL_I2C_Write_Data+0xc>)
   d5f9c:	681b      	ldr	r3, [r3, #0]
   d5f9e:	6a1b      	ldr	r3, [r3, #32]
   d5fa0:	9301      	str	r3, [sp, #4]
   d5fa2:	bd08      	pop	{r3, pc}
   d5fa4:	00030228 	.word	0x00030228

000d5fa8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5fa8:	b508      	push	{r3, lr}
   d5faa:	4b02      	ldr	r3, [pc, #8]	; (d5fb4 <HAL_I2C_Available_Data+0xc>)
   d5fac:	681b      	ldr	r3, [r3, #0]
   d5fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5fb0:	9301      	str	r3, [sp, #4]
   d5fb2:	bd08      	pop	{r3, pc}
   d5fb4:	00030228 	.word	0x00030228

000d5fb8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5fb8:	b508      	push	{r3, lr}
   d5fba:	4b02      	ldr	r3, [pc, #8]	; (d5fc4 <HAL_I2C_Read_Data+0xc>)
   d5fbc:	681b      	ldr	r3, [r3, #0]
   d5fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5fc0:	9301      	str	r3, [sp, #4]
   d5fc2:	bd08      	pop	{r3, pc}
   d5fc4:	00030228 	.word	0x00030228

000d5fc8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5fc8:	b508      	push	{r3, lr}
   d5fca:	4b02      	ldr	r3, [pc, #8]	; (d5fd4 <HAL_I2C_Peek_Data+0xc>)
   d5fcc:	681b      	ldr	r3, [r3, #0]
   d5fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5fd0:	9301      	str	r3, [sp, #4]
   d5fd2:	bd08      	pop	{r3, pc}
   d5fd4:	00030228 	.word	0x00030228

000d5fd8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5fd8:	b508      	push	{r3, lr}
   d5fda:	4b02      	ldr	r3, [pc, #8]	; (d5fe4 <HAL_I2C_Flush_Data+0xc>)
   d5fdc:	681b      	ldr	r3, [r3, #0]
   d5fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5fe0:	9301      	str	r3, [sp, #4]
   d5fe2:	bd08      	pop	{r3, pc}
   d5fe4:	00030228 	.word	0x00030228

000d5fe8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5fe8:	b508      	push	{r3, lr}
   d5fea:	4b02      	ldr	r3, [pc, #8]	; (d5ff4 <HAL_I2C_Is_Enabled+0xc>)
   d5fec:	681b      	ldr	r3, [r3, #0]
   d5fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ff0:	9301      	str	r3, [sp, #4]
   d5ff2:	bd08      	pop	{r3, pc}
   d5ff4:	00030228 	.word	0x00030228

000d5ff8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5ff8:	b508      	push	{r3, lr}
   d5ffa:	4b02      	ldr	r3, [pc, #8]	; (d6004 <HAL_I2C_Init+0xc>)
   d5ffc:	681b      	ldr	r3, [r3, #0]
   d5ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6000:	9301      	str	r3, [sp, #4]
   d6002:	bd08      	pop	{r3, pc}
   d6004:	00030228 	.word	0x00030228

000d6008 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6008:	b508      	push	{r3, lr}
   d600a:	4b02      	ldr	r3, [pc, #8]	; (d6014 <inet_inet_ntop+0xc>)
   d600c:	681b      	ldr	r3, [r3, #0]
   d600e:	695b      	ldr	r3, [r3, #20]
   d6010:	9301      	str	r3, [sp, #4]
   d6012:	bd08      	pop	{r3, pc}
   d6014:	00030264 	.word	0x00030264

000d6018 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6018:	b508      	push	{r3, lr}
   d601a:	4b02      	ldr	r3, [pc, #8]	; (d6024 <netdb_freeaddrinfo+0xc>)
   d601c:	681b      	ldr	r3, [r3, #0]
   d601e:	689b      	ldr	r3, [r3, #8]
   d6020:	9301      	str	r3, [sp, #4]
   d6022:	bd08      	pop	{r3, pc}
   d6024:	00030268 	.word	0x00030268

000d6028 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6028:	b508      	push	{r3, lr}
   d602a:	4b02      	ldr	r3, [pc, #8]	; (d6034 <netdb_getaddrinfo+0xc>)
   d602c:	681b      	ldr	r3, [r3, #0]
   d602e:	68db      	ldr	r3, [r3, #12]
   d6030:	9301      	str	r3, [sp, #4]
   d6032:	bd08      	pop	{r3, pc}
   d6034:	00030268 	.word	0x00030268

000d6038 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6038:	b508      	push	{r3, lr}
   d603a:	4b02      	ldr	r3, [pc, #8]	; (d6044 <HAL_SPI_Begin+0xc>)
   d603c:	681b      	ldr	r3, [r3, #0]
   d603e:	681b      	ldr	r3, [r3, #0]
   d6040:	9301      	str	r3, [sp, #4]
   d6042:	bd08      	pop	{r3, pc}
   d6044:	00030230 	.word	0x00030230

000d6048 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d6048:	b508      	push	{r3, lr}
   d604a:	4b02      	ldr	r3, [pc, #8]	; (d6054 <HAL_SPI_Set_Clock_Divider+0xc>)
   d604c:	681b      	ldr	r3, [r3, #0]
   d604e:	691b      	ldr	r3, [r3, #16]
   d6050:	9301      	str	r3, [sp, #4]
   d6052:	bd08      	pop	{r3, pc}
   d6054:	00030230 	.word	0x00030230

000d6058 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6058:	b508      	push	{r3, lr}
   d605a:	4b02      	ldr	r3, [pc, #8]	; (d6064 <HAL_SPI_Send_Receive_Data+0xc>)
   d605c:	681b      	ldr	r3, [r3, #0]
   d605e:	695b      	ldr	r3, [r3, #20]
   d6060:	9301      	str	r3, [sp, #4]
   d6062:	bd08      	pop	{r3, pc}
   d6064:	00030230 	.word	0x00030230

000d6068 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6068:	b508      	push	{r3, lr}
   d606a:	4b02      	ldr	r3, [pc, #8]	; (d6074 <HAL_SPI_Init+0xc>)
   d606c:	681b      	ldr	r3, [r3, #0]
   d606e:	69db      	ldr	r3, [r3, #28]
   d6070:	9301      	str	r3, [sp, #4]
   d6072:	bd08      	pop	{r3, pc}
   d6074:	00030230 	.word	0x00030230

000d6078 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6078:	b508      	push	{r3, lr}
   d607a:	4b02      	ldr	r3, [pc, #8]	; (d6084 <HAL_SPI_Is_Enabled+0xc>)
   d607c:	681b      	ldr	r3, [r3, #0]
   d607e:	6a1b      	ldr	r3, [r3, #32]
   d6080:	9301      	str	r3, [sp, #4]
   d6082:	bd08      	pop	{r3, pc}
   d6084:	00030230 	.word	0x00030230

000d6088 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6088:	b508      	push	{r3, lr}
   d608a:	4b02      	ldr	r3, [pc, #8]	; (d6094 <HAL_SPI_Info+0xc>)
   d608c:	681b      	ldr	r3, [r3, #0]
   d608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6090:	9301      	str	r3, [sp, #4]
   d6092:	bd08      	pop	{r3, pc}
   d6094:	00030230 	.word	0x00030230

000d6098 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6098:	b508      	push	{r3, lr}
   d609a:	4b02      	ldr	r3, [pc, #8]	; (d60a4 <HAL_USART_Init+0xc>)
   d609c:	681b      	ldr	r3, [r3, #0]
   d609e:	681b      	ldr	r3, [r3, #0]
   d60a0:	9301      	str	r3, [sp, #4]
   d60a2:	bd08      	pop	{r3, pc}
   d60a4:	0003023c 	.word	0x0003023c

000d60a8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d60a8:	b508      	push	{r3, lr}
   d60aa:	4b02      	ldr	r3, [pc, #8]	; (d60b4 <HAL_USART_Write_Data+0xc>)
   d60ac:	681b      	ldr	r3, [r3, #0]
   d60ae:	68db      	ldr	r3, [r3, #12]
   d60b0:	9301      	str	r3, [sp, #4]
   d60b2:	bd08      	pop	{r3, pc}
   d60b4:	0003023c 	.word	0x0003023c

000d60b8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d60b8:	b508      	push	{r3, lr}
   d60ba:	4b02      	ldr	r3, [pc, #8]	; (d60c4 <HAL_USART_Available_Data+0xc>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	691b      	ldr	r3, [r3, #16]
   d60c0:	9301      	str	r3, [sp, #4]
   d60c2:	bd08      	pop	{r3, pc}
   d60c4:	0003023c 	.word	0x0003023c

000d60c8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d60c8:	b508      	push	{r3, lr}
   d60ca:	4b02      	ldr	r3, [pc, #8]	; (d60d4 <HAL_USART_Read_Data+0xc>)
   d60cc:	681b      	ldr	r3, [r3, #0]
   d60ce:	695b      	ldr	r3, [r3, #20]
   d60d0:	9301      	str	r3, [sp, #4]
   d60d2:	bd08      	pop	{r3, pc}
   d60d4:	0003023c 	.word	0x0003023c

000d60d8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d60d8:	b508      	push	{r3, lr}
   d60da:	4b02      	ldr	r3, [pc, #8]	; (d60e4 <HAL_USART_Peek_Data+0xc>)
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	699b      	ldr	r3, [r3, #24]
   d60e0:	9301      	str	r3, [sp, #4]
   d60e2:	bd08      	pop	{r3, pc}
   d60e4:	0003023c 	.word	0x0003023c

000d60e8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d60e8:	b508      	push	{r3, lr}
   d60ea:	4b02      	ldr	r3, [pc, #8]	; (d60f4 <HAL_USART_Flush_Data+0xc>)
   d60ec:	681b      	ldr	r3, [r3, #0]
   d60ee:	69db      	ldr	r3, [r3, #28]
   d60f0:	9301      	str	r3, [sp, #4]
   d60f2:	bd08      	pop	{r3, pc}
   d60f4:	0003023c 	.word	0x0003023c

000d60f8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d60f8:	b508      	push	{r3, lr}
   d60fa:	4b02      	ldr	r3, [pc, #8]	; (d6104 <HAL_USART_Is_Enabled+0xc>)
   d60fc:	681b      	ldr	r3, [r3, #0]
   d60fe:	6a1b      	ldr	r3, [r3, #32]
   d6100:	9301      	str	r3, [sp, #4]
   d6102:	bd08      	pop	{r3, pc}
   d6104:	0003023c 	.word	0x0003023c

000d6108 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6108:	b508      	push	{r3, lr}
   d610a:	4b02      	ldr	r3, [pc, #8]	; (d6114 <HAL_USART_Available_Data_For_Write+0xc>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6110:	9301      	str	r3, [sp, #4]
   d6112:	bd08      	pop	{r3, pc}
   d6114:	0003023c 	.word	0x0003023c

000d6118 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <HAL_USB_USART_Init+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	681b      	ldr	r3, [r3, #0]
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	0003024c 	.word	0x0003024c

000d6128 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <HAL_USB_USART_Begin+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	685b      	ldr	r3, [r3, #4]
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	0003024c 	.word	0x0003024c

000d6138 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <HAL_USB_USART_Available_Data+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	691b      	ldr	r3, [r3, #16]
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	0003024c 	.word	0x0003024c

000d6148 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b02      	ldr	r3, [pc, #8]	; (d6154 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	695b      	ldr	r3, [r3, #20]
   d6150:	9301      	str	r3, [sp, #4]
   d6152:	bd08      	pop	{r3, pc}
   d6154:	0003024c 	.word	0x0003024c

000d6158 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6158:	b508      	push	{r3, lr}
   d615a:	4b02      	ldr	r3, [pc, #8]	; (d6164 <HAL_USB_USART_Receive_Data+0xc>)
   d615c:	681b      	ldr	r3, [r3, #0]
   d615e:	699b      	ldr	r3, [r3, #24]
   d6160:	9301      	str	r3, [sp, #4]
   d6162:	bd08      	pop	{r3, pc}
   d6164:	0003024c 	.word	0x0003024c

000d6168 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6168:	b508      	push	{r3, lr}
   d616a:	4b02      	ldr	r3, [pc, #8]	; (d6174 <HAL_USB_USART_Send_Data+0xc>)
   d616c:	681b      	ldr	r3, [r3, #0]
   d616e:	69db      	ldr	r3, [r3, #28]
   d6170:	9301      	str	r3, [sp, #4]
   d6172:	bd08      	pop	{r3, pc}
   d6174:	0003024c 	.word	0x0003024c

000d6178 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b02      	ldr	r3, [pc, #8]	; (d6184 <HAL_USB_USART_Flush_Data+0xc>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	6a1b      	ldr	r3, [r3, #32]
   d6180:	9301      	str	r3, [sp, #4]
   d6182:	bd08      	pop	{r3, pc}
   d6184:	0003024c 	.word	0x0003024c

000d6188 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6188:	b508      	push	{r3, lr}
   d618a:	4b02      	ldr	r3, [pc, #8]	; (d6194 <panic_+0xc>)
   d618c:	681b      	ldr	r3, [r3, #0]
   d618e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6190:	9301      	str	r3, [sp, #4]
   d6192:	bd08      	pop	{r3, pc}
   d6194:	00030260 	.word	0x00030260

000d6198 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6198:	b508      	push	{r3, lr}
   d619a:	4b02      	ldr	r3, [pc, #8]	; (d61a4 <set_system_mode+0xc>)
   d619c:	681b      	ldr	r3, [r3, #0]
   d619e:	685b      	ldr	r3, [r3, #4]
   d61a0:	9301      	str	r3, [sp, #4]
   d61a2:	bd08      	pop	{r3, pc}
   d61a4:	00030220 	.word	0x00030220

000d61a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d61a8:	b508      	push	{r3, lr}
   d61aa:	4b02      	ldr	r3, [pc, #8]	; (d61b4 <system_delay_ms+0xc>)
   d61ac:	681b      	ldr	r3, [r3, #0]
   d61ae:	695b      	ldr	r3, [r3, #20]
   d61b0:	9301      	str	r3, [sp, #4]
   d61b2:	bd08      	pop	{r3, pc}
   d61b4:	00030220 	.word	0x00030220

000d61b8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d61b8:	b508      	push	{r3, lr}
   d61ba:	4b03      	ldr	r3, [pc, #12]	; (d61c8 <system_ctrl_set_app_request_handler+0x10>)
   d61bc:	681b      	ldr	r3, [r3, #0]
   d61be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d61c2:	9301      	str	r3, [sp, #4]
   d61c4:	bd08      	pop	{r3, pc}
   d61c6:	0000      	.short	0x0000
   d61c8:	00030220 	.word	0x00030220

000d61cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b03      	ldr	r3, [pc, #12]	; (d61dc <system_ctrl_set_result+0x10>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d61d6:	9301      	str	r3, [sp, #4]
   d61d8:	bd08      	pop	{r3, pc}
   d61da:	0000      	.short	0x0000
   d61dc:	00030220 	.word	0x00030220

000d61e0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d61e0:	b508      	push	{r3, lr}
   d61e2:	4b02      	ldr	r3, [pc, #8]	; (d61ec <spark_variable+0xc>)
   d61e4:	681b      	ldr	r3, [r3, #0]
   d61e6:	681b      	ldr	r3, [r3, #0]
   d61e8:	9301      	str	r3, [sp, #4]
   d61ea:	bd08      	pop	{r3, pc}
   d61ec:	00030244 	.word	0x00030244

000d61f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d61f0:	b508      	push	{r3, lr}
   d61f2:	4b02      	ldr	r3, [pc, #8]	; (d61fc <spark_set_random_seed_from_cloud_handler+0xc>)
   d61f4:	681b      	ldr	r3, [r3, #0]
   d61f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	bd08      	pop	{r3, pc}
   d61fc:	00030244 	.word	0x00030244

000d6200 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6200:	b508      	push	{r3, lr}
   d6202:	4b02      	ldr	r3, [pc, #8]	; (d620c <network_connect+0xc>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	685b      	ldr	r3, [r3, #4]
   d6208:	9301      	str	r3, [sp, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	00030240 	.word	0x00030240

000d6210 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b02      	ldr	r3, [pc, #8]	; (d621c <network_connecting+0xc>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	689b      	ldr	r3, [r3, #8]
   d6218:	9301      	str	r3, [sp, #4]
   d621a:	bd08      	pop	{r3, pc}
   d621c:	00030240 	.word	0x00030240

000d6220 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6220:	b508      	push	{r3, lr}
   d6222:	4b02      	ldr	r3, [pc, #8]	; (d622c <network_disconnect+0xc>)
   d6224:	681b      	ldr	r3, [r3, #0]
   d6226:	68db      	ldr	r3, [r3, #12]
   d6228:	9301      	str	r3, [sp, #4]
   d622a:	bd08      	pop	{r3, pc}
   d622c:	00030240 	.word	0x00030240

000d6230 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6230:	b508      	push	{r3, lr}
   d6232:	4b02      	ldr	r3, [pc, #8]	; (d623c <network_ready+0xc>)
   d6234:	681b      	ldr	r3, [r3, #0]
   d6236:	691b      	ldr	r3, [r3, #16]
   d6238:	9301      	str	r3, [sp, #4]
   d623a:	bd08      	pop	{r3, pc}
   d623c:	00030240 	.word	0x00030240

000d6240 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6240:	b508      	push	{r3, lr}
   d6242:	4b02      	ldr	r3, [pc, #8]	; (d624c <network_on+0xc>)
   d6244:	681b      	ldr	r3, [r3, #0]
   d6246:	695b      	ldr	r3, [r3, #20]
   d6248:	9301      	str	r3, [sp, #4]
   d624a:	bd08      	pop	{r3, pc}
   d624c:	00030240 	.word	0x00030240

000d6250 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6250:	b508      	push	{r3, lr}
   d6252:	4b02      	ldr	r3, [pc, #8]	; (d625c <network_off+0xc>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	699b      	ldr	r3, [r3, #24]
   d6258:	9301      	str	r3, [sp, #4]
   d625a:	bd08      	pop	{r3, pc}
   d625c:	00030240 	.word	0x00030240

000d6260 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b02      	ldr	r3, [pc, #8]	; (d626c <network_listen+0xc>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	69db      	ldr	r3, [r3, #28]
   d6268:	9301      	str	r3, [sp, #4]
   d626a:	bd08      	pop	{r3, pc}
   d626c:	00030240 	.word	0x00030240

000d6270 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6270:	b508      	push	{r3, lr}
   d6272:	4b02      	ldr	r3, [pc, #8]	; (d627c <network_listening+0xc>)
   d6274:	681b      	ldr	r3, [r3, #0]
   d6276:	6a1b      	ldr	r3, [r3, #32]
   d6278:	9301      	str	r3, [sp, #4]
   d627a:	bd08      	pop	{r3, pc}
   d627c:	00030240 	.word	0x00030240

000d6280 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <network_set_listen_timeout+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	00030240 	.word	0x00030240

000d6290 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b02      	ldr	r3, [pc, #8]	; (d629c <network_get_listen_timeout+0xc>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6298:	9301      	str	r3, [sp, #4]
   d629a:	bd08      	pop	{r3, pc}
   d629c:	00030240 	.word	0x00030240

000d62a0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b02      	ldr	r3, [pc, #8]	; (d62ac <malloc+0xc>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	681b      	ldr	r3, [r3, #0]
   d62a8:	9301      	str	r3, [sp, #4]
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	0003021c 	.word	0x0003021c

000d62b0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <free+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	685b      	ldr	r3, [r3, #4]
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	0003021c 	.word	0x0003021c

000d62c0 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d62c0:	b508      	push	{r3, lr}
   d62c2:	4b02      	ldr	r3, [pc, #8]	; (d62cc <sprintf+0xc>)
   d62c4:	681b      	ldr	r3, [r3, #0]
   d62c6:	68db      	ldr	r3, [r3, #12]
   d62c8:	9301      	str	r3, [sp, #4]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	0003021c 	.word	0x0003021c

000d62d0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b02      	ldr	r3, [pc, #8]	; (d62dc <abort+0xc>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d62d8:	9301      	str	r3, [sp, #4]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	0003021c 	.word	0x0003021c

000d62e0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d62e0:	2100      	movs	r1, #0
   d62e2:	f7ff bf61 	b.w	d61a8 <system_delay_ms>

000d62e6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d62e6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d62e8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d62ea:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d62ec:	b113      	cbz	r3, d62f4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d62ee:	2203      	movs	r2, #3
   d62f0:	4601      	mov	r1, r0
   d62f2:	4798      	blx	r3
    }
   d62f4:	4620      	mov	r0, r4
   d62f6:	bd10      	pop	{r4, pc}

000d62f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d62f8:	2200      	movs	r2, #0
   d62fa:	4611      	mov	r1, r2
   d62fc:	6840      	ldr	r0, [r0, #4]
   d62fe:	f7ff bfb7 	b.w	d6270 <network_listening>

000d6302 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6302:	2200      	movs	r2, #0
   d6304:	4611      	mov	r1, r2
   d6306:	6840      	ldr	r0, [r0, #4]
   d6308:	f7ff bfc2 	b.w	d6290 <network_get_listen_timeout>

000d630c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d630c:	2200      	movs	r2, #0
   d630e:	6840      	ldr	r0, [r0, #4]
   d6310:	f7ff bfb6 	b.w	d6280 <network_set_listen_timeout>

000d6314 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6314:	2200      	movs	r2, #0
   d6316:	f081 0101 	eor.w	r1, r1, #1
   d631a:	6840      	ldr	r0, [r0, #4]
   d631c:	f7ff bfa0 	b.w	d6260 <network_listen>

000d6320 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6320:	2300      	movs	r3, #0
   d6322:	461a      	mov	r2, r3
   d6324:	4619      	mov	r1, r3
   d6326:	6840      	ldr	r0, [r0, #4]
   d6328:	f7ff bf92 	b.w	d6250 <network_off>

000d632c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d632c:	2300      	movs	r3, #0
   d632e:	461a      	mov	r2, r3
   d6330:	4619      	mov	r1, r3
   d6332:	6840      	ldr	r0, [r0, #4]
   d6334:	f7ff bf84 	b.w	d6240 <network_on>

000d6338 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6338:	2200      	movs	r2, #0
   d633a:	4611      	mov	r1, r2
   d633c:	6840      	ldr	r0, [r0, #4]
   d633e:	f7ff bf77 	b.w	d6230 <network_ready>

000d6342 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6342:	2200      	movs	r2, #0
   d6344:	4611      	mov	r1, r2
   d6346:	6840      	ldr	r0, [r0, #4]
   d6348:	f7ff bf62 	b.w	d6210 <network_connecting>

000d634c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d634c:	2200      	movs	r2, #0
   d634e:	2102      	movs	r1, #2
   d6350:	6840      	ldr	r0, [r0, #4]
   d6352:	f7ff bf65 	b.w	d6220 <network_disconnect>

000d6356 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6356:	2300      	movs	r3, #0
   d6358:	461a      	mov	r2, r3
   d635a:	6840      	ldr	r0, [r0, #4]
   d635c:	f7ff bf50 	b.w	d6200 <network_connect>

000d6360 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6360:	4b02      	ldr	r3, [pc, #8]	; (d636c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6362:	2203      	movs	r2, #3
   d6364:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6366:	4a02      	ldr	r2, [pc, #8]	; (d6370 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6368:	601a      	str	r2, [r3, #0]
   d636a:	4770      	bx	lr
   d636c:	2003e340 	.word	0x2003e340
   d6370:	000da850 	.word	0x000da850

000d6374 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6374:	4770      	bx	lr

000d6376 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6378:	4606      	mov	r6, r0
   d637a:	4615      	mov	r5, r2
   d637c:	460c      	mov	r4, r1
   d637e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6380:	42bc      	cmp	r4, r7
   d6382:	d006      	beq.n	d6392 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6384:	6833      	ldr	r3, [r6, #0]
   d6386:	f814 1b01 	ldrb.w	r1, [r4], #1
   d638a:	689b      	ldr	r3, [r3, #8]
   d638c:	4630      	mov	r0, r6
   d638e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6390:	e7f6      	b.n	d6380 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6392:	4628      	mov	r0, r5
   d6394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6396 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6396:	2200      	movs	r2, #0
   d6398:	7c00      	ldrb	r0, [r0, #16]
   d639a:	f7ff bdfd 	b.w	d5f98 <HAL_I2C_Write_Data>

000d639e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d639e:	2100      	movs	r1, #0
   d63a0:	7c00      	ldrb	r0, [r0, #16]
   d63a2:	f7ff be01 	b.w	d5fa8 <HAL_I2C_Available_Data>

000d63a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d63a6:	2100      	movs	r1, #0
   d63a8:	7c00      	ldrb	r0, [r0, #16]
   d63aa:	f7ff be05 	b.w	d5fb8 <HAL_I2C_Read_Data>

000d63ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d63ae:	2100      	movs	r1, #0
   d63b0:	7c00      	ldrb	r0, [r0, #16]
   d63b2:	f7ff be09 	b.w	d5fc8 <HAL_I2C_Peek_Data>

000d63b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d63b6:	2100      	movs	r1, #0
   d63b8:	7c00      	ldrb	r0, [r0, #16]
   d63ba:	f7ff be0d 	b.w	d5fd8 <HAL_I2C_Flush_Data>

000d63be <_ZN7TwoWireD0Ev>:
   d63be:	b510      	push	{r4, lr}
   d63c0:	2114      	movs	r1, #20
   d63c2:	4604      	mov	r4, r0
   d63c4:	f000 fddd 	bl	d6f82 <_ZdlPvj>
   d63c8:	4620      	mov	r0, r4
   d63ca:	bd10      	pop	{r4, pc}

000d63cc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d63cc:	b510      	push	{r4, lr}
   d63ce:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d63d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d63d4:	4608      	mov	r0, r1
   d63d6:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d63d8:	2100      	movs	r1, #0
   d63da:	4b04      	ldr	r3, [pc, #16]	; (d63ec <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d63dc:	7420      	strb	r0, [r4, #16]
   d63de:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d63e0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d63e2:	f7ff fe09 	bl	d5ff8 <HAL_I2C_Init>

}
   d63e6:	4620      	mov	r0, r4
   d63e8:	bd10      	pop	{r4, pc}
   d63ea:	bf00      	nop
   d63ec:	000da884 	.word	0x000da884

000d63f0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d63f0:	2300      	movs	r3, #0
   d63f2:	461a      	mov	r2, r3
   d63f4:	4619      	mov	r1, r3
   d63f6:	7c00      	ldrb	r0, [r0, #16]
   d63f8:	f7ff bdb6 	b.w	d5f68 <HAL_I2C_Begin>

000d63fc <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d63fc:	2200      	movs	r2, #0
   d63fe:	7c00      	ldrb	r0, [r0, #16]
   d6400:	f7ff bdba 	b.w	d5f78 <HAL_I2C_Begin_Transmission>

000d6404 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6404:	b2c9      	uxtb	r1, r1
   d6406:	f7ff bff9 	b.w	d63fc <_ZN7TwoWire17beginTransmissionEh>

000d640a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d640a:	2200      	movs	r2, #0
   d640c:	7c00      	ldrb	r0, [r0, #16]
   d640e:	f7ff bdbb 	b.w	d5f88 <HAL_I2C_End_Transmission>

000d6412 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6412:	2101      	movs	r1, #1
   d6414:	f7ff bff9 	b.w	d640a <_ZN7TwoWire15endTransmissionEh>

000d6418 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6418:	2100      	movs	r1, #0
   d641a:	7c00      	ldrb	r0, [r0, #16]
   d641c:	f7ff bde4 	b.w	d5fe8 <HAL_I2C_Is_Enabled>

000d6420 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6420:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   d6422:	b510      	push	{r4, lr}
   d6424:	b90a      	cbnz	r2, d642a <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   d6426:	f000 fdae 	bl	d6f86 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d642a:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   d642c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6430:	4718      	bx	r3

000d6432 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d6432:	f7ff bd91 	b.w	d5f58 <HAL_Interrupts_Disable_All>

000d6436 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d6436:	f7ff bd87 	b.w	d5f48 <HAL_Interrupts_Enable_All>

000d643a <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d643a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d643c:	2300      	movs	r3, #0
   d643e:	6083      	str	r3, [r0, #8]
   d6440:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6442:	4604      	mov	r4, r0
   d6444:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6446:	b12b      	cbz	r3, d6454 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6448:	2202      	movs	r2, #2
   d644a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d644c:	68eb      	ldr	r3, [r5, #12]
   d644e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6450:	68ab      	ldr	r3, [r5, #8]
   d6452:	60a3      	str	r3, [r4, #8]
	}
    }
   d6454:	4620      	mov	r0, r4
   d6456:	bd38      	pop	{r3, r4, r5, pc}

000d6458 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   d6458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   d645a:	4b0d      	ldr	r3, [pc, #52]	; (d6490 <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
   d645c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   d6460:	4606      	mov	r6, r0
   d6462:	460f      	mov	r7, r1
   d6464:	461c      	mov	r4, r3
    delete handlers[pin];
   d6466:	b135      	cbz	r5, d6476 <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6468:	4628      	mov	r0, r5
   d646a:	f7ff ff3c 	bl	d62e6 <_ZNSt14_Function_baseD1Ev>
   d646e:	2110      	movs	r1, #16
   d6470:	4628      	mov	r0, r5
   d6472:	f000 fd86 	bl	d6f82 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   d6476:	2010      	movs	r0, #16
   d6478:	f7fd fe0d 	bl	d4096 <_Znwj>
   d647c:	4605      	mov	r5, r0
   d647e:	b110      	cbz	r0, d6486 <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
   d6480:	4639      	mov	r1, r7
   d6482:	f7ff ffda 	bl	d643a <_ZNSt8functionIFvvEEC1ERKS1_>
   d6486:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
   d648a:	4628      	mov	r0, r5
   d648c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d648e:	bf00      	nop
   d6490:	2003e348 	.word	0x2003e348

000d6494 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6494:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6496:	460c      	mov	r4, r1
   d6498:	b085      	sub	sp, #20
   d649a:	4605      	mov	r5, r0
   d649c:	4617      	mov	r7, r2
   d649e:	461e      	mov	r6, r3
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
   d64a0:	f7ff fd4a 	bl	d5f38 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   d64a4:	4621      	mov	r1, r4
   d64a6:	4628      	mov	r0, r5
   d64a8:	f7ff ffd6 	bl	d6458 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   d64ac:	4604      	mov	r4, r0
   d64ae:	b1b0      	cbz	r0, d64de <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x4a>
        HAL_InterruptExtraConfiguration extra = {0};
   d64b0:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d64b2:	2304      	movs	r3, #4
  if (priority >= 0) {
   d64b4:	428e      	cmp	r6, r1
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
   d64b6:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d64b8:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d64bc:	bfa5      	ittet	ge
   d64be:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d64c2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d64c6:	460b      	movlt	r3, r1
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d64c8:	ab03      	addge	r3, sp, #12
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
   d64ca:	9300      	str	r3, [sp, #0]
   d64cc:	4602      	mov	r2, r0
   d64ce:	463b      	mov	r3, r7
   d64d0:	4905      	ldr	r1, [pc, #20]	; (d64e8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d64d2:	bfa8      	it	ge
   d64d4:	f88d 600d 	strbge.w	r6, [sp, #13]
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
   d64d8:	4628      	mov	r0, r5
   d64da:	f7ff fd25 	bl	d5f28 <HAL_Interrupts_Attach>
    }
    return handler!=NULL;
}
   d64de:	1c20      	adds	r0, r4, #0
   d64e0:	bf18      	it	ne
   d64e2:	2001      	movne	r0, #1
   d64e4:	b005      	add	sp, #20
   d64e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d64e8:	000d6421 	.word	0x000d6421

000d64ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d64ec:	4770      	bx	lr

000d64ee <_ZN9IPAddressD0Ev>:
   d64ee:	b510      	push	{r4, lr}
   d64f0:	2118      	movs	r1, #24
   d64f2:	4604      	mov	r4, r0
   d64f4:	f000 fd45 	bl	d6f82 <_ZdlPvj>
   d64f8:	4620      	mov	r0, r4
   d64fa:	bd10      	pop	{r4, pc}

000d64fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d64fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d64fe:	7d03      	ldrb	r3, [r0, #20]
   d6500:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6502:	b08d      	sub	sp, #52	; 0x34
   d6504:	460e      	mov	r6, r1
   d6506:	f100 0704 	add.w	r7, r0, #4
   d650a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d650e:	d002      	beq.n	d6516 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6510:	f100 0508 	add.w	r5, r0, #8
   d6514:	e018      	b.n	d6548 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6516:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6518:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d651a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d651e:	232f      	movs	r3, #47	; 0x2f
   d6520:	462a      	mov	r2, r5
   d6522:	200a      	movs	r0, #10
   d6524:	f7ff fd70 	bl	d6008 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6528:	4628      	mov	r0, r5
   d652a:	f001 fb3b 	bl	d7ba4 <strlen>
   d652e:	6833      	ldr	r3, [r6, #0]
   d6530:	4602      	mov	r2, r0
   d6532:	68db      	ldr	r3, [r3, #12]
   d6534:	4629      	mov	r1, r5
   d6536:	4630      	mov	r0, r6
   d6538:	4798      	blx	r3
   d653a:	e00f      	b.n	d655c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d653c:	b124      	cbz	r4, d6548 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d653e:	212e      	movs	r1, #46	; 0x2e
   d6540:	4630      	mov	r0, r6
   d6542:	f000 f9cb 	bl	d68dc <_ZN5Print5printEc>
   d6546:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6548:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d654c:	220a      	movs	r2, #10
   d654e:	4630      	mov	r0, r6
   d6550:	f000 fa0a 	bl	d6968 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6554:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6556:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6558:	d1f0      	bne.n	d653c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d655a:	4620      	mov	r0, r4
    }
    return n;
}
   d655c:	b00d      	add	sp, #52	; 0x34
   d655e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6560 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6560:	b510      	push	{r4, lr}
   d6562:	4b05      	ldr	r3, [pc, #20]	; (d6578 <_ZN9IPAddressC1Ev+0x18>)
   d6564:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6566:	2211      	movs	r2, #17
   d6568:	f840 3b04 	str.w	r3, [r0], #4
   d656c:	2100      	movs	r1, #0
   d656e:	f001 fae8 	bl	d7b42 <memset>
{
    clear();
}
   d6572:	4620      	mov	r0, r4
   d6574:	bd10      	pop	{r4, pc}
   d6576:	bf00      	nop
   d6578:	000da8ac 	.word	0x000da8ac

000d657c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d657c:	4603      	mov	r3, r0
   d657e:	4a07      	ldr	r2, [pc, #28]	; (d659c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6580:	b510      	push	{r4, lr}
   d6582:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6586:	f101 0210 	add.w	r2, r1, #16
   d658a:	f851 4b04 	ldr.w	r4, [r1], #4
   d658e:	f843 4b04 	str.w	r4, [r3], #4
   d6592:	4291      	cmp	r1, r2
   d6594:	d1f9      	bne.n	d658a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6596:	780a      	ldrb	r2, [r1, #0]
   d6598:	701a      	strb	r2, [r3, #0]
}
   d659a:	bd10      	pop	{r4, pc}
   d659c:	000da8ac 	.word	0x000da8ac

000d65a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d65a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d65a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d65a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d65aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d65ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d65b2:	2304      	movs	r3, #4
   d65b4:	6041      	str	r1, [r0, #4]
   d65b6:	7503      	strb	r3, [r0, #20]
   d65b8:	bd10      	pop	{r4, pc}

000d65ba <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d65ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d65bc:	780d      	ldrb	r5, [r1, #0]
   d65be:	788b      	ldrb	r3, [r1, #2]
   d65c0:	784a      	ldrb	r2, [r1, #1]
   d65c2:	78c9      	ldrb	r1, [r1, #3]
   d65c4:	9100      	str	r1, [sp, #0]
   d65c6:	4629      	mov	r1, r5
   d65c8:	f7ff ffea 	bl	d65a0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d65cc:	b003      	add	sp, #12
   d65ce:	bd30      	pop	{r4, r5, pc}

000d65d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d65d0:	4b01      	ldr	r3, [pc, #4]	; (d65d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d65d2:	4a02      	ldr	r2, [pc, #8]	; (d65dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d65d4:	601a      	str	r2, [r3, #0]
   d65d6:	4770      	bx	lr
   d65d8:	2003e3d8 	.word	0x2003e3d8
   d65dc:	000da96b 	.word	0x000da96b

000d65e0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d65e0:	2200      	movs	r2, #0
   d65e2:	4611      	mov	r1, r2
   d65e4:	6840      	ldr	r0, [r0, #4]
   d65e6:	f7ff be43 	b.w	d6270 <network_listening>

000d65ea <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d65ea:	2200      	movs	r2, #0
   d65ec:	4611      	mov	r1, r2
   d65ee:	6840      	ldr	r0, [r0, #4]
   d65f0:	f7ff be4e 	b.w	d6290 <network_get_listen_timeout>

000d65f4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d65f4:	2200      	movs	r2, #0
   d65f6:	6840      	ldr	r0, [r0, #4]
   d65f8:	f7ff be42 	b.w	d6280 <network_set_listen_timeout>

000d65fc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d65fc:	2200      	movs	r2, #0
   d65fe:	f081 0101 	eor.w	r1, r1, #1
   d6602:	6840      	ldr	r0, [r0, #4]
   d6604:	f7ff be2c 	b.w	d6260 <network_listen>

000d6608 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6608:	2300      	movs	r3, #0
   d660a:	461a      	mov	r2, r3
   d660c:	4619      	mov	r1, r3
   d660e:	6840      	ldr	r0, [r0, #4]
   d6610:	f7ff be1e 	b.w	d6250 <network_off>

000d6614 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6614:	2300      	movs	r3, #0
   d6616:	461a      	mov	r2, r3
   d6618:	4619      	mov	r1, r3
   d661a:	6840      	ldr	r0, [r0, #4]
   d661c:	f7ff be10 	b.w	d6240 <network_on>

000d6620 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6620:	2200      	movs	r2, #0
   d6622:	4611      	mov	r1, r2
   d6624:	6840      	ldr	r0, [r0, #4]
   d6626:	f7ff be03 	b.w	d6230 <network_ready>

000d662a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d662a:	2200      	movs	r2, #0
   d662c:	4611      	mov	r1, r2
   d662e:	6840      	ldr	r0, [r0, #4]
   d6630:	f7ff bdee 	b.w	d6210 <network_connecting>

000d6634 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6634:	2200      	movs	r2, #0
   d6636:	2102      	movs	r1, #2
   d6638:	6840      	ldr	r0, [r0, #4]
   d663a:	f7ff bdf1 	b.w	d6220 <network_disconnect>

000d663e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d663e:	2300      	movs	r3, #0
   d6640:	461a      	mov	r2, r3
   d6642:	6840      	ldr	r0, [r0, #4]
   d6644:	f7ff bddc 	b.w	d6200 <network_connect>

000d6648 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6648:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d664a:	4605      	mov	r5, r0
   d664c:	b188      	cbz	r0, d6672 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d664e:	6804      	ldr	r4, [r0, #0]
   d6650:	b14c      	cbz	r4, d6666 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6652:	68a3      	ldr	r3, [r4, #8]
   d6654:	b11b      	cbz	r3, d665e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6656:	2203      	movs	r2, #3
   d6658:	4621      	mov	r1, r4
   d665a:	4620      	mov	r0, r4
   d665c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d665e:	2110      	movs	r1, #16
   d6660:	4620      	mov	r0, r4
   d6662:	f000 fc8e 	bl	d6f82 <_ZdlPvj>
   d6666:	4628      	mov	r0, r5
   d6668:	2114      	movs	r1, #20
      }
   d666a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d666e:	f000 bc88 	b.w	d6f82 <_ZdlPvj>
   d6672:	bd38      	pop	{r3, r4, r5, pc}

000d6674 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d6674:	b110      	cbz	r0, d667c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d6676:	6803      	ldr	r3, [r0, #0]
   d6678:	685b      	ldr	r3, [r3, #4]
   d667a:	4718      	bx	r3
   d667c:	4770      	bx	lr

000d667e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d667e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6680:	6803      	ldr	r3, [r0, #0]
   d6682:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6684:	b1bb      	cbz	r3, d66b6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6686:	6858      	ldr	r0, [r3, #4]
   d6688:	f7ff fbe6 	bl	d5e58 <os_thread_is_current>
   d668c:	b978      	cbnz	r0, d66ae <_ZN6ThreadD1Ev+0x30>
   d668e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6690:	7c5a      	ldrb	r2, [r3, #17]
   d6692:	b912      	cbnz	r2, d669a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6694:	6858      	ldr	r0, [r3, #4]
   d6696:	f7ff fbe7 	bl	d5e68 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d669a:	6823      	ldr	r3, [r4, #0]
   d669c:	6858      	ldr	r0, [r3, #4]
   d669e:	f7ff fbeb 	bl	d5e78 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d66a2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d66a4:	2300      	movs	r3, #0
   d66a6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d66a8:	b128      	cbz	r0, d66b6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d66aa:	f7ff ffcd 	bl	d6648 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d66ae:	6820      	ldr	r0, [r4, #0]
   d66b0:	b108      	cbz	r0, d66b6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d66b2:	f7ff ffc9 	bl	d6648 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d66b6:	4620      	mov	r0, r4
   d66b8:	bd10      	pop	{r4, pc}
	...

000d66bc <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d66bc:	b538      	push	{r3, r4, r5, lr}
   d66be:	4b0c      	ldr	r3, [pc, #48]	; (d66f0 <_ZN5spark9MeshClassD1Ev+0x34>)
   d66c0:	6003      	str	r3, [r0, #0]
   d66c2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d66c4:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d66c8:	b108      	cbz	r0, d66ce <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d66ca:	f7fd fcea 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d66ce:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d66d2:	b135      	cbz	r5, d66e2 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d66d4:	4628      	mov	r0, r5
   d66d6:	f7ff ffd2 	bl	d667e <_ZN6ThreadD1Ev>
   d66da:	2104      	movs	r1, #4
   d66dc:	4628      	mov	r0, r5
   d66de:	f000 fc50 	bl	d6f82 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d66e2:	68a0      	ldr	r0, [r4, #8]
   d66e4:	b108      	cbz	r0, d66ea <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d66e6:	f7ff ffc5 	bl	d6674 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d66ea:	4620      	mov	r0, r4
   d66ec:	bd38      	pop	{r3, r4, r5, pc}
   d66ee:	bf00      	nop
   d66f0:	000da99c 	.word	0x000da99c

000d66f4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d66f4:	b538      	push	{r3, r4, r5, lr}
   d66f6:	4c0d      	ldr	r4, [pc, #52]	; (d672c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d66f8:	4b0d      	ldr	r3, [pc, #52]	; (d6730 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d66fa:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d66fc:	2500      	movs	r5, #0
   d66fe:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6700:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6704:	6063      	str	r3, [r4, #4]
   d6706:	60a5      	str	r5, [r4, #8]
   d6708:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d670c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6710:	f7ff fbc2 	bl	d5e98 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6714:	4b07      	ldr	r3, [pc, #28]	; (d6734 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d6716:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d671a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d671c:	4620      	mov	r0, r4
   d671e:	4a06      	ldr	r2, [pc, #24]	; (d6738 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d6720:	4906      	ldr	r1, [pc, #24]	; (d673c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d6722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6726:	f000 bc27 	b.w	d6f78 <__aeabi_atexit>
   d672a:	bf00      	nop
   d672c:	2003e3dc 	.word	0x2003e3dc
   d6730:	000da9d0 	.word	0x000da9d0
   d6734:	000da99c 	.word	0x000da99c
   d6738:	2003e290 	.word	0x2003e290
   d673c:	000d66bd 	.word	0x000d66bd

000d6740 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6740:	2300      	movs	r3, #0
   d6742:	461a      	mov	r2, r3
   d6744:	6840      	ldr	r0, [r0, #4]
   d6746:	f7ff bd5b 	b.w	d6200 <network_connect>

000d674a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d674a:	2200      	movs	r2, #0
   d674c:	2102      	movs	r1, #2
   d674e:	6840      	ldr	r0, [r0, #4]
   d6750:	f7ff bd66 	b.w	d6220 <network_disconnect>

000d6754 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6754:	2200      	movs	r2, #0
   d6756:	4611      	mov	r1, r2
   d6758:	6840      	ldr	r0, [r0, #4]
   d675a:	f7ff bd59 	b.w	d6210 <network_connecting>

000d675e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d675e:	2200      	movs	r2, #0
   d6760:	4611      	mov	r1, r2
   d6762:	6840      	ldr	r0, [r0, #4]
   d6764:	f7ff bd64 	b.w	d6230 <network_ready>

000d6768 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6768:	2300      	movs	r3, #0
   d676a:	461a      	mov	r2, r3
   d676c:	4619      	mov	r1, r3
   d676e:	6840      	ldr	r0, [r0, #4]
   d6770:	f7ff bd66 	b.w	d6240 <network_on>

000d6774 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6774:	2300      	movs	r3, #0
   d6776:	461a      	mov	r2, r3
   d6778:	4619      	mov	r1, r3
   d677a:	6840      	ldr	r0, [r0, #4]
   d677c:	f7ff bd68 	b.w	d6250 <network_off>

000d6780 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6780:	2200      	movs	r2, #0
   d6782:	f081 0101 	eor.w	r1, r1, #1
   d6786:	6840      	ldr	r0, [r0, #4]
   d6788:	f7ff bd6a 	b.w	d6260 <network_listen>

000d678c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d678c:	2200      	movs	r2, #0
   d678e:	6840      	ldr	r0, [r0, #4]
   d6790:	f7ff bd76 	b.w	d6280 <network_set_listen_timeout>

000d6794 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6794:	2200      	movs	r2, #0
   d6796:	4611      	mov	r1, r2
   d6798:	6840      	ldr	r0, [r0, #4]
   d679a:	f7ff bd79 	b.w	d6290 <network_get_listen_timeout>

000d679e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d679e:	2200      	movs	r2, #0
   d67a0:	4611      	mov	r1, r2
   d67a2:	6840      	ldr	r0, [r0, #4]
   d67a4:	f7ff bd64 	b.w	d6270 <network_listening>

000d67a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d67a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d67ac:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d67ae:	b095      	sub	sp, #84	; 0x54
   d67b0:	4616      	mov	r6, r2
   d67b2:	460d      	mov	r5, r1
   d67b4:	4607      	mov	r7, r0
    IPAddress addr;
   d67b6:	f7ff fed3 	bl	d6560 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d67ba:	4621      	mov	r1, r4
   d67bc:	2220      	movs	r2, #32
   d67be:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d67c0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d67c2:	f001 f9be 	bl	d7b42 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d67c6:	2340      	movs	r3, #64	; 0x40
   d67c8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d67ca:	4621      	mov	r1, r4
   d67cc:	466b      	mov	r3, sp
   d67ce:	aa0c      	add	r2, sp, #48	; 0x30
   d67d0:	4630      	mov	r0, r6
   d67d2:	f7ff fc29 	bl	d6028 <netdb_getaddrinfo>
    if (!r) {
   d67d6:	4604      	mov	r4, r0
   d67d8:	2800      	cmp	r0, #0
   d67da:	d144      	bne.n	d6866 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d67dc:	4602      	mov	r2, r0
   d67de:	2101      	movs	r1, #1
   d67e0:	6868      	ldr	r0, [r5, #4]
   d67e2:	f7ff fd25 	bl	d6230 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d67e6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d67e8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d67ea:	4622      	mov	r2, r4
   d67ec:	6868      	ldr	r0, [r5, #4]
   d67ee:	f7ff fd1f 	bl	d6230 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d67f2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d67f4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d67f6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d67f8:	2e00      	cmp	r6, #0
   d67fa:	d034      	beq.n	d6866 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d67fc:	2900      	cmp	r1, #0
   d67fe:	d132      	bne.n	d6866 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6800:	6873      	ldr	r3, [r6, #4]
   d6802:	2b02      	cmp	r3, #2
   d6804:	d002      	beq.n	d680c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6806:	2b0a      	cmp	r3, #10
   d6808:	d009      	beq.n	d681e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d680a:	e02a      	b.n	d6862 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d680c:	f1b8 0f00 	cmp.w	r8, #0
   d6810:	d027      	beq.n	d6862 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6812:	6971      	ldr	r1, [r6, #20]
   d6814:	4638      	mov	r0, r7
   d6816:	3104      	adds	r1, #4
   d6818:	f7ff fecf 	bl	d65ba <_ZN9IPAddressaSEPKh>
   d681c:	e020      	b.n	d6860 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d681e:	f1b9 0f00 	cmp.w	r9, #0
   d6822:	d01e      	beq.n	d6862 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6824:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6826:	2211      	movs	r2, #17
   d6828:	a801      	add	r0, sp, #4
   d682a:	f001 f98a 	bl	d7b42 <memset>
                    a.v = 6;
   d682e:	2306      	movs	r3, #6
   d6830:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6834:	ad01      	add	r5, sp, #4
   d6836:	f104 0308 	add.w	r3, r4, #8
   d683a:	3418      	adds	r4, #24
   d683c:	6818      	ldr	r0, [r3, #0]
   d683e:	6859      	ldr	r1, [r3, #4]
   d6840:	462a      	mov	r2, r5
   d6842:	c203      	stmia	r2!, {r0, r1}
   d6844:	3308      	adds	r3, #8
   d6846:	42a3      	cmp	r3, r4
   d6848:	4615      	mov	r5, r2
   d684a:	d1f7      	bne.n	d683c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d684c:	a901      	add	r1, sp, #4
   d684e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6850:	ad07      	add	r5, sp, #28
   d6852:	f7ff fe93 	bl	d657c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6858:	1d3c      	adds	r4, r7, #4
   d685a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d685c:	682b      	ldr	r3, [r5, #0]
   d685e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6860:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6862:	69f6      	ldr	r6, [r6, #28]
   d6864:	e7c8      	b.n	d67f8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6866:	9800      	ldr	r0, [sp, #0]
   d6868:	f7ff fbd6 	bl	d6018 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d686c:	4638      	mov	r0, r7
   d686e:	b015      	add	sp, #84	; 0x54
   d6870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6874 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6874:	4b02      	ldr	r3, [pc, #8]	; (d6880 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6876:	4a03      	ldr	r2, [pc, #12]	; (d6884 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6878:	601a      	str	r2, [r3, #0]
   d687a:	2200      	movs	r2, #0
   d687c:	605a      	str	r2, [r3, #4]
   d687e:	4770      	bx	lr
   d6880:	2003e5ac 	.word	0x2003e5ac
   d6884:	000da9d0 	.word	0x000da9d0

000d6888 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d688a:	4606      	mov	r6, r0
   d688c:	460d      	mov	r5, r1
   d688e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6890:	2400      	movs	r4, #0
  while (size--) {
   d6892:	42bd      	cmp	r5, r7
   d6894:	d00c      	beq.n	d68b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6896:	6833      	ldr	r3, [r6, #0]
   d6898:	f815 1b01 	ldrb.w	r1, [r5], #1
   d689c:	689b      	ldr	r3, [r3, #8]
   d689e:	4630      	mov	r0, r6
   d68a0:	4798      	blx	r3
     if (chunk>=0)
   d68a2:	2800      	cmp	r0, #0
   d68a4:	db01      	blt.n	d68aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d68a6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d68a8:	e7f3      	b.n	d6892 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d68aa:	2c00      	cmp	r4, #0
   d68ac:	bf08      	it	eq
   d68ae:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d68b0:	4620      	mov	r0, r4
   d68b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d68b4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d68b4:	b570      	push	{r4, r5, r6, lr}
   d68b6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d68b8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d68ba:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d68bc:	b149      	cbz	r1, d68d2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d68be:	f001 f971 	bl	d7ba4 <strlen>
   d68c2:	682b      	ldr	r3, [r5, #0]
   d68c4:	4602      	mov	r2, r0
   d68c6:	4621      	mov	r1, r4
   d68c8:	4628      	mov	r0, r5
   d68ca:	68db      	ldr	r3, [r3, #12]
    }
   d68cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d68d0:	4718      	bx	r3
    }
   d68d2:	bd70      	pop	{r4, r5, r6, pc}

000d68d4 <_ZN5Print5printEPKc>:
   d68d4:	b508      	push	{r3, lr}
   d68d6:	f7ff ffed 	bl	d68b4 <_ZN5Print5writeEPKc>
   d68da:	bd08      	pop	{r3, pc}

000d68dc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d68dc:	6803      	ldr	r3, [r0, #0]
   d68de:	689b      	ldr	r3, [r3, #8]
   d68e0:	4718      	bx	r3

000d68e2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d68e2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d68e4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d68e6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d68e8:	f7ff fff8 	bl	d68dc <_ZN5Print5printEc>
  n += print('\n');
   d68ec:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d68ee:	4604      	mov	r4, r0
  n += print('\n');
   d68f0:	4628      	mov	r0, r5
   d68f2:	f7ff fff3 	bl	d68dc <_ZN5Print5printEc>
  return n;
}
   d68f6:	4420      	add	r0, r4
   d68f8:	bd38      	pop	{r3, r4, r5, pc}

000d68fa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d68fa:	b538      	push	{r3, r4, r5, lr}
   d68fc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d68fe:	f7ff ffd9 	bl	d68b4 <_ZN5Print5writeEPKc>
   d6902:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6904:	4628      	mov	r0, r5
   d6906:	f7ff ffec 	bl	d68e2 <_ZN5Print7printlnEv>
  return n;
}
   d690a:	4420      	add	r0, r4
   d690c:	bd38      	pop	{r3, r4, r5, pc}

000d690e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d690e:	b530      	push	{r4, r5, lr}
   d6910:	b08b      	sub	sp, #44	; 0x2c
   d6912:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6914:	2100      	movs	r1, #0
   d6916:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d691a:	2a01      	cmp	r2, #1
   d691c:	bf98      	it	ls
   d691e:	220a      	movls	r2, #10
   d6920:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6924:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6928:	fb05 3312 	mls	r3, r5, r2, r3
   d692c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6930:	2b09      	cmp	r3, #9
   d6932:	bf94      	ite	ls
   d6934:	3330      	addls	r3, #48	; 0x30
   d6936:	3337      	addhi	r3, #55	; 0x37
   d6938:	b2db      	uxtb	r3, r3
   d693a:	4621      	mov	r1, r4
   d693c:	f804 3901 	strb.w	r3, [r4], #-1
   d6940:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6942:	2d00      	cmp	r5, #0
   d6944:	d1ee      	bne.n	d6924 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6946:	f7ff ffb5 	bl	d68b4 <_ZN5Print5writeEPKc>
}
   d694a:	b00b      	add	sp, #44	; 0x2c
   d694c:	bd30      	pop	{r4, r5, pc}

000d694e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d694e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6950:	b92a      	cbnz	r2, d695e <_ZN5Print5printEmi+0x10>
   d6952:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6954:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6958:	689b      	ldr	r3, [r3, #8]
   d695a:	b2c9      	uxtb	r1, r1
   d695c:	4718      	bx	r3
  else return printNumber(n, base);
   d695e:	b2d2      	uxtb	r2, r2
}
   d6960:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6964:	f7ff bfd3 	b.w	d690e <_ZN5Print11printNumberEmh>

000d6968 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6968:	f7ff bff1 	b.w	d694e <_ZN5Print5printEmi>

000d696c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d696c:	b510      	push	{r4, lr}
   d696e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6970:	f7ff fcb9 	bl	d62e6 <_ZNSt14_Function_baseD1Ev>
   d6974:	4620      	mov	r0, r4
   d6976:	bd10      	pop	{r4, pc}

000d6978 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6978:	4803      	ldr	r0, [pc, #12]	; (d6988 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d697a:	4a04      	ldr	r2, [pc, #16]	; (d698c <_GLOBAL__sub_I_RGB+0x14>)
   d697c:	4904      	ldr	r1, [pc, #16]	; (d6990 <_GLOBAL__sub_I_RGB+0x18>)
   d697e:	2300      	movs	r3, #0
   d6980:	6083      	str	r3, [r0, #8]
   d6982:	f000 baf9 	b.w	d6f78 <__aeabi_atexit>
   d6986:	bf00      	nop
   d6988:	2003e5b4 	.word	0x2003e5b4
   d698c:	2003e290 	.word	0x2003e290
   d6990:	000d696d 	.word	0x000d696d

000d6994 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6994:	4770      	bx	lr

000d6996 <_ZN8SPIClassD0Ev>:
   d6996:	b510      	push	{r4, lr}
   d6998:	2110      	movs	r1, #16
   d699a:	4604      	mov	r4, r0
   d699c:	f000 faf1 	bl	d6f82 <_ZdlPvj>
   d69a0:	4620      	mov	r0, r4
   d69a2:	bd10      	pop	{r4, pc}

000d69a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d69a4:	b570      	push	{r4, r5, r6, lr}
   d69a6:	4b08      	ldr	r3, [pc, #32]	; (d69c8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d69a8:	6003      	str	r3, [r0, #0]
   d69aa:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d69ac:	2500      	movs	r5, #0
   d69ae:	460e      	mov	r6, r1
   d69b0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d69b4:	f7ff fa68 	bl	d5e88 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d69b8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d69ba:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d69bc:	f7ff fb54 	bl	d6068 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d69c0:	60a5      	str	r5, [r4, #8]
}
   d69c2:	4620      	mov	r0, r4
   d69c4:	bd70      	pop	{r4, r5, r6, pc}
   d69c6:	bf00      	nop
   d69c8:	000daa04 	.word	0x000daa04

000d69cc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d69cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d69d0:	7900      	ldrb	r0, [r0, #4]
   d69d2:	f7ff bb31 	b.w	d6038 <HAL_SPI_Begin>
	...

000d69d8 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d69d8:	4a05      	ldr	r2, [pc, #20]	; (d69f0 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
   d69da:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d69dc:	5c99      	ldrb	r1, [r3, r2]
   d69de:	4281      	cmp	r1, r0
   d69e0:	d002      	beq.n	d69e8 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
   d69e2:	3301      	adds	r3, #1
   d69e4:	2b08      	cmp	r3, #8
   d69e6:	d1f9      	bne.n	d69dc <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
   d69e8:	1c58      	adds	r0, r3, #1
}
   d69ea:	b2c0      	uxtb	r0, r0
   d69ec:	4770      	bx	lr
   d69ee:	bf00      	nop
   d69f0:	000daa0c 	.word	0x000daa0c

000d69f4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d69f4:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d69f6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d69f8:	6018      	str	r0, [r3, #0]
   d69fa:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d69fc:	6818      	ldr	r0, [r3, #0]
   d69fe:	4288      	cmp	r0, r1
   d6a00:	b2e5      	uxtb	r5, r4
   d6a02:	d906      	bls.n	d6a12 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6a04:	3401      	adds	r4, #1
   d6a06:	2c08      	cmp	r4, #8
   d6a08:	d002      	beq.n	d6a10 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d6a0a:	0840      	lsrs	r0, r0, #1
   d6a0c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d6a0e:	e7f5      	b.n	d69fc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6a10:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6a12:	4b02      	ldr	r3, [pc, #8]	; (d6a1c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6a14:	5d5b      	ldrb	r3, [r3, r5]
   d6a16:	7013      	strb	r3, [r2, #0]
   d6a18:	bd30      	pop	{r4, r5, pc}
   d6a1a:	bf00      	nop
   d6a1c:	000daa0c 	.word	0x000daa0c

000d6a20 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6a20:	b570      	push	{r4, r5, r6, lr}
   d6a22:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   d6a24:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   d6a26:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6a2a:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d6a2c:	2214      	movs	r2, #20
   d6a2e:	2100      	movs	r1, #0
   d6a30:	a803      	add	r0, sp, #12
   d6a32:	f001 f886 	bl	d7b42 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d6a36:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d6a38:	a903      	add	r1, sp, #12
   d6a3a:	4630      	mov	r0, r6
   d6a3c:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d6a3e:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   d6a42:	f7ff fb21 	bl	d6088 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   d6a46:	ab02      	add	r3, sp, #8
   d6a48:	f10d 0207 	add.w	r2, sp, #7
   d6a4c:	4629      	mov	r1, r5
   d6a4e:	9804      	ldr	r0, [sp, #16]
   d6a50:	f7ff ffd0 	bl	d69f4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6a54:	7920      	ldrb	r0, [r4, #4]
   d6a56:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6a5a:	f7ff faf5 	bl	d6048 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   d6a5e:	9802      	ldr	r0, [sp, #8]
   d6a60:	b008      	add	sp, #32
   d6a62:	bd70      	pop	{r4, r5, r6, pc}

000d6a64 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6a64:	b538      	push	{r3, r4, r5, lr}
   d6a66:	4604      	mov	r4, r0
   d6a68:	4608      	mov	r0, r1
    if (dividerReference)
   d6a6a:	68a5      	ldr	r5, [r4, #8]
   d6a6c:	b14d      	cbz	r5, d6a82 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
   d6a6e:	f7ff ffb3 	bl	d69d8 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d6a72:	2201      	movs	r2, #1
   d6a74:	fa25 f100 	lsr.w	r1, r5, r0
   d6a78:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
   d6a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d6a7e:	f7ff bfcf 	b.w	d6a20 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6a82:	7920      	ldrb	r0, [r4, #4]
    }
}
   d6a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6a88:	f7ff bade 	b.w	d6048 <HAL_SPI_Set_Clock_Divider>

000d6a8c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6a8c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d6a8e:	7900      	ldrb	r0, [r0, #4]
   d6a90:	f7ff fae2 	bl	d6058 <HAL_SPI_Send_Receive_Data>
}
   d6a94:	b2c0      	uxtb	r0, r0
   d6a96:	bd08      	pop	{r3, pc}

000d6a98 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6a98:	7900      	ldrb	r0, [r0, #4]
   d6a9a:	f7ff baed 	b.w	d6078 <HAL_SPI_Is_Enabled>
	...

000d6aa0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6aa0:	4b04      	ldr	r3, [pc, #16]	; (d6ab4 <_GLOBAL__sub_I_System+0x14>)
   d6aa2:	2000      	movs	r0, #0
   d6aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6aa8:	7018      	strb	r0, [r3, #0]
   d6aaa:	8058      	strh	r0, [r3, #2]
   d6aac:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6aae:	f7ff bb73 	b.w	d6198 <set_system_mode>
   d6ab2:	bf00      	nop
   d6ab4:	2003e5c4 	.word	0x2003e5c4

000d6ab8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6ab8:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6aba:	681a      	ldr	r2, [r3, #0]
   d6abc:	4b02      	ldr	r3, [pc, #8]	; (d6ac8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6abe:	601a      	str	r2, [r3, #0]
   d6ac0:	4770      	bx	lr
   d6ac2:	bf00      	nop
   d6ac4:	2003e228 	.word	0x2003e228
   d6ac8:	2003e5cc 	.word	0x2003e5cc

000d6acc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6acc:	4770      	bx	lr

000d6ace <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ace:	7441      	strb	r1, [r0, #17]
   d6ad0:	4770      	bx	lr

000d6ad2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6ad2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6ad4:	7c00      	ldrb	r0, [r0, #16]
   d6ad6:	f7ff fb17 	bl	d6108 <HAL_USART_Available_Data_For_Write>
}
   d6ada:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ade:	bd08      	pop	{r3, pc}

000d6ae0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6ae0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6ae2:	7c00      	ldrb	r0, [r0, #16]
   d6ae4:	f7ff fae8 	bl	d60b8 <HAL_USART_Available_Data>
}
   d6ae8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6aec:	bd08      	pop	{r3, pc}

000d6aee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6aee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6af0:	7c00      	ldrb	r0, [r0, #16]
   d6af2:	f7ff faf1 	bl	d60d8 <HAL_USART_Peek_Data>
}
   d6af6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6afa:	bf28      	it	cs
   d6afc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6b00:	bd08      	pop	{r3, pc}

000d6b02 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6b02:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6b04:	7c00      	ldrb	r0, [r0, #16]
   d6b06:	f7ff fadf 	bl	d60c8 <HAL_USART_Read_Data>
}
   d6b0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b0e:	bf28      	it	cs
   d6b10:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6b14:	bd08      	pop	{r3, pc}

000d6b16 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6b16:	7c00      	ldrb	r0, [r0, #16]
   d6b18:	f7ff bae6 	b.w	d60e8 <HAL_USART_Flush_Data>

000d6b1c <_ZN11USARTSerialD0Ev>:
   d6b1c:	b510      	push	{r4, lr}
   d6b1e:	2114      	movs	r1, #20
   d6b20:	4604      	mov	r4, r0
   d6b22:	f000 fa2e 	bl	d6f82 <_ZdlPvj>
   d6b26:	4620      	mov	r0, r4
   d6b28:	bd10      	pop	{r4, pc}

000d6b2a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6b2a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6b2c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6b2e:	4604      	mov	r4, r0
   d6b30:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6b32:	b925      	cbnz	r5, d6b3e <_ZN11USARTSerial5writeEh+0x14>
   d6b34:	7c00      	ldrb	r0, [r0, #16]
   d6b36:	f7ff fae7 	bl	d6108 <HAL_USART_Available_Data_For_Write>
   d6b3a:	2800      	cmp	r0, #0
   d6b3c:	dd05      	ble.n	d6b4a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6b3e:	4631      	mov	r1, r6
   d6b40:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6b46:	f7ff baaf 	b.w	d60a8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6b4a:	4628      	mov	r0, r5
   d6b4c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6b50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6b50:	b510      	push	{r4, lr}
   d6b52:	4604      	mov	r4, r0
   d6b54:	4608      	mov	r0, r1
   d6b56:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6b58:	2200      	movs	r2, #0
   d6b5a:	6062      	str	r2, [r4, #4]
   d6b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b60:	60a2      	str	r2, [r4, #8]
   d6b62:	4a05      	ldr	r2, [pc, #20]	; (d6b78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6b64:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6b66:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6b68:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6b6a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6b6c:	461a      	mov	r2, r3
   d6b6e:	f7ff fa93 	bl	d6098 <HAL_USART_Init>
}
   d6b72:	4620      	mov	r0, r4
   d6b74:	bd10      	pop	{r4, pc}
   d6b76:	bf00      	nop
   d6b78:	000daa48 	.word	0x000daa48

000d6b7c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6b7c:	7c00      	ldrb	r0, [r0, #16]
   d6b7e:	f7ff babb 	b.w	d60f8 <HAL_USART_Is_Enabled>
	...

000d6b84 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6b84:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6b86:	4d0c      	ldr	r5, [pc, #48]	; (d6bb8 <_Z22__fetch_global_Serial1v+0x34>)
   d6b88:	6829      	ldr	r1, [r5, #0]
   d6b8a:	f011 0401 	ands.w	r4, r1, #1
   d6b8e:	d111      	bne.n	d6bb4 <_Z22__fetch_global_Serial1v+0x30>
   d6b90:	4628      	mov	r0, r5
   d6b92:	f7fd fa93 	bl	d40bc <__cxa_guard_acquire>
   d6b96:	b168      	cbz	r0, d6bb4 <_Z22__fetch_global_Serial1v+0x30>
   d6b98:	4a08      	ldr	r2, [pc, #32]	; (d6bbc <_Z22__fetch_global_Serial1v+0x38>)
   d6b9a:	4b09      	ldr	r3, [pc, #36]	; (d6bc0 <_Z22__fetch_global_Serial1v+0x3c>)
   d6b9c:	4809      	ldr	r0, [pc, #36]	; (d6bc4 <_Z22__fetch_global_Serial1v+0x40>)
   d6b9e:	4621      	mov	r1, r4
   d6ba0:	f7ff ffd6 	bl	d6b50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6ba4:	4628      	mov	r0, r5
   d6ba6:	f7fd fa8e 	bl	d40c6 <__cxa_guard_release>
   d6baa:	4a07      	ldr	r2, [pc, #28]	; (d6bc8 <_Z22__fetch_global_Serial1v+0x44>)
   d6bac:	4907      	ldr	r1, [pc, #28]	; (d6bcc <_Z22__fetch_global_Serial1v+0x48>)
   d6bae:	4805      	ldr	r0, [pc, #20]	; (d6bc4 <_Z22__fetch_global_Serial1v+0x40>)
   d6bb0:	f000 f9e2 	bl	d6f78 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6bb4:	4803      	ldr	r0, [pc, #12]	; (d6bc4 <_Z22__fetch_global_Serial1v+0x40>)
   d6bb6:	bd38      	pop	{r3, r4, r5, pc}
   d6bb8:	2003e668 	.word	0x2003e668
   d6bbc:	2003e66c 	.word	0x2003e66c
   d6bc0:	2003e5e4 	.word	0x2003e5e4
   d6bc4:	2003e5d0 	.word	0x2003e5d0
   d6bc8:	2003e290 	.word	0x2003e290
   d6bcc:	000d6acd 	.word	0x000d6acd

000d6bd0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6bd0:	7441      	strb	r1, [r0, #17]
   d6bd2:	4770      	bx	lr

000d6bd4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6bd4:	4770      	bx	lr

000d6bd6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6bd6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6bd8:	2100      	movs	r1, #0
   d6bda:	7c00      	ldrb	r0, [r0, #16]
   d6bdc:	f7ff fabc 	bl	d6158 <HAL_USB_USART_Receive_Data>
}
   d6be0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6be4:	bf28      	it	cs
   d6be6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6bea:	bd08      	pop	{r3, pc}

000d6bec <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6bec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6bee:	2101      	movs	r1, #1
   d6bf0:	7c00      	ldrb	r0, [r0, #16]
   d6bf2:	f7ff fab1 	bl	d6158 <HAL_USB_USART_Receive_Data>
}
   d6bf6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6bfa:	bf28      	it	cs
   d6bfc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6c00:	bd08      	pop	{r3, pc}

000d6c02 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6c02:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6c04:	7c00      	ldrb	r0, [r0, #16]
   d6c06:	f7ff fa9f 	bl	d6148 <HAL_USB_USART_Available_Data_For_Write>
}
   d6c0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c0e:	bd08      	pop	{r3, pc}

000d6c10 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6c10:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6c12:	7c00      	ldrb	r0, [r0, #16]
   d6c14:	f7ff fa90 	bl	d6138 <HAL_USB_USART_Available_Data>
}
   d6c18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c1c:	bd08      	pop	{r3, pc}

000d6c1e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6c1e:	7c00      	ldrb	r0, [r0, #16]
   d6c20:	f7ff baaa 	b.w	d6178 <HAL_USB_USART_Flush_Data>

000d6c24 <_ZN9USBSerialD0Ev>:
   d6c24:	b510      	push	{r4, lr}
   d6c26:	2114      	movs	r1, #20
   d6c28:	4604      	mov	r4, r0
   d6c2a:	f000 f9aa 	bl	d6f82 <_ZdlPvj>
   d6c2e:	4620      	mov	r0, r4
   d6c30:	bd10      	pop	{r4, pc}

000d6c32 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6c32:	b538      	push	{r3, r4, r5, lr}
   d6c34:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6c36:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6c38:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6c3a:	f7ff fa85 	bl	d6148 <HAL_USB_USART_Available_Data_For_Write>
   d6c3e:	2800      	cmp	r0, #0
   d6c40:	dc01      	bgt.n	d6c46 <_ZN9USBSerial5writeEh+0x14>
   d6c42:	7c60      	ldrb	r0, [r4, #17]
   d6c44:	b128      	cbz	r0, d6c52 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6c46:	4629      	mov	r1, r5
   d6c48:	7c20      	ldrb	r0, [r4, #16]
   d6c4a:	f7ff fa8d 	bl	d6168 <HAL_USB_USART_Send_Data>
   d6c4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6c52:	bd38      	pop	{r3, r4, r5, pc}

000d6c54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6c54:	b510      	push	{r4, lr}
   d6c56:	4604      	mov	r4, r0
   d6c58:	2300      	movs	r3, #0
   d6c5a:	6063      	str	r3, [r4, #4]
   d6c5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6c60:	60a3      	str	r3, [r4, #8]
   d6c62:	4b05      	ldr	r3, [pc, #20]	; (d6c78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6c64:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6c66:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6c68:	4608      	mov	r0, r1
{
  _serial = serial;
   d6c6a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6c6c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6c6e:	4611      	mov	r1, r2
   d6c70:	f7ff fa52 	bl	d6118 <HAL_USB_USART_Init>
}
   d6c74:	4620      	mov	r0, r4
   d6c76:	bd10      	pop	{r4, pc}
   d6c78:	000daa78 	.word	0x000daa78

000d6c7c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6c7c:	2200      	movs	r2, #0
   d6c7e:	7c00      	ldrb	r0, [r0, #16]
   d6c80:	f7ff ba52 	b.w	d6128 <HAL_USB_USART_Begin>

000d6c84 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6c84:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6c86:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6c88:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6c8a:	2100      	movs	r1, #0
   d6c8c:	f000 ff59 	bl	d7b42 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6c90:	4620      	mov	r0, r4
   d6c92:	bd10      	pop	{r4, pc}

000d6c94 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6c94:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6c96:	4d0e      	ldr	r5, [pc, #56]	; (d6cd0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6c98:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6c9a:	a801      	add	r0, sp, #4
   d6c9c:	f7ff fff2 	bl	d6c84 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6ca0:	6829      	ldr	r1, [r5, #0]
   d6ca2:	f011 0401 	ands.w	r4, r1, #1
   d6ca6:	d110      	bne.n	d6cca <_Z16_fetch_usbserialv+0x36>
   d6ca8:	4628      	mov	r0, r5
   d6caa:	f7fd fa07 	bl	d40bc <__cxa_guard_acquire>
   d6cae:	b160      	cbz	r0, d6cca <_Z16_fetch_usbserialv+0x36>
   d6cb0:	aa01      	add	r2, sp, #4
   d6cb2:	4621      	mov	r1, r4
   d6cb4:	4807      	ldr	r0, [pc, #28]	; (d6cd4 <_Z16_fetch_usbserialv+0x40>)
   d6cb6:	f7ff ffcd 	bl	d6c54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6cba:	4628      	mov	r0, r5
   d6cbc:	f7fd fa03 	bl	d40c6 <__cxa_guard_release>
   d6cc0:	4a05      	ldr	r2, [pc, #20]	; (d6cd8 <_Z16_fetch_usbserialv+0x44>)
   d6cc2:	4906      	ldr	r1, [pc, #24]	; (d6cdc <_Z16_fetch_usbserialv+0x48>)
   d6cc4:	4803      	ldr	r0, [pc, #12]	; (d6cd4 <_Z16_fetch_usbserialv+0x40>)
   d6cc6:	f000 f957 	bl	d6f78 <__aeabi_atexit>
	return _usbserial;
}
   d6cca:	4802      	ldr	r0, [pc, #8]	; (d6cd4 <_Z16_fetch_usbserialv+0x40>)
   d6ccc:	b007      	add	sp, #28
   d6cce:	bd30      	pop	{r4, r5, pc}
   d6cd0:	2003e6f0 	.word	0x2003e6f0
   d6cd4:	2003e6f4 	.word	0x2003e6f4
   d6cd8:	2003e290 	.word	0x2003e290
   d6cdc:	000d6bd5 	.word	0x000d6bd5

000d6ce0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6ce0:	2200      	movs	r2, #0
   d6ce2:	4611      	mov	r1, r2
   d6ce4:	6840      	ldr	r0, [r0, #4]
   d6ce6:	f7ff baa3 	b.w	d6230 <network_ready>

000d6cea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6cea:	2200      	movs	r2, #0
   d6cec:	4611      	mov	r1, r2
   d6cee:	6840      	ldr	r0, [r0, #4]
   d6cf0:	f7ff babe 	b.w	d6270 <network_listening>

000d6cf4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6cf4:	2200      	movs	r2, #0
   d6cf6:	4611      	mov	r1, r2
   d6cf8:	6840      	ldr	r0, [r0, #4]
   d6cfa:	f7ff bac9 	b.w	d6290 <network_get_listen_timeout>

000d6cfe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6cfe:	2200      	movs	r2, #0
   d6d00:	6840      	ldr	r0, [r0, #4]
   d6d02:	f7ff babd 	b.w	d6280 <network_set_listen_timeout>

000d6d06 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6d06:	2200      	movs	r2, #0
   d6d08:	f081 0101 	eor.w	r1, r1, #1
   d6d0c:	6840      	ldr	r0, [r0, #4]
   d6d0e:	f7ff baa7 	b.w	d6260 <network_listen>

000d6d12 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6d12:	2300      	movs	r3, #0
   d6d14:	461a      	mov	r2, r3
   d6d16:	4619      	mov	r1, r3
   d6d18:	6840      	ldr	r0, [r0, #4]
   d6d1a:	f7ff ba99 	b.w	d6250 <network_off>

000d6d1e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6d1e:	2300      	movs	r3, #0
   d6d20:	461a      	mov	r2, r3
   d6d22:	4619      	mov	r1, r3
   d6d24:	6840      	ldr	r0, [r0, #4]
   d6d26:	f7ff ba8b 	b.w	d6240 <network_on>

000d6d2a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6d2a:	2200      	movs	r2, #0
   d6d2c:	4611      	mov	r1, r2
   d6d2e:	6840      	ldr	r0, [r0, #4]
   d6d30:	f7ff ba6e 	b.w	d6210 <network_connecting>

000d6d34 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6d34:	2200      	movs	r2, #0
   d6d36:	2102      	movs	r1, #2
   d6d38:	6840      	ldr	r0, [r0, #4]
   d6d3a:	f7ff ba71 	b.w	d6220 <network_disconnect>

000d6d3e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6d3e:	2300      	movs	r3, #0
   d6d40:	461a      	mov	r2, r3
   d6d42:	6840      	ldr	r0, [r0, #4]
   d6d44:	f7ff ba5c 	b.w	d6200 <network_connect>

000d6d48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6d48:	4b02      	ldr	r3, [pc, #8]	; (d6d54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6d4a:	2204      	movs	r2, #4
   d6d4c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6d4e:	4a02      	ldr	r2, [pc, #8]	; (d6d58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6d50:	601a      	str	r2, [r3, #0]
   d6d52:	4770      	bx	lr
   d6d54:	2003e708 	.word	0x2003e708
   d6d58:	000daaa8 	.word	0x000daaa8

000d6d5c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6d5c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6d5e:	4b0c      	ldr	r3, [pc, #48]	; (d6d90 <serialEventRun+0x34>)
   d6d60:	b133      	cbz	r3, d6d70 <serialEventRun+0x14>
   d6d62:	f7ff ff97 	bl	d6c94 <_Z16_fetch_usbserialv>
   d6d66:	6803      	ldr	r3, [r0, #0]
   d6d68:	691b      	ldr	r3, [r3, #16]
   d6d6a:	4798      	blx	r3
   d6d6c:	2800      	cmp	r0, #0
   d6d6e:	dc09      	bgt.n	d6d84 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6d70:	4b08      	ldr	r3, [pc, #32]	; (d6d94 <serialEventRun+0x38>)
   d6d72:	b163      	cbz	r3, d6d8e <serialEventRun+0x32>
   d6d74:	f7ff ff06 	bl	d6b84 <_Z22__fetch_global_Serial1v>
   d6d78:	6803      	ldr	r3, [r0, #0]
   d6d7a:	691b      	ldr	r3, [r3, #16]
   d6d7c:	4798      	blx	r3
   d6d7e:	2800      	cmp	r0, #0
   d6d80:	dc03      	bgt.n	d6d8a <serialEventRun+0x2e>
   d6d82:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6d84:	f3af 8000 	nop.w
   d6d88:	e7f2      	b.n	d6d70 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6d8a:	f3af 8000 	nop.w
   d6d8e:	bd08      	pop	{r3, pc}
	...

000d6d98 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6d98:	b508      	push	{r3, lr}
	serialEventRun();
   d6d9a:	f7ff ffdf 	bl	d6d5c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6d9e:	f7ff f893 	bl	d5ec8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6da2:	4b01      	ldr	r3, [pc, #4]	; (d6da8 <_post_loop+0x10>)
   d6da4:	6018      	str	r0, [r3, #0]
   d6da6:	bd08      	pop	{r3, pc}
   d6da8:	2003e714 	.word	0x2003e714

000d6dac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6dac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6dae:	2300      	movs	r3, #0
   d6db0:	9300      	str	r3, [sp, #0]
   d6db2:	461a      	mov	r2, r3
   d6db4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6db8:	f7ff fa08 	bl	d61cc <system_ctrl_set_result>
}
   d6dbc:	b003      	add	sp, #12
   d6dbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6dc4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6dc4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6dc6:	8843      	ldrh	r3, [r0, #2]
   d6dc8:	2b0a      	cmp	r3, #10
   d6dca:	d008      	beq.n	d6dde <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6dcc:	2b50      	cmp	r3, #80	; 0x50
   d6dce:	d109      	bne.n	d6de4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6dd0:	4b09      	ldr	r3, [pc, #36]	; (d6df8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6dd2:	681b      	ldr	r3, [r3, #0]
   d6dd4:	b13b      	cbz	r3, d6de6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6dd6:	b003      	add	sp, #12
   d6dd8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6ddc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6dde:	f7ff ffe5 	bl	d6dac <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6de2:	e006      	b.n	d6df2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6de4:	2300      	movs	r3, #0
   d6de6:	9300      	str	r3, [sp, #0]
   d6de8:	461a      	mov	r2, r3
   d6dea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6dee:	f7ff f9ed 	bl	d61cc <system_ctrl_set_result>
        break;
    }
}
   d6df2:	b003      	add	sp, #12
   d6df4:	f85d fb04 	ldr.w	pc, [sp], #4
   d6df8:	2003e710 	.word	0x2003e710

000d6dfc <module_user_init_hook>:

void module_user_init_hook()
{
   d6dfc:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6dfe:	f7ff f853 	bl	d5ea8 <HAL_RNG_GetRandomNumber>
   d6e02:	4604      	mov	r4, r0
    srand(seed);
   d6e04:	f000 fea6 	bl	d7b54 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6e08:	4b07      	ldr	r3, [pc, #28]	; (d6e28 <module_user_init_hook+0x2c>)
   d6e0a:	b113      	cbz	r3, d6e12 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6e0c:	4620      	mov	r0, r4
   d6e0e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6e12:	2100      	movs	r1, #0
   d6e14:	4804      	ldr	r0, [pc, #16]	; (d6e28 <module_user_init_hook+0x2c>)
   d6e16:	f7ff f9eb 	bl	d61f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e1a:	2100      	movs	r1, #0
   d6e1c:	4803      	ldr	r0, [pc, #12]	; (d6e2c <module_user_init_hook+0x30>)
}
   d6e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e22:	f7ff b9c9 	b.w	d61b8 <system_ctrl_set_app_request_handler>
   d6e26:	bf00      	nop
   d6e28:	00000000 	.word	0x00000000
   d6e2c:	000d6dc5 	.word	0x000d6dc5

000d6e30 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6e30:	b510      	push	{r4, lr}
   d6e32:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6e34:	480f      	ldr	r0, [pc, #60]	; (d6e74 <pinAvailable+0x44>)
   d6e36:	f7ff fe2f 	bl	d6a98 <_ZN8SPIClass9isEnabledEv>
   d6e3a:	b128      	cbz	r0, d6e48 <pinAvailable+0x18>
   d6e3c:	f1a4 030b 	sub.w	r3, r4, #11
   d6e40:	2b02      	cmp	r3, #2
   d6e42:	d801      	bhi.n	d6e48 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6e44:	2000      	movs	r0, #0
   d6e46:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6e48:	f000 f854 	bl	d6ef4 <_Z19__fetch_global_Wirev>
   d6e4c:	f7ff fae4 	bl	d6418 <_ZN7TwoWire9isEnabledEv>
   d6e50:	b108      	cbz	r0, d6e56 <pinAvailable+0x26>
   d6e52:	2c01      	cmp	r4, #1
   d6e54:	d9f6      	bls.n	d6e44 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6e56:	f7ff fe95 	bl	d6b84 <_Z22__fetch_global_Serial1v>
   d6e5a:	f7ff fe8f 	bl	d6b7c <_ZN11USARTSerial9isEnabledEv>
   d6e5e:	b118      	cbz	r0, d6e68 <pinAvailable+0x38>
   d6e60:	f1a4 0309 	sub.w	r3, r4, #9
   d6e64:	2b01      	cmp	r3, #1
   d6e66:	d9ed      	bls.n	d6e44 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6e68:	2c23      	cmp	r4, #35	; 0x23
   d6e6a:	bf8c      	ite	hi
   d6e6c:	2000      	movhi	r0, #0
   d6e6e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6e70:	bd10      	pop	{r4, pc}
   d6e72:	bf00      	nop
   d6e74:	2003e730 	.word	0x2003e730

000d6e78 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6e78:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6e7a:	b538      	push	{r3, r4, r5, lr}
   d6e7c:	4604      	mov	r4, r0
   d6e7e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6e80:	d80a      	bhi.n	d6e98 <pinMode+0x20>
   d6e82:	29ff      	cmp	r1, #255	; 0xff
   d6e84:	d008      	beq.n	d6e98 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6e86:	f7ff ffd3 	bl	d6e30 <pinAvailable>
   d6e8a:	b128      	cbz	r0, d6e98 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6e8c:	4629      	mov	r1, r5
   d6e8e:	4620      	mov	r0, r4
}
   d6e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6e94:	f7ff b828 	b.w	d5ee8 <HAL_Pin_Mode>
   d6e98:	bd38      	pop	{r3, r4, r5, pc}

000d6e9a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6e9a:	b538      	push	{r3, r4, r5, lr}
   d6e9c:	4604      	mov	r4, r0
   d6e9e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6ea0:	f7ff f82a 	bl	d5ef8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6ea4:	28ff      	cmp	r0, #255	; 0xff
   d6ea6:	d010      	beq.n	d6eca <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6ea8:	2806      	cmp	r0, #6
   d6eaa:	d804      	bhi.n	d6eb6 <digitalWrite+0x1c>
   d6eac:	234d      	movs	r3, #77	; 0x4d
   d6eae:	fa23 f000 	lsr.w	r0, r3, r0
   d6eb2:	07c3      	lsls	r3, r0, #31
   d6eb4:	d409      	bmi.n	d6eca <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6eb6:	4620      	mov	r0, r4
   d6eb8:	f7ff ffba 	bl	d6e30 <pinAvailable>
   d6ebc:	b128      	cbz	r0, d6eca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6ebe:	4629      	mov	r1, r5
   d6ec0:	4620      	mov	r0, r4
}
   d6ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6ec6:	f7ff b81f 	b.w	d5f08 <HAL_GPIO_Write>
   d6eca:	bd38      	pop	{r3, r4, r5, pc}

000d6ecc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6ecc:	b510      	push	{r4, lr}
   d6ece:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6ed0:	f7ff f812 	bl	d5ef8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6ed4:	3804      	subs	r0, #4
   d6ed6:	b2c0      	uxtb	r0, r0
   d6ed8:	2801      	cmp	r0, #1
   d6eda:	d908      	bls.n	d6eee <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6edc:	4620      	mov	r0, r4
   d6ede:	f7ff ffa7 	bl	d6e30 <pinAvailable>
   d6ee2:	b120      	cbz	r0, d6eee <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6ee4:	4620      	mov	r0, r4
}
   d6ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6eea:	f7ff b815 	b.w	d5f18 <HAL_GPIO_Read>
}
   d6eee:	2000      	movs	r0, #0
   d6ef0:	bd10      	pop	{r4, pc}
	...

000d6ef4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6ef4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6ef6:	4d0b      	ldr	r5, [pc, #44]	; (d6f24 <_Z19__fetch_global_Wirev+0x30>)
   d6ef8:	6829      	ldr	r1, [r5, #0]
   d6efa:	f011 0401 	ands.w	r4, r1, #1
   d6efe:	d10f      	bne.n	d6f20 <_Z19__fetch_global_Wirev+0x2c>
   d6f00:	4628      	mov	r0, r5
   d6f02:	f7fd f8db 	bl	d40bc <__cxa_guard_acquire>
   d6f06:	b158      	cbz	r0, d6f20 <_Z19__fetch_global_Wirev+0x2c>
   d6f08:	4621      	mov	r1, r4
   d6f0a:	4807      	ldr	r0, [pc, #28]	; (d6f28 <_Z19__fetch_global_Wirev+0x34>)
   d6f0c:	f7ff fa5e 	bl	d63cc <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6f10:	4628      	mov	r0, r5
   d6f12:	f7fd f8d8 	bl	d40c6 <__cxa_guard_release>
   d6f16:	4a05      	ldr	r2, [pc, #20]	; (d6f2c <_Z19__fetch_global_Wirev+0x38>)
   d6f18:	4905      	ldr	r1, [pc, #20]	; (d6f30 <_Z19__fetch_global_Wirev+0x3c>)
   d6f1a:	4803      	ldr	r0, [pc, #12]	; (d6f28 <_Z19__fetch_global_Wirev+0x34>)
   d6f1c:	f000 f82c 	bl	d6f78 <__aeabi_atexit>
	return wire;
}
   d6f20:	4801      	ldr	r0, [pc, #4]	; (d6f28 <_Z19__fetch_global_Wirev+0x34>)
   d6f22:	bd38      	pop	{r3, r4, r5, pc}
   d6f24:	2003e718 	.word	0x2003e718
   d6f28:	2003e71c 	.word	0x2003e71c
   d6f2c:	2003e290 	.word	0x2003e290
   d6f30:	000d6375 	.word	0x000d6375

000d6f34 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6f34:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6f36:	4c0c      	ldr	r4, [pc, #48]	; (d6f68 <_GLOBAL__sub_I_SPI+0x34>)
   d6f38:	4e0c      	ldr	r6, [pc, #48]	; (d6f6c <_GLOBAL__sub_I_SPI+0x38>)
   d6f3a:	4d0d      	ldr	r5, [pc, #52]	; (d6f70 <_GLOBAL__sub_I_SPI+0x3c>)
   d6f3c:	2100      	movs	r1, #0
   d6f3e:	4620      	mov	r0, r4
   d6f40:	f7ff fd30 	bl	d69a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6f44:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6f46:	4c0b      	ldr	r4, [pc, #44]	; (d6f74 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6f48:	4632      	mov	r2, r6
   d6f4a:	4629      	mov	r1, r5
   d6f4c:	f000 f814 	bl	d6f78 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6f50:	2101      	movs	r1, #1
   d6f52:	4620      	mov	r0, r4
   d6f54:	f7ff fd26 	bl	d69a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6f58:	4632      	mov	r2, r6
   d6f5a:	4629      	mov	r1, r5
   d6f5c:	4620      	mov	r0, r4
   d6f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6f62:	f000 b809 	b.w	d6f78 <__aeabi_atexit>
   d6f66:	bf00      	nop
   d6f68:	2003e730 	.word	0x2003e730
   d6f6c:	2003e290 	.word	0x2003e290
   d6f70:	000d6995 	.word	0x000d6995
   d6f74:	2003e740 	.word	0x2003e740

000d6f78 <__aeabi_atexit>:
   d6f78:	460b      	mov	r3, r1
   d6f7a:	4601      	mov	r1, r0
   d6f7c:	4618      	mov	r0, r3
   d6f7e:	f000 bdc7 	b.w	d7b10 <__cxa_atexit>

000d6f82 <_ZdlPvj>:
   d6f82:	f7fd b88c 	b.w	d409e <_ZdlPv>

000d6f86 <_ZSt25__throw_bad_function_callv>:
   d6f86:	b508      	push	{r3, lr}
   d6f88:	f7ff f9a2 	bl	d62d0 <abort>

000d6f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6f8c:	4b24      	ldr	r3, [pc, #144]	; (d7020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6f8e:	681a      	ldr	r2, [r3, #0]
   d6f90:	07d0      	lsls	r0, r2, #31
   d6f92:	bf5c      	itt	pl
   d6f94:	2201      	movpl	r2, #1
   d6f96:	601a      	strpl	r2, [r3, #0]
   d6f98:	4b22      	ldr	r3, [pc, #136]	; (d7024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6f9a:	681a      	ldr	r2, [r3, #0]
   d6f9c:	07d1      	lsls	r1, r2, #31
   d6f9e:	bf5c      	itt	pl
   d6fa0:	2201      	movpl	r2, #1
   d6fa2:	601a      	strpl	r2, [r3, #0]
   d6fa4:	4b20      	ldr	r3, [pc, #128]	; (d7028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6fa6:	681a      	ldr	r2, [r3, #0]
   d6fa8:	07d2      	lsls	r2, r2, #31
   d6faa:	bf5c      	itt	pl
   d6fac:	2201      	movpl	r2, #1
   d6fae:	601a      	strpl	r2, [r3, #0]
   d6fb0:	4b1e      	ldr	r3, [pc, #120]	; (d702c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6fb2:	681a      	ldr	r2, [r3, #0]
   d6fb4:	07d0      	lsls	r0, r2, #31
   d6fb6:	bf5c      	itt	pl
   d6fb8:	2201      	movpl	r2, #1
   d6fba:	601a      	strpl	r2, [r3, #0]
   d6fbc:	4b1c      	ldr	r3, [pc, #112]	; (d7030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6fbe:	681a      	ldr	r2, [r3, #0]
   d6fc0:	07d1      	lsls	r1, r2, #31
   d6fc2:	bf5c      	itt	pl
   d6fc4:	2201      	movpl	r2, #1
   d6fc6:	601a      	strpl	r2, [r3, #0]
   d6fc8:	4b1a      	ldr	r3, [pc, #104]	; (d7034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6fca:	681a      	ldr	r2, [r3, #0]
   d6fcc:	07d2      	lsls	r2, r2, #31
   d6fce:	bf5c      	itt	pl
   d6fd0:	2201      	movpl	r2, #1
   d6fd2:	601a      	strpl	r2, [r3, #0]
   d6fd4:	4b18      	ldr	r3, [pc, #96]	; (d7038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6fd6:	681a      	ldr	r2, [r3, #0]
   d6fd8:	07d0      	lsls	r0, r2, #31
   d6fda:	bf5c      	itt	pl
   d6fdc:	2201      	movpl	r2, #1
   d6fde:	601a      	strpl	r2, [r3, #0]
   d6fe0:	4b16      	ldr	r3, [pc, #88]	; (d703c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6fe2:	681a      	ldr	r2, [r3, #0]
   d6fe4:	07d1      	lsls	r1, r2, #31
   d6fe6:	bf5c      	itt	pl
   d6fe8:	2201      	movpl	r2, #1
   d6fea:	601a      	strpl	r2, [r3, #0]
   d6fec:	4b14      	ldr	r3, [pc, #80]	; (d7040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6fee:	681a      	ldr	r2, [r3, #0]
   d6ff0:	07d2      	lsls	r2, r2, #31
   d6ff2:	bf5c      	itt	pl
   d6ff4:	2201      	movpl	r2, #1
   d6ff6:	601a      	strpl	r2, [r3, #0]
   d6ff8:	4b12      	ldr	r3, [pc, #72]	; (d7044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6ffa:	681a      	ldr	r2, [r3, #0]
   d6ffc:	07d0      	lsls	r0, r2, #31
   d6ffe:	bf5c      	itt	pl
   d7000:	2201      	movpl	r2, #1
   d7002:	601a      	strpl	r2, [r3, #0]
   d7004:	4b10      	ldr	r3, [pc, #64]	; (d7048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7006:	681a      	ldr	r2, [r3, #0]
   d7008:	07d1      	lsls	r1, r2, #31
   d700a:	bf5c      	itt	pl
   d700c:	2201      	movpl	r2, #1
   d700e:	601a      	strpl	r2, [r3, #0]
   d7010:	4b0e      	ldr	r3, [pc, #56]	; (d704c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7012:	681a      	ldr	r2, [r3, #0]
   d7014:	07d2      	lsls	r2, r2, #31
   d7016:	bf5c      	itt	pl
   d7018:	2201      	movpl	r2, #1
   d701a:	601a      	strpl	r2, [r3, #0]
   d701c:	4770      	bx	lr
   d701e:	bf00      	nop
   d7020:	2003e77c 	.word	0x2003e77c
   d7024:	2003e778 	.word	0x2003e778
   d7028:	2003e774 	.word	0x2003e774
   d702c:	2003e770 	.word	0x2003e770
   d7030:	2003e76c 	.word	0x2003e76c
   d7034:	2003e768 	.word	0x2003e768
   d7038:	2003e764 	.word	0x2003e764
   d703c:	2003e760 	.word	0x2003e760
   d7040:	2003e75c 	.word	0x2003e75c
   d7044:	2003e758 	.word	0x2003e758
   d7048:	2003e754 	.word	0x2003e754
   d704c:	2003e750 	.word	0x2003e750

000d7050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7050:	4b18      	ldr	r3, [pc, #96]	; (d70b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7052:	681a      	ldr	r2, [r3, #0]
   d7054:	07d1      	lsls	r1, r2, #31
   d7056:	bf5c      	itt	pl
   d7058:	2201      	movpl	r2, #1
   d705a:	601a      	strpl	r2, [r3, #0]
   d705c:	4b16      	ldr	r3, [pc, #88]	; (d70b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d705e:	681a      	ldr	r2, [r3, #0]
   d7060:	07d2      	lsls	r2, r2, #31
   d7062:	bf5c      	itt	pl
   d7064:	2201      	movpl	r2, #1
   d7066:	601a      	strpl	r2, [r3, #0]
   d7068:	4b14      	ldr	r3, [pc, #80]	; (d70bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d706a:	681a      	ldr	r2, [r3, #0]
   d706c:	07d0      	lsls	r0, r2, #31
   d706e:	bf5c      	itt	pl
   d7070:	2201      	movpl	r2, #1
   d7072:	601a      	strpl	r2, [r3, #0]
   d7074:	4b12      	ldr	r3, [pc, #72]	; (d70c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7076:	681a      	ldr	r2, [r3, #0]
   d7078:	07d1      	lsls	r1, r2, #31
   d707a:	bf5c      	itt	pl
   d707c:	2201      	movpl	r2, #1
   d707e:	601a      	strpl	r2, [r3, #0]
   d7080:	4b10      	ldr	r3, [pc, #64]	; (d70c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7082:	681a      	ldr	r2, [r3, #0]
   d7084:	07d2      	lsls	r2, r2, #31
   d7086:	bf5c      	itt	pl
   d7088:	2201      	movpl	r2, #1
   d708a:	601a      	strpl	r2, [r3, #0]
   d708c:	4b0e      	ldr	r3, [pc, #56]	; (d70c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d708e:	681a      	ldr	r2, [r3, #0]
   d7090:	07d0      	lsls	r0, r2, #31
   d7092:	bf5c      	itt	pl
   d7094:	2201      	movpl	r2, #1
   d7096:	601a      	strpl	r2, [r3, #0]
   d7098:	4b0c      	ldr	r3, [pc, #48]	; (d70cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d709a:	681a      	ldr	r2, [r3, #0]
   d709c:	07d1      	lsls	r1, r2, #31
   d709e:	bf5c      	itt	pl
   d70a0:	2201      	movpl	r2, #1
   d70a2:	601a      	strpl	r2, [r3, #0]
   d70a4:	4b0a      	ldr	r3, [pc, #40]	; (d70d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d70a6:	681a      	ldr	r2, [r3, #0]
   d70a8:	07d2      	lsls	r2, r2, #31
   d70aa:	bf5c      	itt	pl
   d70ac:	2201      	movpl	r2, #1
   d70ae:	601a      	strpl	r2, [r3, #0]
   d70b0:	4770      	bx	lr
   d70b2:	bf00      	nop
   d70b4:	2003e79c 	.word	0x2003e79c
   d70b8:	2003e798 	.word	0x2003e798
   d70bc:	2003e794 	.word	0x2003e794
   d70c0:	2003e790 	.word	0x2003e790
   d70c4:	2003e78c 	.word	0x2003e78c
   d70c8:	2003e788 	.word	0x2003e788
   d70cc:	2003e784 	.word	0x2003e784
   d70d0:	2003e780 	.word	0x2003e780

000d70d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d70d4:	4b18      	ldr	r3, [pc, #96]	; (d7138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d70d6:	681a      	ldr	r2, [r3, #0]
   d70d8:	07d1      	lsls	r1, r2, #31
   d70da:	bf5c      	itt	pl
   d70dc:	2201      	movpl	r2, #1
   d70de:	601a      	strpl	r2, [r3, #0]
   d70e0:	4b16      	ldr	r3, [pc, #88]	; (d713c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d70e2:	681a      	ldr	r2, [r3, #0]
   d70e4:	07d2      	lsls	r2, r2, #31
   d70e6:	bf5c      	itt	pl
   d70e8:	2201      	movpl	r2, #1
   d70ea:	601a      	strpl	r2, [r3, #0]
   d70ec:	4b14      	ldr	r3, [pc, #80]	; (d7140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d70ee:	681a      	ldr	r2, [r3, #0]
   d70f0:	07d0      	lsls	r0, r2, #31
   d70f2:	bf5c      	itt	pl
   d70f4:	2201      	movpl	r2, #1
   d70f6:	601a      	strpl	r2, [r3, #0]
   d70f8:	4b12      	ldr	r3, [pc, #72]	; (d7144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d70fa:	681a      	ldr	r2, [r3, #0]
   d70fc:	07d1      	lsls	r1, r2, #31
   d70fe:	bf5c      	itt	pl
   d7100:	2201      	movpl	r2, #1
   d7102:	601a      	strpl	r2, [r3, #0]
   d7104:	4b10      	ldr	r3, [pc, #64]	; (d7148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7106:	681a      	ldr	r2, [r3, #0]
   d7108:	07d2      	lsls	r2, r2, #31
   d710a:	bf5c      	itt	pl
   d710c:	2201      	movpl	r2, #1
   d710e:	601a      	strpl	r2, [r3, #0]
   d7110:	4b0e      	ldr	r3, [pc, #56]	; (d714c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7112:	681a      	ldr	r2, [r3, #0]
   d7114:	07d0      	lsls	r0, r2, #31
   d7116:	bf5c      	itt	pl
   d7118:	2201      	movpl	r2, #1
   d711a:	601a      	strpl	r2, [r3, #0]
   d711c:	4b0c      	ldr	r3, [pc, #48]	; (d7150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d711e:	681a      	ldr	r2, [r3, #0]
   d7120:	07d1      	lsls	r1, r2, #31
   d7122:	bf5c      	itt	pl
   d7124:	2201      	movpl	r2, #1
   d7126:	601a      	strpl	r2, [r3, #0]
   d7128:	4b0a      	ldr	r3, [pc, #40]	; (d7154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d712a:	681a      	ldr	r2, [r3, #0]
   d712c:	07d2      	lsls	r2, r2, #31
   d712e:	bf5c      	itt	pl
   d7130:	2201      	movpl	r2, #1
   d7132:	601a      	strpl	r2, [r3, #0]
   d7134:	4770      	bx	lr
   d7136:	bf00      	nop
   d7138:	2003e7bc 	.word	0x2003e7bc
   d713c:	2003e7b8 	.word	0x2003e7b8
   d7140:	2003e7b4 	.word	0x2003e7b4
   d7144:	2003e7b0 	.word	0x2003e7b0
   d7148:	2003e7ac 	.word	0x2003e7ac
   d714c:	2003e7a8 	.word	0x2003e7a8
   d7150:	2003e7a4 	.word	0x2003e7a4
   d7154:	2003e7a0 	.word	0x2003e7a0

000d7158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7158:	4b24      	ldr	r3, [pc, #144]	; (d71ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d715a:	681a      	ldr	r2, [r3, #0]
   d715c:	07d0      	lsls	r0, r2, #31
   d715e:	bf5c      	itt	pl
   d7160:	2201      	movpl	r2, #1
   d7162:	601a      	strpl	r2, [r3, #0]
   d7164:	4b22      	ldr	r3, [pc, #136]	; (d71f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7166:	681a      	ldr	r2, [r3, #0]
   d7168:	07d1      	lsls	r1, r2, #31
   d716a:	bf5c      	itt	pl
   d716c:	2201      	movpl	r2, #1
   d716e:	601a      	strpl	r2, [r3, #0]
   d7170:	4b20      	ldr	r3, [pc, #128]	; (d71f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7172:	681a      	ldr	r2, [r3, #0]
   d7174:	07d2      	lsls	r2, r2, #31
   d7176:	bf5c      	itt	pl
   d7178:	2201      	movpl	r2, #1
   d717a:	601a      	strpl	r2, [r3, #0]
   d717c:	4b1e      	ldr	r3, [pc, #120]	; (d71f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d717e:	681a      	ldr	r2, [r3, #0]
   d7180:	07d0      	lsls	r0, r2, #31
   d7182:	bf5c      	itt	pl
   d7184:	2201      	movpl	r2, #1
   d7186:	601a      	strpl	r2, [r3, #0]
   d7188:	4b1c      	ldr	r3, [pc, #112]	; (d71fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d718a:	681a      	ldr	r2, [r3, #0]
   d718c:	07d1      	lsls	r1, r2, #31
   d718e:	bf5c      	itt	pl
   d7190:	2201      	movpl	r2, #1
   d7192:	601a      	strpl	r2, [r3, #0]
   d7194:	4b1a      	ldr	r3, [pc, #104]	; (d7200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7196:	681a      	ldr	r2, [r3, #0]
   d7198:	07d2      	lsls	r2, r2, #31
   d719a:	bf5c      	itt	pl
   d719c:	2201      	movpl	r2, #1
   d719e:	601a      	strpl	r2, [r3, #0]
   d71a0:	4b18      	ldr	r3, [pc, #96]	; (d7204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d71a2:	681a      	ldr	r2, [r3, #0]
   d71a4:	07d0      	lsls	r0, r2, #31
   d71a6:	bf5c      	itt	pl
   d71a8:	2201      	movpl	r2, #1
   d71aa:	601a      	strpl	r2, [r3, #0]
   d71ac:	4b16      	ldr	r3, [pc, #88]	; (d7208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d71ae:	681a      	ldr	r2, [r3, #0]
   d71b0:	07d1      	lsls	r1, r2, #31
   d71b2:	bf5c      	itt	pl
   d71b4:	2201      	movpl	r2, #1
   d71b6:	601a      	strpl	r2, [r3, #0]
   d71b8:	4b14      	ldr	r3, [pc, #80]	; (d720c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d71ba:	681a      	ldr	r2, [r3, #0]
   d71bc:	07d2      	lsls	r2, r2, #31
   d71be:	bf5c      	itt	pl
   d71c0:	2201      	movpl	r2, #1
   d71c2:	601a      	strpl	r2, [r3, #0]
   d71c4:	4b12      	ldr	r3, [pc, #72]	; (d7210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d71c6:	681a      	ldr	r2, [r3, #0]
   d71c8:	07d0      	lsls	r0, r2, #31
   d71ca:	bf5c      	itt	pl
   d71cc:	2201      	movpl	r2, #1
   d71ce:	601a      	strpl	r2, [r3, #0]
   d71d0:	4b10      	ldr	r3, [pc, #64]	; (d7214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d71d2:	681a      	ldr	r2, [r3, #0]
   d71d4:	07d1      	lsls	r1, r2, #31
   d71d6:	bf5c      	itt	pl
   d71d8:	2201      	movpl	r2, #1
   d71da:	601a      	strpl	r2, [r3, #0]
   d71dc:	4b0e      	ldr	r3, [pc, #56]	; (d7218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d71de:	681a      	ldr	r2, [r3, #0]
   d71e0:	07d2      	lsls	r2, r2, #31
   d71e2:	bf5c      	itt	pl
   d71e4:	2201      	movpl	r2, #1
   d71e6:	601a      	strpl	r2, [r3, #0]
   d71e8:	4770      	bx	lr
   d71ea:	bf00      	nop
   d71ec:	2003e7ec 	.word	0x2003e7ec
   d71f0:	2003e7e8 	.word	0x2003e7e8
   d71f4:	2003e7e4 	.word	0x2003e7e4
   d71f8:	2003e7e0 	.word	0x2003e7e0
   d71fc:	2003e7dc 	.word	0x2003e7dc
   d7200:	2003e7d8 	.word	0x2003e7d8
   d7204:	2003e7d4 	.word	0x2003e7d4
   d7208:	2003e7d0 	.word	0x2003e7d0
   d720c:	2003e7cc 	.word	0x2003e7cc
   d7210:	2003e7c8 	.word	0x2003e7c8
   d7214:	2003e7c4 	.word	0x2003e7c4
   d7218:	2003e7c0 	.word	0x2003e7c0

000d721c <__aeabi_drsub>:
   d721c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7220:	e002      	b.n	d7228 <__adddf3>
   d7222:	bf00      	nop

000d7224 <__aeabi_dsub>:
   d7224:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7228 <__adddf3>:
   d7228:	b530      	push	{r4, r5, lr}
   d722a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d722e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7232:	ea94 0f05 	teq	r4, r5
   d7236:	bf08      	it	eq
   d7238:	ea90 0f02 	teqeq	r0, r2
   d723c:	bf1f      	itttt	ne
   d723e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7242:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7246:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d724a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d724e:	f000 80e2 	beq.w	d7416 <__adddf3+0x1ee>
   d7252:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7256:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d725a:	bfb8      	it	lt
   d725c:	426d      	neglt	r5, r5
   d725e:	dd0c      	ble.n	d727a <__adddf3+0x52>
   d7260:	442c      	add	r4, r5
   d7262:	ea80 0202 	eor.w	r2, r0, r2
   d7266:	ea81 0303 	eor.w	r3, r1, r3
   d726a:	ea82 0000 	eor.w	r0, r2, r0
   d726e:	ea83 0101 	eor.w	r1, r3, r1
   d7272:	ea80 0202 	eor.w	r2, r0, r2
   d7276:	ea81 0303 	eor.w	r3, r1, r3
   d727a:	2d36      	cmp	r5, #54	; 0x36
   d727c:	bf88      	it	hi
   d727e:	bd30      	pophi	{r4, r5, pc}
   d7280:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7284:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7288:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d728c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7290:	d002      	beq.n	d7298 <__adddf3+0x70>
   d7292:	4240      	negs	r0, r0
   d7294:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7298:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d729c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d72a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d72a4:	d002      	beq.n	d72ac <__adddf3+0x84>
   d72a6:	4252      	negs	r2, r2
   d72a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d72ac:	ea94 0f05 	teq	r4, r5
   d72b0:	f000 80a7 	beq.w	d7402 <__adddf3+0x1da>
   d72b4:	f1a4 0401 	sub.w	r4, r4, #1
   d72b8:	f1d5 0e20 	rsbs	lr, r5, #32
   d72bc:	db0d      	blt.n	d72da <__adddf3+0xb2>
   d72be:	fa02 fc0e 	lsl.w	ip, r2, lr
   d72c2:	fa22 f205 	lsr.w	r2, r2, r5
   d72c6:	1880      	adds	r0, r0, r2
   d72c8:	f141 0100 	adc.w	r1, r1, #0
   d72cc:	fa03 f20e 	lsl.w	r2, r3, lr
   d72d0:	1880      	adds	r0, r0, r2
   d72d2:	fa43 f305 	asr.w	r3, r3, r5
   d72d6:	4159      	adcs	r1, r3
   d72d8:	e00e      	b.n	d72f8 <__adddf3+0xd0>
   d72da:	f1a5 0520 	sub.w	r5, r5, #32
   d72de:	f10e 0e20 	add.w	lr, lr, #32
   d72e2:	2a01      	cmp	r2, #1
   d72e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d72e8:	bf28      	it	cs
   d72ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   d72ee:	fa43 f305 	asr.w	r3, r3, r5
   d72f2:	18c0      	adds	r0, r0, r3
   d72f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d72f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d72fc:	d507      	bpl.n	d730e <__adddf3+0xe6>
   d72fe:	f04f 0e00 	mov.w	lr, #0
   d7302:	f1dc 0c00 	rsbs	ip, ip, #0
   d7306:	eb7e 0000 	sbcs.w	r0, lr, r0
   d730a:	eb6e 0101 	sbc.w	r1, lr, r1
   d730e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7312:	d31b      	bcc.n	d734c <__adddf3+0x124>
   d7314:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7318:	d30c      	bcc.n	d7334 <__adddf3+0x10c>
   d731a:	0849      	lsrs	r1, r1, #1
   d731c:	ea5f 0030 	movs.w	r0, r0, rrx
   d7320:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7324:	f104 0401 	add.w	r4, r4, #1
   d7328:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d732c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7330:	f080 809a 	bcs.w	d7468 <__adddf3+0x240>
   d7334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7338:	bf08      	it	eq
   d733a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d733e:	f150 0000 	adcs.w	r0, r0, #0
   d7342:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7346:	ea41 0105 	orr.w	r1, r1, r5
   d734a:	bd30      	pop	{r4, r5, pc}
   d734c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7350:	4140      	adcs	r0, r0
   d7352:	eb41 0101 	adc.w	r1, r1, r1
   d7356:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d735a:	f1a4 0401 	sub.w	r4, r4, #1
   d735e:	d1e9      	bne.n	d7334 <__adddf3+0x10c>
   d7360:	f091 0f00 	teq	r1, #0
   d7364:	bf04      	itt	eq
   d7366:	4601      	moveq	r1, r0
   d7368:	2000      	moveq	r0, #0
   d736a:	fab1 f381 	clz	r3, r1
   d736e:	bf08      	it	eq
   d7370:	3320      	addeq	r3, #32
   d7372:	f1a3 030b 	sub.w	r3, r3, #11
   d7376:	f1b3 0220 	subs.w	r2, r3, #32
   d737a:	da0c      	bge.n	d7396 <__adddf3+0x16e>
   d737c:	320c      	adds	r2, #12
   d737e:	dd08      	ble.n	d7392 <__adddf3+0x16a>
   d7380:	f102 0c14 	add.w	ip, r2, #20
   d7384:	f1c2 020c 	rsb	r2, r2, #12
   d7388:	fa01 f00c 	lsl.w	r0, r1, ip
   d738c:	fa21 f102 	lsr.w	r1, r1, r2
   d7390:	e00c      	b.n	d73ac <__adddf3+0x184>
   d7392:	f102 0214 	add.w	r2, r2, #20
   d7396:	bfd8      	it	le
   d7398:	f1c2 0c20 	rsble	ip, r2, #32
   d739c:	fa01 f102 	lsl.w	r1, r1, r2
   d73a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d73a4:	bfdc      	itt	le
   d73a6:	ea41 010c 	orrle.w	r1, r1, ip
   d73aa:	4090      	lslle	r0, r2
   d73ac:	1ae4      	subs	r4, r4, r3
   d73ae:	bfa2      	ittt	ge
   d73b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d73b4:	4329      	orrge	r1, r5
   d73b6:	bd30      	popge	{r4, r5, pc}
   d73b8:	ea6f 0404 	mvn.w	r4, r4
   d73bc:	3c1f      	subs	r4, #31
   d73be:	da1c      	bge.n	d73fa <__adddf3+0x1d2>
   d73c0:	340c      	adds	r4, #12
   d73c2:	dc0e      	bgt.n	d73e2 <__adddf3+0x1ba>
   d73c4:	f104 0414 	add.w	r4, r4, #20
   d73c8:	f1c4 0220 	rsb	r2, r4, #32
   d73cc:	fa20 f004 	lsr.w	r0, r0, r4
   d73d0:	fa01 f302 	lsl.w	r3, r1, r2
   d73d4:	ea40 0003 	orr.w	r0, r0, r3
   d73d8:	fa21 f304 	lsr.w	r3, r1, r4
   d73dc:	ea45 0103 	orr.w	r1, r5, r3
   d73e0:	bd30      	pop	{r4, r5, pc}
   d73e2:	f1c4 040c 	rsb	r4, r4, #12
   d73e6:	f1c4 0220 	rsb	r2, r4, #32
   d73ea:	fa20 f002 	lsr.w	r0, r0, r2
   d73ee:	fa01 f304 	lsl.w	r3, r1, r4
   d73f2:	ea40 0003 	orr.w	r0, r0, r3
   d73f6:	4629      	mov	r1, r5
   d73f8:	bd30      	pop	{r4, r5, pc}
   d73fa:	fa21 f004 	lsr.w	r0, r1, r4
   d73fe:	4629      	mov	r1, r5
   d7400:	bd30      	pop	{r4, r5, pc}
   d7402:	f094 0f00 	teq	r4, #0
   d7406:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d740a:	bf06      	itte	eq
   d740c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7410:	3401      	addeq	r4, #1
   d7412:	3d01      	subne	r5, #1
   d7414:	e74e      	b.n	d72b4 <__adddf3+0x8c>
   d7416:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d741a:	bf18      	it	ne
   d741c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7420:	d029      	beq.n	d7476 <__adddf3+0x24e>
   d7422:	ea94 0f05 	teq	r4, r5
   d7426:	bf08      	it	eq
   d7428:	ea90 0f02 	teqeq	r0, r2
   d742c:	d005      	beq.n	d743a <__adddf3+0x212>
   d742e:	ea54 0c00 	orrs.w	ip, r4, r0
   d7432:	bf04      	itt	eq
   d7434:	4619      	moveq	r1, r3
   d7436:	4610      	moveq	r0, r2
   d7438:	bd30      	pop	{r4, r5, pc}
   d743a:	ea91 0f03 	teq	r1, r3
   d743e:	bf1e      	ittt	ne
   d7440:	2100      	movne	r1, #0
   d7442:	2000      	movne	r0, #0
   d7444:	bd30      	popne	{r4, r5, pc}
   d7446:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d744a:	d105      	bne.n	d7458 <__adddf3+0x230>
   d744c:	0040      	lsls	r0, r0, #1
   d744e:	4149      	adcs	r1, r1
   d7450:	bf28      	it	cs
   d7452:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7456:	bd30      	pop	{r4, r5, pc}
   d7458:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d745c:	bf3c      	itt	cc
   d745e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7462:	bd30      	popcc	{r4, r5, pc}
   d7464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7468:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d746c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7470:	f04f 0000 	mov.w	r0, #0
   d7474:	bd30      	pop	{r4, r5, pc}
   d7476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d747a:	bf1a      	itte	ne
   d747c:	4619      	movne	r1, r3
   d747e:	4610      	movne	r0, r2
   d7480:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7484:	bf1c      	itt	ne
   d7486:	460b      	movne	r3, r1
   d7488:	4602      	movne	r2, r0
   d748a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d748e:	bf06      	itte	eq
   d7490:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7494:	ea91 0f03 	teqeq	r1, r3
   d7498:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d749c:	bd30      	pop	{r4, r5, pc}
   d749e:	bf00      	nop

000d74a0 <__aeabi_ui2d>:
   d74a0:	f090 0f00 	teq	r0, #0
   d74a4:	bf04      	itt	eq
   d74a6:	2100      	moveq	r1, #0
   d74a8:	4770      	bxeq	lr
   d74aa:	b530      	push	{r4, r5, lr}
   d74ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d74b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d74b4:	f04f 0500 	mov.w	r5, #0
   d74b8:	f04f 0100 	mov.w	r1, #0
   d74bc:	e750      	b.n	d7360 <__adddf3+0x138>
   d74be:	bf00      	nop

000d74c0 <__aeabi_i2d>:
   d74c0:	f090 0f00 	teq	r0, #0
   d74c4:	bf04      	itt	eq
   d74c6:	2100      	moveq	r1, #0
   d74c8:	4770      	bxeq	lr
   d74ca:	b530      	push	{r4, r5, lr}
   d74cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d74d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d74d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d74d8:	bf48      	it	mi
   d74da:	4240      	negmi	r0, r0
   d74dc:	f04f 0100 	mov.w	r1, #0
   d74e0:	e73e      	b.n	d7360 <__adddf3+0x138>
   d74e2:	bf00      	nop

000d74e4 <__aeabi_f2d>:
   d74e4:	0042      	lsls	r2, r0, #1
   d74e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d74ea:	ea4f 0131 	mov.w	r1, r1, rrx
   d74ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d74f2:	bf1f      	itttt	ne
   d74f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d74f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d74fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7500:	4770      	bxne	lr
   d7502:	f092 0f00 	teq	r2, #0
   d7506:	bf14      	ite	ne
   d7508:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d750c:	4770      	bxeq	lr
   d750e:	b530      	push	{r4, r5, lr}
   d7510:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7518:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d751c:	e720      	b.n	d7360 <__adddf3+0x138>
   d751e:	bf00      	nop

000d7520 <__aeabi_ul2d>:
   d7520:	ea50 0201 	orrs.w	r2, r0, r1
   d7524:	bf08      	it	eq
   d7526:	4770      	bxeq	lr
   d7528:	b530      	push	{r4, r5, lr}
   d752a:	f04f 0500 	mov.w	r5, #0
   d752e:	e00a      	b.n	d7546 <__aeabi_l2d+0x16>

000d7530 <__aeabi_l2d>:
   d7530:	ea50 0201 	orrs.w	r2, r0, r1
   d7534:	bf08      	it	eq
   d7536:	4770      	bxeq	lr
   d7538:	b530      	push	{r4, r5, lr}
   d753a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d753e:	d502      	bpl.n	d7546 <__aeabi_l2d+0x16>
   d7540:	4240      	negs	r0, r0
   d7542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7546:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d754a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d754e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7552:	f43f aedc 	beq.w	d730e <__adddf3+0xe6>
   d7556:	f04f 0203 	mov.w	r2, #3
   d755a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d755e:	bf18      	it	ne
   d7560:	3203      	addne	r2, #3
   d7562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7566:	bf18      	it	ne
   d7568:	3203      	addne	r2, #3
   d756a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d756e:	f1c2 0320 	rsb	r3, r2, #32
   d7572:	fa00 fc03 	lsl.w	ip, r0, r3
   d7576:	fa20 f002 	lsr.w	r0, r0, r2
   d757a:	fa01 fe03 	lsl.w	lr, r1, r3
   d757e:	ea40 000e 	orr.w	r0, r0, lr
   d7582:	fa21 f102 	lsr.w	r1, r1, r2
   d7586:	4414      	add	r4, r2
   d7588:	e6c1      	b.n	d730e <__adddf3+0xe6>
   d758a:	bf00      	nop

000d758c <__aeabi_dmul>:
   d758c:	b570      	push	{r4, r5, r6, lr}
   d758e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7592:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7596:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d759a:	bf1d      	ittte	ne
   d759c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d75a0:	ea94 0f0c 	teqne	r4, ip
   d75a4:	ea95 0f0c 	teqne	r5, ip
   d75a8:	f000 f8de 	bleq	d7768 <__aeabi_dmul+0x1dc>
   d75ac:	442c      	add	r4, r5
   d75ae:	ea81 0603 	eor.w	r6, r1, r3
   d75b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d75b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d75ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d75be:	bf18      	it	ne
   d75c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d75c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d75c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d75cc:	d038      	beq.n	d7640 <__aeabi_dmul+0xb4>
   d75ce:	fba0 ce02 	umull	ip, lr, r0, r2
   d75d2:	f04f 0500 	mov.w	r5, #0
   d75d6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d75da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d75de:	fbe0 e503 	umlal	lr, r5, r0, r3
   d75e2:	f04f 0600 	mov.w	r6, #0
   d75e6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d75ea:	f09c 0f00 	teq	ip, #0
   d75ee:	bf18      	it	ne
   d75f0:	f04e 0e01 	orrne.w	lr, lr, #1
   d75f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d75f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d75fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7600:	d204      	bcs.n	d760c <__aeabi_dmul+0x80>
   d7602:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7606:	416d      	adcs	r5, r5
   d7608:	eb46 0606 	adc.w	r6, r6, r6
   d760c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7610:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7614:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7618:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d761c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7620:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7624:	bf88      	it	hi
   d7626:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d762a:	d81e      	bhi.n	d766a <__aeabi_dmul+0xde>
   d762c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7630:	bf08      	it	eq
   d7632:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7636:	f150 0000 	adcs.w	r0, r0, #0
   d763a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d763e:	bd70      	pop	{r4, r5, r6, pc}
   d7640:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7644:	ea46 0101 	orr.w	r1, r6, r1
   d7648:	ea40 0002 	orr.w	r0, r0, r2
   d764c:	ea81 0103 	eor.w	r1, r1, r3
   d7650:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7654:	bfc2      	ittt	gt
   d7656:	ebd4 050c 	rsbsgt	r5, r4, ip
   d765a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d765e:	bd70      	popgt	{r4, r5, r6, pc}
   d7660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7664:	f04f 0e00 	mov.w	lr, #0
   d7668:	3c01      	subs	r4, #1
   d766a:	f300 80ab 	bgt.w	d77c4 <__aeabi_dmul+0x238>
   d766e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7672:	bfde      	ittt	le
   d7674:	2000      	movle	r0, #0
   d7676:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d767a:	bd70      	pople	{r4, r5, r6, pc}
   d767c:	f1c4 0400 	rsb	r4, r4, #0
   d7680:	3c20      	subs	r4, #32
   d7682:	da35      	bge.n	d76f0 <__aeabi_dmul+0x164>
   d7684:	340c      	adds	r4, #12
   d7686:	dc1b      	bgt.n	d76c0 <__aeabi_dmul+0x134>
   d7688:	f104 0414 	add.w	r4, r4, #20
   d768c:	f1c4 0520 	rsb	r5, r4, #32
   d7690:	fa00 f305 	lsl.w	r3, r0, r5
   d7694:	fa20 f004 	lsr.w	r0, r0, r4
   d7698:	fa01 f205 	lsl.w	r2, r1, r5
   d769c:	ea40 0002 	orr.w	r0, r0, r2
   d76a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d76a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d76a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d76ac:	fa21 f604 	lsr.w	r6, r1, r4
   d76b0:	eb42 0106 	adc.w	r1, r2, r6
   d76b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d76b8:	bf08      	it	eq
   d76ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d76be:	bd70      	pop	{r4, r5, r6, pc}
   d76c0:	f1c4 040c 	rsb	r4, r4, #12
   d76c4:	f1c4 0520 	rsb	r5, r4, #32
   d76c8:	fa00 f304 	lsl.w	r3, r0, r4
   d76cc:	fa20 f005 	lsr.w	r0, r0, r5
   d76d0:	fa01 f204 	lsl.w	r2, r1, r4
   d76d4:	ea40 0002 	orr.w	r0, r0, r2
   d76d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d76dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d76e0:	f141 0100 	adc.w	r1, r1, #0
   d76e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d76e8:	bf08      	it	eq
   d76ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d76ee:	bd70      	pop	{r4, r5, r6, pc}
   d76f0:	f1c4 0520 	rsb	r5, r4, #32
   d76f4:	fa00 f205 	lsl.w	r2, r0, r5
   d76f8:	ea4e 0e02 	orr.w	lr, lr, r2
   d76fc:	fa20 f304 	lsr.w	r3, r0, r4
   d7700:	fa01 f205 	lsl.w	r2, r1, r5
   d7704:	ea43 0302 	orr.w	r3, r3, r2
   d7708:	fa21 f004 	lsr.w	r0, r1, r4
   d770c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7710:	fa21 f204 	lsr.w	r2, r1, r4
   d7714:	ea20 0002 	bic.w	r0, r0, r2
   d7718:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d771c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7720:	bf08      	it	eq
   d7722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7726:	bd70      	pop	{r4, r5, r6, pc}
   d7728:	f094 0f00 	teq	r4, #0
   d772c:	d10f      	bne.n	d774e <__aeabi_dmul+0x1c2>
   d772e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7732:	0040      	lsls	r0, r0, #1
   d7734:	eb41 0101 	adc.w	r1, r1, r1
   d7738:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d773c:	bf08      	it	eq
   d773e:	3c01      	subeq	r4, #1
   d7740:	d0f7      	beq.n	d7732 <__aeabi_dmul+0x1a6>
   d7742:	ea41 0106 	orr.w	r1, r1, r6
   d7746:	f095 0f00 	teq	r5, #0
   d774a:	bf18      	it	ne
   d774c:	4770      	bxne	lr
   d774e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7752:	0052      	lsls	r2, r2, #1
   d7754:	eb43 0303 	adc.w	r3, r3, r3
   d7758:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d775c:	bf08      	it	eq
   d775e:	3d01      	subeq	r5, #1
   d7760:	d0f7      	beq.n	d7752 <__aeabi_dmul+0x1c6>
   d7762:	ea43 0306 	orr.w	r3, r3, r6
   d7766:	4770      	bx	lr
   d7768:	ea94 0f0c 	teq	r4, ip
   d776c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7770:	bf18      	it	ne
   d7772:	ea95 0f0c 	teqne	r5, ip
   d7776:	d00c      	beq.n	d7792 <__aeabi_dmul+0x206>
   d7778:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d777c:	bf18      	it	ne
   d777e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7782:	d1d1      	bne.n	d7728 <__aeabi_dmul+0x19c>
   d7784:	ea81 0103 	eor.w	r1, r1, r3
   d7788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d778c:	f04f 0000 	mov.w	r0, #0
   d7790:	bd70      	pop	{r4, r5, r6, pc}
   d7792:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7796:	bf06      	itte	eq
   d7798:	4610      	moveq	r0, r2
   d779a:	4619      	moveq	r1, r3
   d779c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d77a0:	d019      	beq.n	d77d6 <__aeabi_dmul+0x24a>
   d77a2:	ea94 0f0c 	teq	r4, ip
   d77a6:	d102      	bne.n	d77ae <__aeabi_dmul+0x222>
   d77a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d77ac:	d113      	bne.n	d77d6 <__aeabi_dmul+0x24a>
   d77ae:	ea95 0f0c 	teq	r5, ip
   d77b2:	d105      	bne.n	d77c0 <__aeabi_dmul+0x234>
   d77b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d77b8:	bf1c      	itt	ne
   d77ba:	4610      	movne	r0, r2
   d77bc:	4619      	movne	r1, r3
   d77be:	d10a      	bne.n	d77d6 <__aeabi_dmul+0x24a>
   d77c0:	ea81 0103 	eor.w	r1, r1, r3
   d77c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d77c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d77cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d77d0:	f04f 0000 	mov.w	r0, #0
   d77d4:	bd70      	pop	{r4, r5, r6, pc}
   d77d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d77da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d77de:	bd70      	pop	{r4, r5, r6, pc}

000d77e0 <__aeabi_ddiv>:
   d77e0:	b570      	push	{r4, r5, r6, lr}
   d77e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d77e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d77ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d77ee:	bf1d      	ittte	ne
   d77f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d77f4:	ea94 0f0c 	teqne	r4, ip
   d77f8:	ea95 0f0c 	teqne	r5, ip
   d77fc:	f000 f8a7 	bleq	d794e <__aeabi_ddiv+0x16e>
   d7800:	eba4 0405 	sub.w	r4, r4, r5
   d7804:	ea81 0e03 	eor.w	lr, r1, r3
   d7808:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d780c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7810:	f000 8088 	beq.w	d7924 <__aeabi_ddiv+0x144>
   d7814:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7818:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d781c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7820:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7824:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7828:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d782c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7830:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7834:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7838:	429d      	cmp	r5, r3
   d783a:	bf08      	it	eq
   d783c:	4296      	cmpeq	r6, r2
   d783e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7842:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7846:	d202      	bcs.n	d784e <__aeabi_ddiv+0x6e>
   d7848:	085b      	lsrs	r3, r3, #1
   d784a:	ea4f 0232 	mov.w	r2, r2, rrx
   d784e:	1ab6      	subs	r6, r6, r2
   d7850:	eb65 0503 	sbc.w	r5, r5, r3
   d7854:	085b      	lsrs	r3, r3, #1
   d7856:	ea4f 0232 	mov.w	r2, r2, rrx
   d785a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d785e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7862:	ebb6 0e02 	subs.w	lr, r6, r2
   d7866:	eb75 0e03 	sbcs.w	lr, r5, r3
   d786a:	bf22      	ittt	cs
   d786c:	1ab6      	subcs	r6, r6, r2
   d786e:	4675      	movcs	r5, lr
   d7870:	ea40 000c 	orrcs.w	r0, r0, ip
   d7874:	085b      	lsrs	r3, r3, #1
   d7876:	ea4f 0232 	mov.w	r2, r2, rrx
   d787a:	ebb6 0e02 	subs.w	lr, r6, r2
   d787e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7882:	bf22      	ittt	cs
   d7884:	1ab6      	subcs	r6, r6, r2
   d7886:	4675      	movcs	r5, lr
   d7888:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d788c:	085b      	lsrs	r3, r3, #1
   d788e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7892:	ebb6 0e02 	subs.w	lr, r6, r2
   d7896:	eb75 0e03 	sbcs.w	lr, r5, r3
   d789a:	bf22      	ittt	cs
   d789c:	1ab6      	subcs	r6, r6, r2
   d789e:	4675      	movcs	r5, lr
   d78a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d78a4:	085b      	lsrs	r3, r3, #1
   d78a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d78aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d78ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d78b2:	bf22      	ittt	cs
   d78b4:	1ab6      	subcs	r6, r6, r2
   d78b6:	4675      	movcs	r5, lr
   d78b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d78bc:	ea55 0e06 	orrs.w	lr, r5, r6
   d78c0:	d018      	beq.n	d78f4 <__aeabi_ddiv+0x114>
   d78c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d78c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d78ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d78ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d78d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d78d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d78da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d78de:	d1c0      	bne.n	d7862 <__aeabi_ddiv+0x82>
   d78e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d78e4:	d10b      	bne.n	d78fe <__aeabi_ddiv+0x11e>
   d78e6:	ea41 0100 	orr.w	r1, r1, r0
   d78ea:	f04f 0000 	mov.w	r0, #0
   d78ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d78f2:	e7b6      	b.n	d7862 <__aeabi_ddiv+0x82>
   d78f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d78f8:	bf04      	itt	eq
   d78fa:	4301      	orreq	r1, r0
   d78fc:	2000      	moveq	r0, #0
   d78fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7902:	bf88      	it	hi
   d7904:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7908:	f63f aeaf 	bhi.w	d766a <__aeabi_dmul+0xde>
   d790c:	ebb5 0c03 	subs.w	ip, r5, r3
   d7910:	bf04      	itt	eq
   d7912:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d791a:	f150 0000 	adcs.w	r0, r0, #0
   d791e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7922:	bd70      	pop	{r4, r5, r6, pc}
   d7924:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7928:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d792c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7930:	bfc2      	ittt	gt
   d7932:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7936:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d793a:	bd70      	popgt	{r4, r5, r6, pc}
   d793c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7940:	f04f 0e00 	mov.w	lr, #0
   d7944:	3c01      	subs	r4, #1
   d7946:	e690      	b.n	d766a <__aeabi_dmul+0xde>
   d7948:	ea45 0e06 	orr.w	lr, r5, r6
   d794c:	e68d      	b.n	d766a <__aeabi_dmul+0xde>
   d794e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7952:	ea94 0f0c 	teq	r4, ip
   d7956:	bf08      	it	eq
   d7958:	ea95 0f0c 	teqeq	r5, ip
   d795c:	f43f af3b 	beq.w	d77d6 <__aeabi_dmul+0x24a>
   d7960:	ea94 0f0c 	teq	r4, ip
   d7964:	d10a      	bne.n	d797c <__aeabi_ddiv+0x19c>
   d7966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d796a:	f47f af34 	bne.w	d77d6 <__aeabi_dmul+0x24a>
   d796e:	ea95 0f0c 	teq	r5, ip
   d7972:	f47f af25 	bne.w	d77c0 <__aeabi_dmul+0x234>
   d7976:	4610      	mov	r0, r2
   d7978:	4619      	mov	r1, r3
   d797a:	e72c      	b.n	d77d6 <__aeabi_dmul+0x24a>
   d797c:	ea95 0f0c 	teq	r5, ip
   d7980:	d106      	bne.n	d7990 <__aeabi_ddiv+0x1b0>
   d7982:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7986:	f43f aefd 	beq.w	d7784 <__aeabi_dmul+0x1f8>
   d798a:	4610      	mov	r0, r2
   d798c:	4619      	mov	r1, r3
   d798e:	e722      	b.n	d77d6 <__aeabi_dmul+0x24a>
   d7990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7994:	bf18      	it	ne
   d7996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d799a:	f47f aec5 	bne.w	d7728 <__aeabi_dmul+0x19c>
   d799e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d79a2:	f47f af0d 	bne.w	d77c0 <__aeabi_dmul+0x234>
   d79a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d79aa:	f47f aeeb 	bne.w	d7784 <__aeabi_dmul+0x1f8>
   d79ae:	e712      	b.n	d77d6 <__aeabi_dmul+0x24a>

000d79b0 <__gedf2>:
   d79b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d79b4:	e006      	b.n	d79c4 <__cmpdf2+0x4>
   d79b6:	bf00      	nop

000d79b8 <__ledf2>:
   d79b8:	f04f 0c01 	mov.w	ip, #1
   d79bc:	e002      	b.n	d79c4 <__cmpdf2+0x4>
   d79be:	bf00      	nop

000d79c0 <__cmpdf2>:
   d79c0:	f04f 0c01 	mov.w	ip, #1
   d79c4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d79c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d79cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d79d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d79d4:	bf18      	it	ne
   d79d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d79da:	d01b      	beq.n	d7a14 <__cmpdf2+0x54>
   d79dc:	b001      	add	sp, #4
   d79de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d79e2:	bf0c      	ite	eq
   d79e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d79e8:	ea91 0f03 	teqne	r1, r3
   d79ec:	bf02      	ittt	eq
   d79ee:	ea90 0f02 	teqeq	r0, r2
   d79f2:	2000      	moveq	r0, #0
   d79f4:	4770      	bxeq	lr
   d79f6:	f110 0f00 	cmn.w	r0, #0
   d79fa:	ea91 0f03 	teq	r1, r3
   d79fe:	bf58      	it	pl
   d7a00:	4299      	cmppl	r1, r3
   d7a02:	bf08      	it	eq
   d7a04:	4290      	cmpeq	r0, r2
   d7a06:	bf2c      	ite	cs
   d7a08:	17d8      	asrcs	r0, r3, #31
   d7a0a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7a0e:	f040 0001 	orr.w	r0, r0, #1
   d7a12:	4770      	bx	lr
   d7a14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7a1c:	d102      	bne.n	d7a24 <__cmpdf2+0x64>
   d7a1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7a22:	d107      	bne.n	d7a34 <__cmpdf2+0x74>
   d7a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7a2c:	d1d6      	bne.n	d79dc <__cmpdf2+0x1c>
   d7a2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7a32:	d0d3      	beq.n	d79dc <__cmpdf2+0x1c>
   d7a34:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7a38:	4770      	bx	lr
   d7a3a:	bf00      	nop

000d7a3c <__aeabi_cdrcmple>:
   d7a3c:	4684      	mov	ip, r0
   d7a3e:	4610      	mov	r0, r2
   d7a40:	4662      	mov	r2, ip
   d7a42:	468c      	mov	ip, r1
   d7a44:	4619      	mov	r1, r3
   d7a46:	4663      	mov	r3, ip
   d7a48:	e000      	b.n	d7a4c <__aeabi_cdcmpeq>
   d7a4a:	bf00      	nop

000d7a4c <__aeabi_cdcmpeq>:
   d7a4c:	b501      	push	{r0, lr}
   d7a4e:	f7ff ffb7 	bl	d79c0 <__cmpdf2>
   d7a52:	2800      	cmp	r0, #0
   d7a54:	bf48      	it	mi
   d7a56:	f110 0f00 	cmnmi.w	r0, #0
   d7a5a:	bd01      	pop	{r0, pc}

000d7a5c <__aeabi_dcmpeq>:
   d7a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a60:	f7ff fff4 	bl	d7a4c <__aeabi_cdcmpeq>
   d7a64:	bf0c      	ite	eq
   d7a66:	2001      	moveq	r0, #1
   d7a68:	2000      	movne	r0, #0
   d7a6a:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a6e:	bf00      	nop

000d7a70 <__aeabi_dcmplt>:
   d7a70:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a74:	f7ff ffea 	bl	d7a4c <__aeabi_cdcmpeq>
   d7a78:	bf34      	ite	cc
   d7a7a:	2001      	movcc	r0, #1
   d7a7c:	2000      	movcs	r0, #0
   d7a7e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a82:	bf00      	nop

000d7a84 <__aeabi_dcmple>:
   d7a84:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a88:	f7ff ffe0 	bl	d7a4c <__aeabi_cdcmpeq>
   d7a8c:	bf94      	ite	ls
   d7a8e:	2001      	movls	r0, #1
   d7a90:	2000      	movhi	r0, #0
   d7a92:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a96:	bf00      	nop

000d7a98 <__aeabi_dcmpge>:
   d7a98:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a9c:	f7ff ffce 	bl	d7a3c <__aeabi_cdrcmple>
   d7aa0:	bf94      	ite	ls
   d7aa2:	2001      	movls	r0, #1
   d7aa4:	2000      	movhi	r0, #0
   d7aa6:	f85d fb08 	ldr.w	pc, [sp], #8
   d7aaa:	bf00      	nop

000d7aac <__aeabi_dcmpgt>:
   d7aac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7ab0:	f7ff ffc4 	bl	d7a3c <__aeabi_cdrcmple>
   d7ab4:	bf34      	ite	cc
   d7ab6:	2001      	movcc	r0, #1
   d7ab8:	2000      	movcs	r0, #0
   d7aba:	f85d fb08 	ldr.w	pc, [sp], #8
   d7abe:	bf00      	nop

000d7ac0 <__aeabi_d2iz>:
   d7ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7ac8:	d215      	bcs.n	d7af6 <__aeabi_d2iz+0x36>
   d7aca:	d511      	bpl.n	d7af0 <__aeabi_d2iz+0x30>
   d7acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7ad4:	d912      	bls.n	d7afc <__aeabi_d2iz+0x3c>
   d7ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7ae6:	fa23 f002 	lsr.w	r0, r3, r2
   d7aea:	bf18      	it	ne
   d7aec:	4240      	negne	r0, r0
   d7aee:	4770      	bx	lr
   d7af0:	f04f 0000 	mov.w	r0, #0
   d7af4:	4770      	bx	lr
   d7af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7afa:	d105      	bne.n	d7b08 <__aeabi_d2iz+0x48>
   d7afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7b00:	bf08      	it	eq
   d7b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7b06:	4770      	bx	lr
   d7b08:	f04f 0000 	mov.w	r0, #0
   d7b0c:	4770      	bx	lr
   d7b0e:	bf00      	nop

000d7b10 <__cxa_atexit>:
   d7b10:	b510      	push	{r4, lr}
   d7b12:	4c05      	ldr	r4, [pc, #20]	; (d7b28 <__cxa_atexit+0x18>)
   d7b14:	4613      	mov	r3, r2
   d7b16:	b12c      	cbz	r4, d7b24 <__cxa_atexit+0x14>
   d7b18:	460a      	mov	r2, r1
   d7b1a:	4601      	mov	r1, r0
   d7b1c:	2002      	movs	r0, #2
   d7b1e:	f3af 8000 	nop.w
   d7b22:	bd10      	pop	{r4, pc}
   d7b24:	4620      	mov	r0, r4
   d7b26:	bd10      	pop	{r4, pc}
   d7b28:	00000000 	.word	0x00000000

000d7b2c <memcpy>:
   d7b2c:	b510      	push	{r4, lr}
   d7b2e:	1e43      	subs	r3, r0, #1
   d7b30:	440a      	add	r2, r1
   d7b32:	4291      	cmp	r1, r2
   d7b34:	d004      	beq.n	d7b40 <memcpy+0x14>
   d7b36:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7b3e:	e7f8      	b.n	d7b32 <memcpy+0x6>
   d7b40:	bd10      	pop	{r4, pc}

000d7b42 <memset>:
   d7b42:	4402      	add	r2, r0
   d7b44:	4603      	mov	r3, r0
   d7b46:	4293      	cmp	r3, r2
   d7b48:	d002      	beq.n	d7b50 <memset+0xe>
   d7b4a:	f803 1b01 	strb.w	r1, [r3], #1
   d7b4e:	e7fa      	b.n	d7b46 <memset+0x4>
   d7b50:	4770      	bx	lr
	...

000d7b54 <srand>:
   d7b54:	b538      	push	{r3, r4, r5, lr}
   d7b56:	4b12      	ldr	r3, [pc, #72]	; (d7ba0 <srand+0x4c>)
   d7b58:	681c      	ldr	r4, [r3, #0]
   d7b5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7b5c:	4605      	mov	r5, r0
   d7b5e:	b9d3      	cbnz	r3, d7b96 <srand+0x42>
   d7b60:	2018      	movs	r0, #24
   d7b62:	f7fe fb9d 	bl	d62a0 <malloc>
   d7b66:	f243 330e 	movw	r3, #13070	; 0x330e
   d7b6a:	63a0      	str	r0, [r4, #56]	; 0x38
   d7b6c:	8003      	strh	r3, [r0, #0]
   d7b6e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7b72:	8043      	strh	r3, [r0, #2]
   d7b74:	f241 2334 	movw	r3, #4660	; 0x1234
   d7b78:	8083      	strh	r3, [r0, #4]
   d7b7a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7b7e:	80c3      	strh	r3, [r0, #6]
   d7b80:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7b84:	8103      	strh	r3, [r0, #8]
   d7b86:	2305      	movs	r3, #5
   d7b88:	8143      	strh	r3, [r0, #10]
   d7b8a:	230b      	movs	r3, #11
   d7b8c:	8183      	strh	r3, [r0, #12]
   d7b8e:	2201      	movs	r2, #1
   d7b90:	2300      	movs	r3, #0
   d7b92:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7b96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7b98:	2200      	movs	r2, #0
   d7b9a:	611d      	str	r5, [r3, #16]
   d7b9c:	615a      	str	r2, [r3, #20]
   d7b9e:	bd38      	pop	{r3, r4, r5, pc}
   d7ba0:	2003e28c 	.word	0x2003e28c

000d7ba4 <strlen>:
   d7ba4:	4603      	mov	r3, r0
   d7ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7baa:	2a00      	cmp	r2, #0
   d7bac:	d1fb      	bne.n	d7ba6 <strlen+0x2>
   d7bae:	1a18      	subs	r0, r3, r0
   d7bb0:	3801      	subs	r0, #1
   d7bb2:	4770      	bx	lr

000d7bb4 <dynalib_user>:
   d7bb4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7bc4:	0000 0000                                   ....

000d7bc8 <_ZL19FreeSans9pt7bGlyphs>:
   d7bc8:	0000 0000 0005 0001 0000 0d02 0206 00f4     ................
   d7bd8:	0004 0405 0106 00f4 0007 0c0a 000a 00f5     ................
   d7be8:	0016 1009 010a 00f3 0028 0d10 0110 00f4     ........(.......
   d7bf8:	0042 0d0b 010c 00f4 0054 0402 0104 00f4     B.......T.......
   d7c08:	0055 1104 0106 00f4 005e 1104 0106 00f4     U.......^.......
   d7c18:	0067 0505 0107 00f4 006b 0806 030b 00f9     g.......k.......
   d7c28:	0071 0402 0205 0000 0072 0104 0106 00fc     q.......r.......
   d7c38:	0073 0102 0105 0000 0074 0d05 0005 00f4     s.......t.......
   d7c48:	007d 0d08 010a 00f4 008a 0d04 030a 00f4     }...............
   d7c58:	0091 0d09 010a 00f4 00a0 0d08 010a 00f4     ................
   d7c68:	00ad 0d07 020a 00f4 00b9 0d09 010a 00f4     ................
   d7c78:	00c8 0d09 010a 00f4 00d7 0d08 000a 00f4     ................
   d7c88:	00e4 0d09 010a 00f4 00f3 0d08 010a 00f4     ................
   d7c98:	0100 0a02 0105 00f7 0103 0c03 0105 00f8     ................
   d7ca8:	0108 0909 010b 00f8 0113 0409 010b 00fb     ................
   d7cb8:	0118 0909 010b 00f8 0123 0d09 010a 00f4     ........#.......
   d7cc8:	0132 1011 0112 00f4 0154 0d0c 000c 00f4     2.......T.......
   d7cd8:	0168 0d0b 010c 00f4 017a 0d0b 010d 00f4     h.......z.......
   d7ce8:	018c 0d0b 010d 00f4 019e 0d09 010b 00f4     ................
   d7cf8:	01ad 0d08 010b 00f4 01ba 0d0c 010e 00f4     ................
   d7d08:	01ce 0d0b 010d 00f4 01e0 0d02 0205 00f4     ................
   d7d18:	01e4 0d07 010a 00f4 01f0 0d0b 010c 00f4     ................
   d7d28:	0202 0d08 010a 00f4 020f 0d0d 010f 00f4     ................
   d7d38:	0225 0d0b 010d 00f4 0237 0d0d 010e 00f4     %.......7.......
   d7d48:	024d 0d0a 010c 00f4 025e 0e0d 010e 00f4     M.......^.......
   d7d58:	0275 0d0c 010d 00f4 0289 0d0a 010c 00f4     u...............
   d7d68:	029a 0d09 010b 00f4 02a9 0d0b 010d 00f4     ................
   d7d78:	02bb 0d0b 000c 00f4 02cd 0d11 0011 00f4     ................
   d7d88:	02e9 0d0c 000c 00f4 02fd 0d0c 000c 00f4     ................
   d7d98:	0311 0d0a 010b 00f4 0322 1103 0105 00f4     ........".......
   d7da8:	0329 0d05 0005 00f4 0332 1103 0005 00f4     ).......2.......
   d7db8:	0339 0707 0108 00f4 0340 010a 000a 0003     9.......@.......
   d7dc8:	0342 0304 0005 00f4 0344 0a09 010a 00f7     B.......D.......
   d7dd8:	0350 0d09 010a 00f4 035f 0a08 0109 00f7     P......._.......
   d7de8:	0369 0d08 010a 00f4 0376 0a08 010a 00f7     i.......v.......
   d7df8:	0380 0d04 0105 00f4 0387 0e08 010a 00f7     ................
   d7e08:	0395 0d08 010a 00f4 03a2 0d02 0104 00f4     ................
   d7e18:	03a6 1104 0004 00f4 03af 0d09 0109 00f4     ................
   d7e28:	03be 0d02 0104 00f4 03c2 0a0d 010f 00f7     ................
   d7e38:	03d3 0a08 010a 00f7 03dd 0a08 010a 00f7     ................
   d7e48:	03e7 0d09 010a 00f7 03f6 0d08 010a 00f7     ................
   d7e58:	0403 0a05 0106 00f7 040a 0a08 0109 00f7     ................
   d7e68:	0414 0c04 0105 00f5 041a 0a08 010a 00f7     ................
   d7e78:	0424 0a09 0009 00f7 0430 0a0d 000d 00f7     $.......0.......
   d7e88:	0441 0a08 0009 00f7 044b 0e09 0009 00f7     A.......K.......
   d7e98:	045b 0a07 0109 00f7 0464 1104 0106 00f4     [.......d.......
   d7ea8:	046d 1102 0204 00f4 0472 1104 0106 00f4     m.......r.......
   d7eb8:	047b 0307 0109 00f9                         {.......

000d7ec0 <_ZL21FreeSans18pt7bBitmaps>:
   d7ec0:	ffff ffff ffff 20e9 fc3f f1e3 fcf8 3f7e     ....... ?.....~?
   d7ed0:	8e1f 4182 0100 80c3 7038 0e06 c100 3880     ...A....8p.....8
   d7ee0:	0770 0f0e f9ff ffff ff3f e1e0 1cc0 0338     p.......?.....8.
   d7ef0:	0087 e070 180c ff3f fff7 fffe c1ff 80c3     ..p...?.........
   d7f00:	6030 0c06 c301 3880 0770 000e 80c1 0003     0`.....8p.......
   d7f10:	c00f f03f f83f 3c7b 1cf3 0ee3 0ee3 0ee3     ..?.?.{<........
   d7f20:	00e3 00e3 00f3 007b 807f f01f fc07 7e03     ......{........~
   d7f30:	0f03 0703 07e3 07e3 07e3 0fe3 3e73 fc7f     ............s>..
   d7f40:	f83f e00f 0003 0003 0003 0000 000c 0078     ?.............x.
   d7f50:	0fe0 06f0 ff00 70c0 0e07 0007 3870 0338     .......p....p88.
   d7f60:	c300 1880 1c06 e000 c071 8703 008c f81f     ........q.......
   d7f70:	00e0 867f 0100 70f8 0000 0303 00c0 7f38     .......p......8.
   d7f80:	0180 fe87 1c00 7038 c300 c081 180e 0006     ......8p........
   d7f90:	c0e0 0730 0307 7080 381c 8003 c0ff 0338     ..0....p.8....8.
   d7fa0:	01fc 0780 0180 00f0 807f fc0f e101 1ce0     ................
   d7fb0:	010e e0c0 0e1c e101 0ee0 003c 8077 f007     ..........<.w...
   d7fc0:	7c00 0f00 03e0 1ccf 7978 03c7 e0dc 8e1f     .|......xy......
   d7fd0:	f800 0fe0 000e f070 870f fcc3 fd7f ffc3     ......p.........
   d7fe0:	0f0e f0c0 ffff 40fa 0606 0c0c 1818 3038     .......@......80
   d7ff0:	7070 6070 e0e0 e0e0 e0e0 e0e0 60e0 7070     ppp`.........`pp
   d8000:	3070 1838 0c18 060c c003 3060 3830 1c18     p08.......`008..
   d8010:	0e0c 0e0e 0706 0707 0707 0707 0707 0e06     ................
   d8020:	0e0e 1c0c 3818 3030 c060 030c c300 ffb7     .....800`.......
   d8030:	81c7 ece0 8873 0140 0180 0180 0180 0180     ....s.@.........
   d8040:	0180 ff80 ffff ffff 01ff 0180 0180 0180     ................
   d8050:	0180 0180 0180 ff80 daf6 ffc0 ffff f0ff     ................
   d8060:	c000 1830 0106 c080 0c30 0106 6080 0c30     ..0.....0....`0.
   d8070:	0003 60c0 0618 0003 30c0 0618 8001 30c0     ...`.....0.....0
   d8080:	0700 0fe0 1ff8 3cfc 783c 701e 700e e00e     .......<<x.p.p..
   d8090:	e007 e007 e007 e007 e007 e007 e007 e007     ................
   d80a0:	e007 e007 700f 700e 780e 3c1e 1f3c 1ff8     .....p.p.x.<<...
   d80b0:	07f0 03e0 0703 3f0f ffff 0707 0707 0707     .......?........
   d80c0:	0707 0707 0707 0707 0707 0707 e007 f81f     ................
   d80d0:	fc3f 3e7c 0f70 0ff0 07e0 07e0 0700 0700     ?.|>p...........
   d80e0:	0f00 1e00 3c00 f800 f003 c007 001f 003c     .....<........<.
   d80f0:	0038 0070 0060 00e0 ffff ffff ffff f007     8.p.`...........
   d8100:	fe07 ff07 8387 80c3 80f3 c039 e01c 000e     ..........9.....
   d8110:	0007 000f 007f 003f e01f 7800 1e00 0700     ......?....x....
   d8120:	0300 01f0 00f8 00fe 0077 e073 fff8 3ff8     ........w.s....?
   d8130:	07f8 00f0 3800 3800 7800 f800 f800 f801     .....8.8.x......
   d8140:	b803 3803 3807 380e 381c 3818 3838 3870     ...8.8.8.8.888p8
   d8150:	3860 38e0 ffff ffff ffff 3800 3800 3800     `8.8.......8.8.8
   d8160:	3800 3800 3800 ff1f ff0f ff8f 00c7 8003     .8.8.8..........
   d8170:	c001 e000 7000 3900 3ff0 1ffe 8fff e783     .....p.9.?......
   d8180:	f000 3c00 0e00 0700 0300 0180 00c0 00fc     ...<............
   d8190:	00ef c073 fff0 3ff8 07f8 00e0 e003 f80f     ..s....?........
   d81a0:	fc1f 1e3c 0e38 0e70 0070 0060 00e0 e0e3     ..<.8.p.p.`.....
   d81b0:	f8ef fcff 3efc 0ef0 0ff0 07e0 07e0 07e0     .....>..........
   d81c0:	0760 0f70 0e70 3e3c fc3f f81f e007 ffff     `.p.p.<>?.......
   d81d0:	ffff ffff 0600 0e00 1c00 1800 3800 7000     .............8.p
   d81e0:	6000 e000 c000 c001 8001 8003 8003 0007     .`..............
   d81f0:	0007 0007 000e 000e 000e 000c 001c 001c     ................
   d8200:	f007 fe0f ff0f 8387 80c7 80f3 c039 e01c     ............9...
   d8210:	780e 1e0f 070f 01ff 03ff e3ff f9e0 1dc0     .x..............
   d8220:	0fc0 03e0 01f0 00f8 00fc 00f7 e073 fff8     ............s...
   d8230:	3ff8 07f8 00f0 e007 f81f fc3f 3c7c 0e70     .?........?.|<p.
   d8240:	0ef0 06e0 07e0 07e0 07e0 0fe0 0f70 3f78     ............p.x?
   d8250:	ff3f f71f c707 0700 0600 0e00 0e70 1c70     ?...........p.p.
   d8260:	3c78 f83f f01f c007 f0ff 0000 0700 80ff     x<?.............
   d8270:	f0ff 0000 0700 b6ff 00d6 8000 c003 e007     ................
   d8280:	c00f 803f 007e 01fc 00f0 00e0 007c c01f     ..?.~.......|...
   d8290:	f801 3f00 0780 00f0 007e 000f 8001 ffff     ...?....~.......
   d82a0:	ffff ffff 00e0 0000 0000 ff03 ffff ffff     ................
   d82b0:	80ff 0080 0070 003e e00f fc00 1f00 03c0     ....p.>.........
   d82c0:	00f8 003f 8007 c00f 801f 007f 01fc 03f8     ..?.............
   d82d0:	01f0 00c0 0080 0f00 7fc0 ffe1 c3e3 01ef     ................
   d82e0:	01fc 03f8 07f0 0e00 3800 f000 c007 001f     .........8......
   d82f0:	007c 03e0 07c0 0e00 1c00 0000 0000 0000     |...............
   d8300:	c001 8003 0007 000e 0700 00f8 3f00 00ff     .............?..
   d8310:	ff00 c0ff f801 e00f e003 f001 8007 f800     ................
   d8320:	000f 3c00 001e 1e00 033c 1ee0 0f38 8ef3     ...<....<...8...
   d8330:	1e78 0f3f 3870 071f 7870 070f 70e0 070e     x.?.p8..px...p..
   d8340:	70e0 070e e0e0 070e e0e0 071c e0e0 0e1c     .p..............
   d8350:	e0e0 0e1c e0e0 1c38 70f0 3c78 7870 78fc     ......8..px<px.x
   d8360:	3f78 f0df 1f38 c00f 003c 0000 001f 0000     x?..8...<.......
   d8370:	800f 0000 f007 000e ff01 00fe 7f00 00fe     ................
   d8380:	1f00 00f0 f800 0300 00e0 c00f 7f00 0100     ................
   d8390:	00dc 7807 3c00 00e0 80e3 8f03 1e00 001c     ...x.<..........
   d83a0:	7070 c101 0ee0 8003 0e38 e000 073c f0ff     pp......8...<...
   d83b0:	ff1f ffe0 83ff 0ec0 000e 783c f100 01e0     ..........<x....
   d83c0:	00c7 bc07 1e00 00f0 803b f000 fcff ff1f     ........;.......
   d83d0:	ffe3 70fe ce03 3d00 03c0 00b8 0077 e00e     ...p...=....w...
   d83e0:	dc01 7300 1e80 ff7f ff8f fff1 38ff f700     ...s.........8..
   d83f0:	0e00 00e0 00fc 801f f003 7e00 0f00 03c0     ...........~....
   d8400:	00f8 fff7 fffc 1fff 80ff ff00 0f00 00ff     ................
   d8410:	feff e007 3e7c 7800 00f0 80e7 dc03 0700     ....|>.x........
   d8420:	0070 8003 0e00 0000 0038 e000 0300 0080     p.......8.......
   d8430:	000e 3800 0000 00e0 c01d 7700 0300 00de     ...8.......w....
   d8440:	3c0e 7800 03f8 f8c1 031f f8ff ff03 03c0     .<.x............
   d8450:	00f8 f8ff ff0f ffe0 0eff f800 03e0 00ce     ................
   d8460:	e01c ee00 0e00 00e0 00fe e007 7e00 0700     .............~..
   d8470:	00e0 007e e007 7e00 0700 00e0 007e e00f     ..~....~....~...
   d8480:	ee00 0e00 01e0 00ee e03c 8f0f f0ff feff     ........<.......
   d8490:	ff0f ff80 bfff efff fbff 0080 00e0 0038     ..............8.
   d84a0:	000e 8003 e000 3800 0e00 0300 feff ffff     .......8........
   d84b0:	ffbf 00ee 8003 e000 3800 0e00 0300 0080     .........8......
   d84c0:	00e0 0038 000e ff03 ffff ffff f0ff ffff     ..8.............
   d84d0:	ffff ffff 00fc 000e 0007 8003 c001 e000     ................
   d84e0:	7000 3800 1f00 cfff e7ff f3ff 0180 00c0     .p.8............
   d84f0:	00e0 0070 0038 001c 000e 0007 8003 c001     ..p.8...........
   d8500:	e000 7000 0000 7f00 0380 e0ff ff07 0ff8     ...p............
   d8510:	fc80 001e 3c3e 0e00 0078 700f 0700 0070     ....><..x..p..p.
   d8520:	e000 0000 00e0 e000 0000 03e0 e0ff ff03     ................
   d8530:	03e0 e0ff 0700 00f0 7007 0700 0070 780f     .........p..p..x
   d8540:	0f00 003c 1e1f 3f00 c00f 07f7 e7ff ff03     ..<....?........
   d8550:	00c3 03ff 00e0 00fc 801f f003 7e00 0f00     .............~..
   d8560:	01c0 00f8 003f e007 fc00 1f00 0380 ffff     ....?...........
   d8570:	ffff ffff f8ff 3f00 0700 00e0 00fc 801f     .......?........
   d8580:	f003 7e00 0f00 01c0 00f8 003f e007 fc00     ...~......?.....
   d8590:	1c00 ffff ffff ffff ffff fcff 1c00 7000     ...............p
   d85a0:	c001 0007 001c 0170 07c0 1c00 7000 c001     ......p......p..
   d85b0:	0007 001c 0170 07c0 1f00 7e80 f801 e007     ....p......~....
   d85c0:	c01f 87f7 fe9f f03f 003f 01e0 00ee e03c     ......?.?.....<.
   d85d0:	8e07 f000 1ee0 030e e0e0 0e7c 800f f0e1     ..........|.....
   d85e0:	1e0e e300 0ec0 007c e0ef ce0f f800 0ff0     ......|.........
   d85f0:	8007 3ce0 030e e0c0 0e1e f000 0fe0 000e     ...<............
   d8600:	e078 ce03 3c00 01e0 00ee e00f c001 8003     x....<..........
   d8610:	0007 000e 001c 0038 0070 01e0 03c0 0780     ......8.p.......
   d8620:	0e00 1c00 3800 7000 e000 c001 8003 0007     .....8.p........
   d8630:	000e 001c 0038 ff7f ffff fcff 00f8 f81f     ....8...........
   d8640:	1f00 00f8 fc1f 3f00 00fc fc3f 3f00 00ee     .......?..?..?..
   d8650:	ee77 7700 00ee e777 e700 00e7 e7e7 e700     w..w..w.........
   d8660:	81e3 e3c7 c781 81e3 e1c7 87c3 c3e1 e187     ................
   d8670:	87c3 e7e0 e007 07e7 e7e0 e007 077e 7ee0     ............~..~
   d8680:	e007 077e 3ce0 e007 073c 00f0 007f f807     ..~..<..<.......
   d8690:	7f00 07c0 00fc e07f ef07 7e00 0770 80e7     ...........~p...
   d86a0:	3c7e e107 7ec0 071e e0e0 0f7e e007 7e78     ~<...~....~...x~
   d86b0:	8703 3ce0 017e e0e7 7e0e f700 07e0 00fe     ...<~....~......
   d86c0:	e03f fe03 1f00 01e0 00fe 000f 007f ff01     ?...............
   d86d0:	01f0 fcff f001 011f 03e0 e0c1 f100 00e0     ................
   d86e0:	e03c 0e00 0070 7007 0300 00f8 fc00 0000     <...p..p........
   d86f0:	007e 3f00 0000 801f 0f00 00c0 e007 0300     ~..?............
   d8700:	00b8 9c03 0100 00cf e301 01c0 f0e0 e001     ................
   d8710:	033e 0fe0 e0ff ff03 00e0 803f ff00 3ffc     >.........?....?
   d8720:	8fff f3ff 3e80 03e0 00f8 007e 801f e007     .....>....~.....
   d8730:	f801 7e00 3f00 1e80 ffff ff3f ff8f 80c3     ...~.?....?.....
   d8740:	e000 3800 0e00 0300 0080 00e0 0038 000e     ...8........8...
   d8750:	8003 e000 3800 0000 7f00 0100 f0ff ff01     .....8..........
   d8760:	01fc 1ff0 e001 c103 00e0 e0f1 3c00 00e0     .............<..
   d8770:	700e 0700 0070 f801 0000 00fc 7e00 0000     .p..p........~..
   d8780:	003f 1f00 0080 c00f 0700 00e0 b807 0300     ?...............
   d8790:	009c cf01 3900 c0e3 e01f 07f0 3ee0 f003     .....9.......>..
   d87a0:	ff0f 03fc eeff 3f00 8083 0000 00c0 2000     .......?....... 
   d87b0:	feff ff0f fff8 ceff 3c00 01e0 00ee e00e     .........<......
   d87c0:	ee00 0e00 00e0 00ee e00e ce01 3c00 ffff     .............<..
   d87d0:	ff8f fff0 8eff 3c00 01e0 00ee e00e ee00     .......<........
   d87e0:	0e00 00e0 00ee e00e ee00 0e00 00e0 00fe     ................
   d87f0:	030f 00fc f0ff ff1f e083 387c e701 0e00     ..........|8....
   d8800:	0070 00e7 7000 0700 0080 003e fe01 0f00     p....p....>.....
   d8810:	00fe f83f 3f00 00e0 003e f000 0700 00e0     ..?..?..>.......
   d8820:	007e f007 7700 0e80 037c ffe3 1ffc 80ff     ~....w..|.......
   d8830:	c03f ffff ffff ffff 80ff 0070 000e c001     ?.........p.....
   d8840:	3800 0700 0000 00e0 001c 8003 7000 0e00     .8...........p..
   d8850:	0100 00c0 0038 0007 e000 1c00 0300 0080     ....8...........
   d8860:	0070 000e c001 3800 0700 0000 00e0 001c     p......8........
   d8870:	00e0 00fc 801f f003 7e00 0f00 01c0 00f8     .........~......
   d8880:	003f e007 fc00 1f00 0380 00f0 007e c00f     ?...........~...
   d8890:	f801 3f00 0700 00e0 00fc 801f f003 7f00     ...?............
   d88a0:	1e00 07f0 019f fff1 1ffc 00fe 007f 00e0     ................
   d88b0:	807f fc03 1c00 01e0 80e7 3c0f 7000 07e0     ...........<.p..
   d88c0:	8087 1c3c c001 0ee0 8007 1ce0 0007 38e0     ..<............8
   d88d0:	8307 1c80 001c e0e0 8e07 1c00 0070 80e3     ............p...
   d88e0:	b807 1d00 00c0 00ee e007 1f00 0000 00f8     ................
   d88f0:	8003 7000 c003 700f c003 780f e003 780f     ...p...p...x...x
   d8900:	e003 380e e007 380e f007 3c1e 7007 3c1e     ...8...8...<.p.<
   d8910:	7007 1c1c 700e 1c1c 380e 1c3c 380e 1e3c     .p...p...8<..8<.
   d8920:	381e 0e38 381c 0e38 1c1c 0e38 1c1c 0f78     .88..88...8...x.
   d8930:	1c3c 0770 0e38 0770 0e38 0770 0e38 0770     <.p.8.p.8.p.8.p.
   d8940:	0e70 03e0 07f0 03e0 07f0 03e0 07f0 03e0     p...............
   d8950:	03e0 01c0 03e0 01c0 03e0 f0c0 7b00 07c0     .............{..
   d8960:	008f 7838 c103 3ce0 8107 3cc0 001e e0f1     ..8x...<...<....
   d8970:	8e03 1e00 00f0 007f f001 0f00 0080 007c     ..............|.
   d8980:	f007 3b00 0380 00de 783c c101 1ec0 010f     ...;....<x......
   d8990:	3ce0 000e f0e0 8f07 1e00 0070 80f7 c003     .<........p.....
   d89a0:	00f0 f03c 7800 01f0 e0e1 8103 0fe0 c001     ..<..x..........
   d89b0:	031c 78c0 c103 07e0 8083 8f07 0700 001c     ...x............
   d89c0:	780f 0e00 00e0 800f 1f00 0000 001c 3800     .x.............8
   d89d0:	0000 0070 e000 0100 00c0 8003 0700 0000     ..p.............
   d89e0:	000e 1c00 0000 0038 7000 7f00 efff fdff     ......8..p......
   d89f0:	ffff 0080 00f0 003c 800f e001 7800 1e00     ......<......x..
   d8a00:	0700 0080 00f0 003c 000f c003 7800 1e00     ......<......x..
   d8a10:	0700 0180 00e0 007c 000f c003 f000 3e00     ......|........>
   d8a20:	0700 ffff ffff ffff fffc f8ff 8ee3 e338     ..............8.
   d8a30:	388e 8ee3 e338 388e 8ee3 e338 388e 8fe3     .8..8..8..8..8..
   d8a40:	fcff 30c0 0106 6080 030c c000 0618 8001     ...0...`........
   d8a50:	0c20 0003 1840 0106 3080 030c 6000 0618      ...@....0...`..
   d8a60:	c000 ff30 c7ff 711c 1cc7 c771 711c 1cc7     ..0....q..q..q..
   d8a70:	c771 711c 1cc7 c771 7f1c fcff 0007 0378     q..q..q.......x.
   d8a80:	3fc0 d801 e00c 06e3 701c 83e3 1d18 6cc0     .?.......p.....l
   d8a90:	8003 ffff ffff c0ff f0f0 e0e0 07e0 0ff0     ................
   d8aa0:	0ffc 0fff c703 e000 7000 3800 1c00 fe00     .........p.8....
   d8ab0:	ff0f f31f 019f 00cf 00e7 8073 e079 7ffc     ..........s.y...
   d8ac0:	9fef c7e3 e0e1 00e0 00e0 00e0 00e0 00e0     ................
   d8ad0:	00e0 00e0 e0e3 f8ef fcff 3efc 1ef8 0ef0     ...........>....
   d8ae0:	0fe0 07e0 07e0 07e0 07e0 07e0 07e0 0ef0     ................
   d8af0:	1ef8 3cfc fcef f8ef e0e3 f007 f81f fc3f     ...<..........?.
   d8b00:	1e3c 0e78 0770 00e0 00e0 00e0 00e0 00e0     <.x.p...........
   d8b10:	00e0 07e0 0770 0e78 1e7c fc3f f81f e007     ....p.x.|.?.....
   d8b20:	0300 0180 00c0 00e0 0070 0038 001c 0f0e     ........p.8.....
   d8b30:	1fc7 9ffb dfff ef07 f701 7f00 3f80 0f80     .............?..
   d8b40:	07c0 03e0 01f0 00f8 00fc 0077 c07b f07d     ..........w.{.}.
   d8b50:	7f7e 1ffb 83f9 c0f0 e007 f81f fc3f 1e7c     ~...........?.|.
   d8b60:	0e70 0660 07e0 ffff ffff ffff 00e0 00e0     p.`.............
   d8b70:	00e0 0770 0e78 1e3c fc3f f81f e007 3c0e     ..p.x.<.?......<
   d8b80:	c3f9 0e87 ff7f e1fc 87c3 1c0e 7038 c3e1     ............8p..
   d8b90:	0e87 381c 0770 1fc7 3ff7 3cff 783f 700f     ...8p....?.<?x.p
   d8ba0:	e00f e007 e007 e007 e007 e007 e007 7007     ...............p
   d8bb0:	780f 7c0f 3f3f 1ff7 07e7 00c7 0007 0007     .x.|??..........
   d8bc0:	700e 780e 3f1e 1ffc 07f8 e0e0 c001 8003     .p.x.?..........
   d8bd0:	0007 000e 001c 0038 f871 fde7 fbdf fff0     ......8.q.......
   d8be0:	ffc0 fc00 f801 f003 e007 c00f 801f 003f     ..............?.
   d8bf0:	007e 01fc 03f8 07f0 0fe0 1cc0 f0ff ff07     ~...............
   d8c00:	ffff ffff fcff 711c 00c7 0700 711c 1cc7     .......q.....q..
   d8c10:	c771 711c 1cc7 c771 711c 1cc7 ff73 c0fb     q..q..q..q..s...
   d8c20:	00e0 00e0 00e0 00e0 00e0 00e0 00e0 3ce0     ...............<
   d8c30:	78e0 f0e0 e0e1 c0e3 80e7 00ef 80ef 80ff     .x..............
   d8c40:	c0fb e0f1 e0e0 f0e0 70e0 78e0 3ce0 1ce0     .........p.x.<..
   d8c50:	1ee0 0ee0 ffff ffff ffff ffff fcff e0e3     ................
   d8c60:	e7f8 fef1 fbef f8fe 0f7f 3ef0 f007 071c     ...........>....
   d8c70:	1ce0 e007 071c 1ce0 e007 071c 1ce0 e007     ................
   d8c80:	071c 1ce0 e007 071c 1ce0 e007 071c 1ce0     ................
   d8c90:	e007 071c 1ce0 e307 cff1 bffb e1f7 81ff     ................
   d8ca0:	01fe 03f8 07f0 0fe0 1fc0 3f80 7e00 fc00     ...........?.~..
   d8cb0:	f801 f003 e007 c00f 801f 0738 0ff0 0ffe     ..........8.....
   d8cc0:	87ff c783 f380 3b80 1f80 07c0 03e0 01f0     .......;........
   d8cd0:	00f8 00fc 007e 803b e039 783c 3f3c 0ffe     ....~.;.9.<x<?..
   d8ce0:	01fe 00fc e0e3 f8e7 fcef 3efc 1ef8 0ef0     ...........>....
   d8cf0:	0fe0 07e0 07e0 07e0 07e0 07e0 07e0 0ef0     ................
   d8d00:	1ef8 3efc fcff f8ef e0e3 00e0 00e0 00e0     ...>............
   d8d10:	00e0 00e0 00e0 e107 fc8f ffcf 8367 80f7     ............g...
   d8d20:	80fb c03f c01f e007 f003 f801 fc00 7e00     ..?............~
   d8d30:	3b00 3d80 3ee0 3ff8 ff3f fd8f f8c1 00e0     .;.=.>.??.......
   d8d40:	0070 0038 001c 000e 0007 8003 f7e3 fffb     p.8.............
   d8d50:	078f 8183 e0c0 3870 0e1c 0307 c081 70e0     ......p8.......p
   d8d60:	0038 c00f 87ff 3cff e01e 803b 000e 003c     8......<..;...<.
   d8d70:	007f 80ff 80ff 007f 803f 017e 1ffc f87f     ........?.~.....
   d8d80:	c1ff 00fc 7038 cfe1 ffff 389c e170 87c3     ....8p.....8p...
   d8d90:	1c0e 7038 c3e1 c7e7 e080 c00f 801f 003f     ..8p..........?.
   d8da0:	007e 01fc 03f8 07f0 0fe0 1fc0 3f80 7e00     ~............?.~
   d8db0:	fc00 fc03 fc0f 7f3f ffee 7e9c 7038 b803     ......?....~8p..
   d8dc0:	9c03 c701 e300 e180 70c0 3870 3838 1c1c     .........pp888..
   d8dd0:	0e07 8e03 c701 7700 3b00 1d80 07c0 03c0     .......w.;......
   d8de0:	01e0 00f0 0070 1cf0 b803 031f 0fdc ce81     ....p...........
   d8df0:	c007 83e7 71e0 b8c3 e170 38dc ee70 1c1c     .....q..p..8p...
   d8e00:	0e63 710e 07ce e738 9c03 8073 19ec 7e80     c..q..8...s....~
   d8e10:	c00f 073f 0fe0 f083 8007 03f0 78c0 e001     ..?..........x..
   d8e20:	003c 0770 0e38 1c3c 1c1c 380e 700f 7007     <.p.8.<....8.p.p
   d8e30:	e003 c003 c001 e003 e007 7007 780e 381e     ...........p.x.8
   d8e40:	1c1c 1e38 0e78 0770 0770 0338 019c 01c7     ..8.x.p.p.8.....
   d8e50:	80c3 c0e1 7070 3870 1c38 073c 031c 018e     ....ppp88.<.....
   d8e60:	00ce 0077 803b 801f c007 e003 e001 7000     ..w.;..........p
   d8e70:	3800 3800 1c00 1e00 0e00 3f00 1f00 0f00     .8.8.......?....
   d8e80:	0000 fc7f f9ff f0ff e000 8003 000e 003c     ..............<.
   d8e90:	03f0 0fc0 1c00 7000 e001 8007 001e 0078     .......p......x.
   d8ea0:	ffff ffff f8ff 0f07 1c1f 1c1c 1c1c 1c1c     ................
   d8eb0:	1c1c 1c1c f838 f8e0 1c38 1c1c 1c1c 1c1c     ....8...8.......
   d8ec0:	1c1c 1c1c 0f1f ff07 ffff ffff ffff c0ff     ................
   d8ed0:	f0e0 38f8 3838 3838 3838 3838 3838 1f1c     ...88888888888..
   d8ee0:	1f07 381c 3838 3838 3838 3838 3838 f0f8     ...88888888888..
   d8ef0:	38e0 fc00 fc03 3e1f 1f3c 1fe0 1e80 ff00          .8.....><......

000d8eff <_ZL20FreeSans9pt7bBitmaps>:
   d8eff:	ffff c0f8 f7de 0920 4186 ff91 0413 20c3     ...... ..A..... 
   d8f0f:	ffc8 8289 9061 1f10 da14 1e3d 4083 1778     ....a.....=..@x.
   d8f1f:	f408 357a f033 2040 1038 20ec 20c6 40c6     ..z53.@ 8.. . .@
   d8f2f:	40c6 806c 0039 3c01 7702 6302 6304 7704     .@l.9..<.w.c.c.w
   d8f3f:	3c08 060e cc60 8119 18e0 030f c236 73d8     .<..`.......6..s
   d8f4f:	3106 c4e3 13fe 6c26 cccc 66c4 1023 468c     .1....&l...f#..F
   d8f5f:	3363 3233 4c66 2580 a57e 3000 3fc3 c330     c332fL.%~..0.?0.
   d8f6f:	d60c c0f0 4408 1021 4284 0811 3c00 4266     .....D!..B...<fB
   d8f7f:	c3c3 c3c3 c3c3 42c3 3c66 3f11 3333 3333     .......Bf<.?3333
   d8f8f:	3e30 b031 3078 1c18 1c1c 1818 0810 f807     0>1.x0..........
   d8f9f:	663c c3c3 0603 071c c303 66c3 0c3c 7118     <f.........f<..q
   d8faf:	c962 46a3 18fe 6030 7fc0 1020 0808 f307     b..F..0`.. .....
   d8fbf:	038c 8001 6cf0 e063 311e 7898 060c 8df3     .....lc..1.x....
   d8fcf:	c183 d0e0 636c ffe0 0203 0406 080c 1818     ....lc..........
   d8fdf:	1018 3030 313e 78b0 1b3c f818 c1c6 f0e0     ..00>1.x<.......
   d8fef:	636c 3ce0 c266 c3c3 67c3 033b c203 3c66     lc.<f....g;...f<
   d8fff:	00c0 c030 0000 a064 8100 8ec7 070c 7080     ..0...d........p
   d900f:	010e ff80 0080 f01f 7000 010e 18c0 7138     .........p....8q
   d901f:	80c0 3e00 b031 3078 1818 1838 0c18 0000     ...>1.x0..8.....
   d902f:	8001 f003 0e06 0106 0086 1d66 31bb 18cf     ..........f..1..
   d903f:	98c7 cc63 e631 b311 cc99 86f7 0100 0080     ..c.1...........
   d904f:	4070 e00f 0006 0ff0 9000 8119 1098 0c83     p@..............
   d905f:	c23f 6004 0666 30c0 18ff 0333 6c60 830d     ?..`f..0..3.`l..
   d906f:	c63f c006 0f78 e001 f86f 861f 8119 3ca0     ?...x...o......<
   d907f:	8001 0630 c000 0d68 1883 f061 18ff 0333     ..0...h...a...3.
   d908f:	3c60 8007 1ef0 c003 0f78 6003 f0cf e0ff     `<......x..`....
   d909f:	1830 060c fd03 c080 3060 0f18 fff8 c0c0     0.......`0......
   d90af:	c0c0 fec0 c0c0 c0c0 c0c0 830f 600e 0366     .............`f.
   d90bf:	0cc0 c100 03fc 36c0 6003 0f73 100f 78c0     .......6.`s....x
   d90cf:	010f 3ce0 8007 feff c003 0f78 e001 063c     ...<......x...<.
   d90df:	ffff c0ff 0c06 3018 c160 0783 1e8f 8027     .......0`.....'.
   d90ef:	d8c0 0c33 0c63 b8c1 073f c330 6318 6006     ..3.c...?.0..c.`
   d90ff:	0c6c c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 e0ff     l...............
   d910f:	013f 1ffc fde0 ec05 636f 1379 9ecd f16c     ?.......ocy...l.
   d911f:	8e47 713c e080 0f7c e8c1 873d f198 331e     G.<q..|...=....3
   d912f:	78c3 076f 7ce0 0f0e 8381 0c18 6cc0 e001     .xo..|.......l..
   d913f:	000f 0378 1bc0 9801 600c f8c0 ff00 6c30     ..x......`....0l
   d914f:	030f f0c0 f36f c000 0c30 0003 00c0 810f     ....o...0.......
   d915f:	1883 c00c 016c 0fe0 7800 c003 011b 6c98     ....l....x.....l
   d916f:	c060 00fb ff08 0e8c 6cc0 c006 0c6c 8cff     `........l..l...
   d917f:	c00e 066c 6cc0 c006 3f70 6c18 030f 1ec0     ..l..l..p?.l....
   d918f:	f001 000e 3cf0 860d 003f 86ff 0103 c080     .....<..?.......
   d919f:	3060 0c18 0306 8001 c0c0 0f78 e001 073c     `0........x...<.
   d91af:	f080 031e 78c0 010f 61b0 c0f0 0d6c 1081     .....x...a..l...
   d91bf:	0c63 0461 cc60 0119 3c60 0007 c160 3081     c.a.`...`<..`..0
   d91cf:	98e1 cc70 6628 2126 3013 98c8 4c6c 3414     ..p.(f&!.0..lL.4
   d91df:	1a0a 0707 0303 8180 6080 0c63 c130 0f98     .........`c.0...
   d91ef:	e000 0006 19f0 9801 c630 600e c060 0636     ........0..``.6.
   d91ff:	c330 190c d881 000f 0660 6000 0006 0660     0.......`..`..`.
   d920f:	ff00 60c0 0c30 0306 c001 3060 0618 0003     ...`0.....`0....
   d921f:	c0ff 6dfb dbb6 b66d 84e0 8410 8410 8410     ...m..m.........
   d922f:	8010 b6ed 6ddb dbb6 30e0 a260 d844 80a1     .....m...0`.D...
   d923f:	c0ff 30c6 717e c0b0 f360 0ddb c786 c03d     ...0~q..`.....=.
   d924f:	60c0 1b30 36ce 070f c183 f0e0 6d7c 3ce0     .`0..6......|m.<
   d925f:	c366 c0c0 c0c0 66c3 033c 0303 673b c3c3     f......f<...;g..
   d926f:	c3c3 c3c3 3b67 663c c3c3 c0ff c3c0 3c66     ....g;<f......f<
   d927f:	6f36 6666 6666 3b60 c367 c3c3 c3c3 67c3     6offff`;g......g
   d928f:	033b c603 c07c c0c0 e3de c3c3 c3c3 c3c3     ;...|...........
   d929f:	c3c3 ffc3 c0ff 0330 3333 3333 3333 c0e0     ......0.333333..
   d92af:	3060 4c18 6346 f061 62ec 9831 306c ffff     `0.LFca..b1.l0..
   d92bf:	c0ff f7de f01c 86c7 313c 8fe1 780c c363     ........<1...xc.
   d92cf:	181e dec0 c3e3 c3c3 c3c3 c3c3 3cc3 c366     .............<f.
   d92df:	c3c3 c3c3 66c3 de3c b071 3c78 0f1e 8307     .....f<.q.x<....
   d92ef:	6fe3 1830 000c 673b c3c3 c3c3 c3c3 3b67     .o0...;g......g;
   d92ff:	0303 df03 8c31 1863 00c6 e33e c0c0 3ce0     ....1.c...>....<
   d930f:	c307 7ee3 f666 6666 6766 c3c3 c3c3 c3c3     ...~f.fffg......
   d931f:	c3c3 7bc7 a0c1 cc98 2142 d0b0 1c28 000c     ...{....B!..(...
   d932f:	1ec6 9138 cac4 d366 d016 87a6 381c c6c0     ..8...f......8..
   d933f:	4300 3662 181c 3c1c 6226 c143 9821 42cc     .Cb6...<&bC.!..B
   d934f:	b061 38d0 0c1c 0306 0301 fe00 300c 86c1     a..8.........0..
   d935f:	2018 fcc1 6636 6e66 66ce 6666 ff30 ffff     . ..6ffn.fff0...
   d936f:	c0ff 66c6 6766 6637 6666 61c0 3824 0000     ...ffg7fff.a$8..
	...

000d9380 <_ZL13FreeSans9pt7b>:
   d9380:	8eff 000d 7bc8 000d 7e20 0016 6f63 706d     .....{.. ~..comp
   d9390:	7475 4f65 3a53 7420 6d65 6570 6172 7574     uteOS: temperatu
   d93a0:	6572 3d20 2520 2c66 7420 7261 6567 5474     re = %f, targetT
   d93b0:	6d65 3a70 2520 0066 6564 7562 3a67 6320     emp: %f.debug: c
   d93c0:	6d6f 7570 6974 676e 4f20 6570 6172 6974     omputing Operati
   d93d0:	676e 7453 7461 2065 6f74 4f20 6666 6400     ngState to Off.d
   d93e0:	6265 6775 203a 6f63 706d 7475 6e69 2067     ebug: computing 
   d93f0:	704f 7265 7461 6e69 5367 6174 6574 7420     OperatingState t
   d9400:	206f 6e4f 6400 6265 6775 203a 656c 7661     o On.debug: leav
   d9410:	6e69 2067 6874 2065 706f 7265 7461 6e69     ing the operatin
   d9420:	2067 7473 7461 2065 6874 2065 6177 2079     g state the way 
   d9430:	7469 6920 0073 530a 7465 7075 2e2e 002e     it is..Setup....
   d9440:	6574 706d 7265 7461 7275 0065 7568 696d     temperature.humi
   d9450:	6964 7974 4300 6c61 696c 676e 4834 6165     dity.Calling4Hea
   d9460:	0074 6546 7473 7765 726f 736b 4800 6165     t.Festeworks.Hea
   d9470:	2074 6f74 2500 2e32 6630 2e00 6425 2500     t to.%2.0f..%d.%
   d9480:	0025                                        %.

000d9482 <_ZL20FreeSans18pt7bGlyphs>:
   d9482:	0000 0000 0009 0001 0000 1a03 040c 00e7     ................
   d9492:	000a 0909 010c 00e8 0015 1813 0013 00e9     ................
   d94a2:	004e 1e10 0213 00e6 008a 191d 011f 00e8     N...............
   d94b2:	00e5 1914 0217 00e8 0124 0903 0207 00e8     ........$.......
   d94c2:	0128 2108 030c 00e7 0149 2108 010c 00e7     (..!....I..!....
   d94d2:	016a 0a0a 020e 00e7 0177 1010 0214 00f1     j.......w.......
   d94e2:	0197 0903 030a 00fd 019b 0308 020c 00f6     ................
   d94f2:	019e 0403 0309 00fd 01a0 1a0a 000a 00e7     ................
   d9502:	01c1 1910 0213 00e8 01f3 1908 0413 00e8     ................
   d9512:	020c 1910 0213 00e8 023e 1911 0113 00e8     ........>.......
   d9522:	0274 1910 0113 00e8 02a6 1911 0113 00e8     t...............
   d9532:	02dc 1910 0213 00e8 030e 1910 0213 00e8     ................
   d9542:	0340 1911 0113 00e8 0376 1910 0113 00e8     @.......v.......
   d9552:	03a8 1303 0309 00ee 03b0 1803 0309 00ee     ................
   d9562:	03b9 1111 0214 00f0 03de 0911 0214 00f4     ................
   d9572:	03f2 1111 0214 00f0 0417 1a0f 0313 00e7     ................
   d9582:	0448 1f20 0124 00e7 04c4 1a16 0117 00e7     H. .$...........
   d9592:	050c 1a13 0317 00e7 054a 1a16 0119 00e7     ........J.......
   d95a2:	0592 1a14 0318 00e7 05d3 1a12 0316 00e7     ................
   d95b2:	060e 1a11 0315 00e7 0646 1a18 011b 00e7     ........F.......
   d95c2:	0694 1a13 0319 00e7 06d2 1a03 040a 00e7     ................
   d95d2:	06dc 1a0e 0112 00e7 070a 1a14 0318 00e7     ................
   d95e2:	074b 1a0f 0314 00e7 077c 1a18 031e 00e7     K.......|.......
   d95f2:	07ca 1a14 031a 00e7 080b 1a19 011b 00e7     ................
   d9602:	085d 1a12 0317 00e7 0898 1c19 011b 00e7     ]...............
   d9612:	08f0 1a14 0319 00e7 0931 1a14 0117 00e7     ........1.......
   d9622:	0972 1a13 0116 00e7 09b0 1a13 0319 00e7     r...............
   d9632:	09ee 1a15 0117 00e7 0a33 1a20 0021 00e7     ........3. .!...
   d9642:	0a9b 1a15 0117 00e7 0ae0 1a17 0018 00e7     ................
   d9652:	0b2b 1a13 0116 00e7 0b69 2106 020a 00e7     +.......i..!....
   d9662:	0b82 1a0a 000a 00e7 0ba3 2106 010a 00e7     ...........!....
   d9672:	0bbc 0d0d 0210 00e8 0bd2 0215 ff13 0005     ................
   d9682:	0bd8 0507 0109 00e7 0bdd 1311 0113 00ee     ................
   d9692:	0c06 1a10 0214 00e7 0c3a 1310 0112 00ee     ........:.......
   d96a2:	0c60 1a11 0114 00e7 0c98 1310 0113 00ee     `...............
   d96b2:	0cbe 1a07 010a 00e7 0cd5 1b10 0113 00ee     ................
   d96c2:	0d0b 1a0f 0213 00e7 0d3c 1a03 0208 00e7     ........<.......
   d96d2:	0d46 2206 0009 00e7 0d60 1a10 0212 00e7     F.."....`.......
   d96e2:	0d94 1a03 0207 00e7 0d9e 1318 021c 00ee     ................
   d96f2:	0dd7 130f 0213 00ee 0dfb 1311 0113 00ee     ................
   d9702:	0e24 1910 0214 00ee 0e56 1911 0114 00ee     $.......V.......
   d9712:	0e8c 1309 020c 00ee 0ea2 130e 0211 00ee     ................
   d9722:	0ec4 1707 010a 00ea 0ed9 130f 0213 00ee     ................
   d9732:	0efd 1311 0011 00ee 0f26 1319 0019 00ee     ........&.......
   d9742:	0f62 1310 0011 00ee 0f88 1b11 0011 00ee     b...............
   d9752:	0fc2 130f 0111 00ee 0fe6 2108 010c 00e7     ...........!....
   d9762:	1007 2102 0309 00e7 1010 2108 030c 00e7     ...!.......!....
   d9772:	1031 070f 0112 00f1 0000                    1.........

000d977c <_ZL14FreeSans12pt7b>:
   d977c:	9788 000d 9f48 000d 7e20 001d               ....H... ~..

000d9788 <_ZL21FreeSans12pt7bBitmaps>:
   d9788:	ffff f0ff cff0 f33c 208a 3006 0331 1818     ......<.. .01...
   d9798:	ffc7 fcbf 0331 1818 ffc7 fcbf 0131 1818     ....1.......1...
   d97a8:	c6c0 3006 0304 ffe1 6c72 8847 07f1 7e20     ...0....rlG... ~
   d97b8:	f003 0217 473c f188 261b c37f 10e0 0002     ....<G...&......
   d97c8:	0600 c003 7e40 0e0c 8070 18c3 310c e700     ....@~..p....1..
   d97d8:	0730 00e6 403c 0c00 007c e08f c719 1801     0...<@..|.......
   d97e8:	3130 0283 701c fe40 0704 0fc0 7e00 9c03     01...p@......~..
   d97f8:	300c c030 01e7 03f8 3e80 cc01 196e 7cb0     .00......>..n..|
   d9808:	f3c0 ce03 9f1f 1ee6 ff1c 08a0 668c 9831     .............f1.
   d9818:	31c6 638c 6308 6108 200c 1882 18c3 18c3     .1.c.c.a. ......
   d9828:	31c6 628c 8831 62c4 1000 5b23 8de3 0091     .1.b1..b..#[....
   d9838:	030c c000 ff30 f0ff 30c0 030c c000 60f5     ....0....0.....`
   d9848:	f0ff 02f0 100c c120 0c02 2010 02c1 100c     ...... .... ....
   d9858:	c120 1f00 f107 30c7 0f6e f080 031e 78c0      ......0n......x
   d9868:	010f 3ce0 c10e 719c 1ffc 0800 ffcf 638c     ...<...q.......c
   d9878:	c618 8c31 1863 0f1f 87f9 7c60 0006 18c0     ..1.c.....`|....
   d9888:	0107 f0c0 1c78 0006 3080 ff07 e0ff 0f3f     ....x....0....?.
   d9898:	87f3 6c60 010c 7080 0f7c 1880 8001 073c     ..`l...p|.....<.
   d98a8:	d880 fc73 001f 8001 0e70 c003 1bd8 6106     ..s.....p......a
   d98b8:	218c 338c 7f06 feff 0003 0c60 8001 cf3f     .!.3......`...?.
   d98c8:	80f9 0630 de00 e71f 000e 0ce0 8001 0730     ..0...........0.
   d98d8:	f881 fc73 001f 070f c3f9 7430 8001 c733     ..s.......0t..3.
   d98e8:	f0fe 1fdc e001 063c dcc1 fc71 001f ffff     ......<...q.....
   d98f8:	01fc 6000 0218 c000 0630 8001 0430 8001     ...`....0...0...
   d9908:	0630 8001 0030 071f c7f1 6630 c10c 618c     0...0.....0f...a
   d9918:	3ffc 3b8e e001 073c d880 fc31 001f 071f     .?.;..<...1.....
   d9928:	c7f1 6c70 8007 1ef0 6107 fcef 8079 0530     ..pl.....a..y.0.
   d9938:	9881 fc73 001e 00f0 c003 00f0 560f 0000     ..s..........V..
   d9948:	0107 f8e0 0f3c e000 c007 000f 003c 01f0     ....<.......<...
   d9958:	ffff 00ff 0000 ffff 00ff 000e 0178 07f0     ............x...
   d9968:	0fc0 7000 0f1e c003 08f0 1f00 ee1f 031b     ...p............
   d9978:	c0c0 0c30 0306 c081 30e0 030c 0000 0c00     ..0......0......
   d9988:	0003 fe00 0f00 00fe 3ef0 0007 383c 3000     .........>..<8.0
   d9998:	e0c1 0f66 d8d9 c361 07c3 1c0f 3c1c 6060     ..f...a......<``
   d99a8:	81f1 c683 1b06 3818 71ee 18e7 f8fd e771     .......8.q....q.
   d99b8:	e0c0 0100 00e0 ff01 01c0 00fc c003 c003     ................
   d99c8:	c003 e007 6006 6006 700e 300c 300c 381c     .....`.`.p.0.0.8
   d99d8:	1818 f81f fc3f 1c30 0c30 0e70 0660 0660     ....?.0.0.p.`.`.
   d99e8:	c7ff 30ff 8019 036c 1b60 d800 ff0c ffc7     ...0..l.`.......
   d99f8:	0d30 3c80 e001 000f 0678 f7ff 00fe e007     0..<....x.......
   d9a08:	f03f 73e0 6680 6c00 3000 6000 c000 8001     ?..s.f.l.0.`....
   d9a18:	0003 0006 0006 006c 03dc 0e1e f81f c00f     ......l.........
   d9a28:	83ff 8cff 3007 c00e 001b 007c 03f0 0fc0     .....0....|.....
   d9a38:	3c00 f000 c003 001f 036c 1cb0 e3ff 00ff     .<......l.......
   d9a48:	ffff c0ff 000c 0cc0 c000 000c efff c0fe     ................
   d9a58:	000c 0cc0 c000 000c ffff ffff ffff 6000     ...............`
   d9a68:	010c 3080 0006 dfff 00fb 0c60 8001 0630     ...0......`...0.
   d9a78:	c000 0018 f007 fc1f 1e3c 0670 0360 00e0     ........<.p.`...
   d9a88:	00c0 00c0 7fc0 7fc0 03c0 03c0 0360 0760     ............`.`.
   d9a98:	0f30 1f3c fb1f e107 1ec0 f000 8007 013c     0.<...........<.
   d9aa8:	0fe0 7800 ff03 ffff 07f0 3c80 e001 000f     ...x.......<....
   d9ab8:	0378 1ec0 c000 ffff ffff 01f0 c080 3060     x.............`0
   d9ac8:	0c18 0306 8001 60c0 1e3c 070f 7fc7 001f     .......`<.......
   d9ad8:	3bc0 cc01 300e c370 1c83 e00c 8033 03de     .;...0p.....3...
   d9ae8:	0edc 3038 c160 03c3 068c 1c30 3bc0 6000     ..80`.....0..;.`
   d9af8:	30c0 030c c000 0c30 0003 30c0 030c c000     .0....0....0....
   d9b08:	0c30 0003 ffff e0f0 e007 f007 f00f d00f     0...............
   d9b18:	d80f d81b d81b cc1b cc33 cc33 c633 c663     ........3.3.3.c.
   d9b28:	c663 c363 c3c3 c3c3 c1c3 e083 001f 07fc     c.c.............
   d9b38:	3de0 ee81 300f c379 1ec6 f018 83e7 1d3c     .=...0y.......<.
   d9b48:	6fe0 f801 c00f 013e 03c0 0fe0 0ffc 8607     .o....>.........
   d9b58:	c600 3300 1b00 0700 0380 01c0 00e0 00f0     ...3............
   d9b68:	0078 0036 0033 c018 7818 1f3c 03fc 00f8     x.6.3....x<.....
   d9b78:	8fff c0fe 036c 3cc0 c003 073c efff c0fc     ....l..<..<.....
   d9b88:	000c 0cc0 c000 000c 0cc0 0300 0fe0 0ffc     ................
   d9b98:	8607 c600 3300 1b00 0700 0380 01c0 00e0     .....3..........
   d9ba8:	00f0 0078 0036 0133 c098 78fc 1f3c 03ff     ..x.6.3....x<...
   d9bb8:	80f9 4000 c3ff ccff b003 c006 001b 016c     ...@..........l.
   d9bc8:	0cb0 e3ff ccff b003 c006 001b 016c 06b0     ............l...
   d9bd8:	1bc0 7000 e00f c37f 9c83 6007 800d 0006     ...p.......`....
   d9be8:	001e 803f c03f 800f c007 000f 003e 0ede     ..?.?.......>...
   d9bf8:	f03f 803f ffff 06ff 6000 0006 0660 6000     ?.?......`..`..`
   d9c08:	0006 0660 6000 0006 0660 6000 0006 c060     ..`..`..`..`..`.
   d9c18:	001e 07f0 3c80 e001 000f 0378 1ec0 f000     .....<....x.....
   d9c28:	8007 013c 0fe0 ee80 3f0e 7ce0 6000 c006     ..<......?.|.`..
   d9c38:	c01d 8031 0163 03c7 0606 1c0c 301c 6018     ..1.c........0.`
   d9c48:	c031 0073 0066 01dc 01f0 03e0 07c0 e000     1.s.f...........
   d9c58:	1d30 e080 0776 d881 061e 7c70 c118 e3b0     0...v.....p|....
   d9c68:	c30c 338c 380c 30c6 1867 98c1 0667 d861     ...3.8.0g...g.a.
   d9c78:	831d 3c60 800d 3ef0 c003 0f70 c001 0718     ..`<...>..p.....
   d9c88:	7000 600e e038 e160 c3c0 cc01 f801 e001     .p.`8.`.........
   d9c98:	8003 8007 001f 0033 03e7 0686 1c0e 700e     ......3........p
   d9ca8:	c00c 601c 7006 300e 381c 1c18 0c38 0e30     ...`.p.0.8..8.0.
   d9cb8:	0670 0360 03c0 01c0 0180 0180 0180 0180     p.`.............
   d9cc8:	0180 0180 0180 ff80 ffff 0ec0 e000 000e     ................
   d9cd8:	0760 7000 0007 0330 3880 8003 0118 1cc0     `..p..0..8......
   d9ce8:	ff00 ffff ffc0 cccc cccc cccc cccc cfcc     ................
   d9cf8:	81f0 0281 0406 1808 2010 4060 8181 0602     ......... `@....
   d9d08:	ff04 3333 3333 3333 3333 3f33 0cf0 050e     ..333333333?....
   d9d18:	c386 1921 838c 80c1 feff 8ce3 3f30 f807     ..!.........0?..
   d9d28:	cce1 000c 1cc0 cf3f c08c 0ccc c7e3 3cef     ......?........<
   d9d38:	c070 000c 0cc0 c000 f80c cfdf e00e 037c     p.............|.
   d9d48:	3cc0 c003 033c 6fe0 df0e f8cc 0f1f 1be7     .<..<..o........
   d9d58:	c083 0c30 0003 38c0 1c37 1ffe 0000 0c60     ..0....87.....`.
   d9d68:	8001 0630 cf3c 8ffb f8e0 010f 3ce0 8007     ..0.<........<..
   d9d78:	3bf8 3f8f cc63 071f c7f1 3c70 ff07 feff     .;.?c.....p<....
   d9d88:	c000 0d1c 1fc3 f0e1 d83b 7fc6 63ec c618     ........;....c..
   d9d98:	8c31 0063 671e c7fd 7cf0 8007 1ef0 c003     1.c..g...|......
   d9da8:	1d7c 9fc7 e6b1 c000 0e3e c77f c0e0 0c30     |.......>.....0.
   d9db8:	0003 33c0 fbcd e0c7 3cf0 030f f0c0 0f3c     ...3.....<....<.
   d9dc8:	c003 30f0 3ff0 ffff 33f0 0300 3333 3333     ...0.?...3..3333
   d9dd8:	3333 3f33 c0e0 0318 6000 010c 3083 30c6     333?.....`...0.0
   d9de8:	1bcc f083 0c77 8e61 e630 c10c 18d8 ffff     ....w.a.0.......
   d9df8:	ffff cff0 6f1f fcdf fc78 3c18 1e0c 0f06     .....o..x..<....
   d9e08:	0703 8381 c1c0 60e0 30f0 1878 0c3c cf18     .......`.0x.<...
   d9e18:	ef37 831f f0c0 0f3c c003 3cf0 030f c0c0     7.....<....<....
   d9e28:	071f c7f1 7c70 8007 1ef0 c003 1d7c 1fc7     ....p|......|...
   d9e38:	f0c1 8dcf f0fc 06ee 3cc0 c003 033c 3ec0     .........<..<..>
   d9e48:	f007 fcef 8ccf c000 000c 00c0 671e c7fd     .............g..
   d9e58:	7cf0 8007 1ef0 c003 1d7c 9fc7 e6f1 c000     .|......|.......
   d9e68:	0318 6000 7fcf c338 300c 0cc3 c030 1f3e     ...`..8..0..0.>.
   d9e78:	1bee c000 073c 3ef0 f001 1d3e 3efe 6300     ....<..>..>..>.c
   d9e88:	ff19 8cb1 1863 31c6 c0e7 3cf0 030f f0c0     ....c..1...<....
   d9e98:	0f3c c003 7ef0 fb3d c03c 66e0 6006 0c67     <....~=.<..f.`g.
   d9ea8:	c330 390c 9881 8119 0ff0 e000 000e c1c1     0..9............
   d9eb8:	e1b0 70d8 2ccc 3666 9b31 cd18 6498 166c     ...p.,f61....dl.
   d9ec8:	0f36 071a 038f 8083 c0c1 ee60 c618 c10c     6.........`.....
   d9ed8:	1cf0 8001 1b78 3003 30c7 0666 6ce0 830d     ....x..0.0f..l..
   d9ee8:	6338 630c 600e 1bcc 6003 073c e000 0318     8c.c.`...`<.....
   d9ef8:	e000 0e78 ff00 f0ff 0c18 0307 c081 3060     ..x...........`0
   d9f08:	0e18 ff03 c0ff cc19 1863 31c6 8699 c618     ........c..1....
   d9f18:	8c31 1c63 ff60 ffff ffff c7fc c618 8c31     1.c.`.........1.
   d9f28:	0c63 3133 638c c618 0073 3e70 e409 031f     c.31.c..s.p>....
   d9f38:	0080 0000                                   ....

000d9f3c <_ZL14FreeSans18pt7b>:
   d9f3c:	7ec0 000d 9482 000d 7e20 002a               .~...... ~*.

000d9f48 <_ZL20FreeSans12pt7bGlyphs>:
   d9f48:	0000 0000 0006 0001 0000 1202 0308 00ef     ................
   d9f58:	0005 0606 0108 00f0 000a 100d 000d 00f1     ................
   d9f68:	0024 140b 010d 00ef 0040 1114 0115 00f0     $.......@.......
   d9f78:	006b 110e 0110 00f0 0089 0602 0105 00f0     k...............
   d9f88:	008b 1705 0208 00ef 009a 1705 0108 00ef     ................
   d9f98:	00a9 0707 0109 00ef 00b0 0b0a 020e 00f6     ................
   d9fa8:	00be 0602 0207 00ff 00c0 0206 0108 00f9     ................
   d9fb8:	00c2 0202 0206 00ff 00c3 1207 0007 00ef     ................
   d9fc8:	00d3 110b 010d 00f0 00eb 1105 030d 00f0     ................
   d9fd8:	00f6 110b 010d 00f0 010e 110b 010d 00f0     ................
   d9fe8:	0126 110b 010d 00f0 013e 110b 010d 00f0     &.......>.......
   d9ff8:	0156 110b 010d 00f0 016e 110b 010d 00f0     V.......n.......
   da008:	0186 110b 010d 00f0 019e 110b 010d 00f0     ................
   da018:	01b6 0d02 0206 00f4 01ba 1002 0206 00f5     ................
   da028:	01be 0c0c 010e 00f5 01d0 060c 010e 00f8     ................
   da038:	01d9 0c0c 010e 00f5 01eb 120a 020d 00ef     ................
   da048:	0202 1516 0118 00ef 023c 1210 0010 00ef     ........<.......
   da058:	0260 120d 0210 00ef 027e 120f 0111 00ef     `.......~.......
   da068:	02a0 120e 0211 00ef 02c0 120c 020f 00ef     ................
   da078:	02db 120b 020e 00ef 02f4 1210 0112 00ef     ................
   da088:	0318 120d 0211 00ef 0336 1202 0207 00ef     ........6.......
   da098:	033b 1209 010d 00ef 0350 120e 0210 00ef     ;.......P.......
   da0a8:	0370 120a 020e 00ef 0387 1210 0214 00ef     p...............
   da0b8:	03ab 120d 0212 00ef 03c9 1211 0113 00ef     ................
   da0c8:	03f0 120c 0210 00ef 040b 1311 0113 00ef     ................
   da0d8:	0434 120e 0211 00ef 0454 120e 0110 00ef     4.......T.......
   da0e8:	0474 120c 010f 00ef 048f 120d 0211 00ef     t...............
   da0f8:	04ad 120f 000f 00ef 04cf 1216 0016 00ef     ................
   da108:	0501 120f 0010 00ef 0523 1210 0010 00ef     ........#.......
   da118:	0547 120d 010f 00ef 0565 1704 0207 00ef     G.......e.......
   da128:	0571 1207 0007 00ef 0581 1704 0107 00ef     q...............
   da138:	058d 0909 010b 00f0 0598 010f ff0d 0004     ................
   da148:	059a 0405 0106 00ef 059d 0d0c 010d 00f4     ................
   da158:	05b1 120c 010d 00ef 05cc 0d0a 010c 00f4     ................
   da168:	05dd 120b 010d 00ef 05f6 0d0b 010d 00f4     ................
   da178:	0608 1205 0107 00ef 0614 120b 010d 00f4     ................
   da188:	062d 120a 010d 00ef 0644 1202 0205 00ef     -.......D.......
   da198:	0649 1704 0006 00ef 0655 120b 010c 00ef     I.......U.......
   da1a8:	066e 1202 0105 00ef 0673 0d11 0113 00f4     n.......s.......
   da1b8:	068f 0d0a 010d 00f4 06a0 0d0b 010d 00f4     ................
   da1c8:	06b2 110c 010d 00f4 06cc 110b 010d 00f4     ................
   da1d8:	06e4 0d06 0108 00f4 06ee 0d0a 010c 00f4     ................
   da1e8:	06ff 1005 0107 00f1 0709 0d0a 010d 00f4     ................
   da1f8:	071a 0d0c 000c 00f4 072e 0d11 0011 00f4     ................
   da208:	074a 0d0b 000b 00f4 075c 120b 000b 00f4     J.......\.......
   da218:	0775 0d0a 010c 00f4 0786 1705 0108 00ef     u...............
   da228:	0795 1702 0206 00ef 079b 1705 0208 00ef     ................
   da238:	07aa 050a 010c 00f6                         ........

000da240 <_ZTV12Adafruit_GFX>:
	...
   da250:	5085 000d 6889 000d 40a9 000d 4b93 000d     .P...h...@...K..
   da260:	4b49 000d 4b7b 000d 4b57 000d 4b69 000d     IK..{K..WK..iK..
   da270:	4a89 000d 4b93 000d 4d73 000d 4d71 000d     .J...K..sM..qM..
   da280:	4b95 000d 4bd3 000d 4c0d 000d 4c53 000d     .K...K...L..SL..
   da290:	4c6f 000d 4cf1 000d                         oL...L..

000da298 <_ZL4font>:
   da298:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   da2a8:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   da2b8:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   da2c8:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   da2d8:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   da2e8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   da2f8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   da308:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   da318:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   da328:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   da338:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   da348:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   da358:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   da368:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   da378:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   da388:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   da398:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   da3a8:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   da3b8:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   da3c8:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   da3d8:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   da3e8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   da3f8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   da408:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   da418:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   da428:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   da438:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   da448:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   da458:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   da468:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   da478:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   da488:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   da498:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   da4a8:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   da4b8:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   da4c8:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   da4d8:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   da4e8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   da4f8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   da508:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   da518:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   da528:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   da538:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   da548:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   da558:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   da568:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   da578:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   da588:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   da598:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   da5a8:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   da5b8:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   da5c8:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   da5d8:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   da5e8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   da5f8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   da608:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   da618:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   da628:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   da638:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   da648:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   da658:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   da668:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   da678:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   da688:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   da698:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   da6a8:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   da6b8:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   da6c8:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   da6d8:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   da6e8:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   da6f8:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   da708:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   da718:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   da728:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   da738:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   da748:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   da758:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   da768:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   da778:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   da788:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000da798 <_ZTV16Adafruit_SSD1306>:
	...
   da7a0:	57c1 000d 57c3 000d 5085 000d 6889 000d     .W...W...P...h..
   da7b0:	57d1 000d 4b93 000d 4b49 000d 4b7b 000d     .W...K..IK..{K..
   da7c0:	4b57 000d 4b69 000d 4a89 000d 4b93 000d     WK..iK...J...K..
   da7d0:	4d73 000d 4d71 000d 55d1 000d 53e1 000d     sM..qM...U...S..
   da7e0:	4c0d 000d 4c53 000d 4c6f 000d 4cf1 000d     .L..SL..oL...L..

000da7f0 <_ZTV16OledWingAdafruit>:
	...
   da7f8:	5d91 000d 5d93 000d 5085 000d 6889 000d     .]...]...P...h..
   da808:	57d1 000d 4b93 000d 4b49 000d 4b7b 000d     .W...K..IK..{K..
   da818:	4b57 000d 4b69 000d 4a89 000d 4b93 000d     WK..iK...J...K..
   da828:	4d73 000d 4d71 000d 55d1 000d 53e1 000d     sM..qM...U...S..
   da838:	4c0d 000d 4c53 000d 4c6f 000d 4cf1 000d     .L..SL..oL...L..

000da848 <_ZTVN5spark13EthernetClassE>:
	...
   da850:	6357 000d 634d 000d 6343 000d 6339 000d     Wc..Mc..Cc..9c..
   da860:	632d 000d 6321 000d 6315 000d 630d 000d     -c..!c...c...c..
   da870:	6303 000d 62f9 000d 67a9 000d               .c...b...g..

000da87c <_ZTV7TwoWire>:
	...
   da884:	6375 000d 63bf 000d 6397 000d 6377 000d     uc...c...c..wc..
   da894:	639f 000d 63a7 000d 63af 000d 63b7 000d     .c...c...c...c..

000da8a4 <_ZTV9IPAddress>:
	...
   da8ac:	64fd 000d 64ed 000d 64ef 000d 6e6c 6600     .d...d...d..ln.f
   da8bc:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   da8cc:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
   da8dc:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
   da8ec:	6400 7465 6961 736c 3d20 0020 6162 6475     .details = .baud
   da8fc:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   da90c:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   da91c:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   da92c:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   da93c:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   da94c:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   da95c:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   da96c:	7070 6e00 6e6f 0065 7274 6361 0065 6e69     pp.none.trace.in
   da97c:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   da98c:	696e 0063 6c61 006c                         nic.all.

000da994 <_ZTVN5spark9MeshClassE>:
	...
   da99c:	663f 000d 6635 000d 662b 000d 6621 000d     ?f..5f..+f..!f..
   da9ac:	6615 000d 6609 000d 65fd 000d 65f5 000d     .f...f...e...e..
   da9bc:	65eb 000d 65e1 000d 67a9 000d               .e...e...g..

000da9c8 <_ZTVN5spark12NetworkClassE>:
	...
   da9d0:	6741 000d 674b 000d 6755 000d 675f 000d     Ag..Kg..Ug.._g..
   da9e0:	6769 000d 6775 000d 6781 000d 678d 000d     ig..ug...g...g..
   da9f0:	6795 000d 679f 000d 67a9 000d               .g...g...g..

000da9fc <_ZTV8SPIClass>:
	...
   daa04:	6995 000d 6997 000d                         .i...i..

000daa0c <_ZL14clock_divisors>:
   daa0c:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   daa1c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   daa2c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   daa3c:	0000 0000                                   ....

000daa40 <_ZTV11USARTSerial>:
	...
   daa48:	6acd 000d 6b1d 000d 6b2b 000d 6889 000d     .j...k..+k...h..
   daa58:	6ae1 000d 6b03 000d 6aef 000d 6b17 000d     .j...k...j...k..
   daa68:	6acf 000d 6ad3 000d                         .j...j..

000daa70 <_ZTV9USBSerial>:
	...
   daa78:	6bd5 000d 6c25 000d 6c33 000d 6889 000d     .k..%l..3l...h..
   daa88:	6c11 000d 6bd7 000d 6bed 000d 6c1f 000d     .l...k...k...l..
   daa98:	6c03 000d 6bd1 000d                         .l...k..

000daaa0 <_ZTVN5spark9WiFiClassE>:
	...
   daaa8:	6d3f 000d 6d35 000d 6d2b 000d 6ce1 000d     ?m..5m..+m...l..
   daab8:	6d1f 000d 6d13 000d 6d07 000d 6cff 000d     .m...m...m...l..
   daac8:	6cf5 000d 6ceb 000d 67a9 000d               .l...l...g..

000daad4 <__sf_fake_stdin>:
	...

000daaf4 <__sf_fake_stdout>:
	...

000dab14 <__sf_fake_stderr>:
	...
   dab34:	0043                                        C.

000dab36 <link_const_variable_data_end>:
	...

000dab38 <link_constructors_location>:
   dab38:	000d4845 	.word	0x000d4845
   dab3c:	000d4a85 	.word	0x000d4a85
   dab40:	000d53db 	.word	0x000d53db
   dab44:	000d5ce3 	.word	0x000d5ce3
   dab48:	000d5d8d 	.word	0x000d5d8d
   dab4c:	000d5e53 	.word	0x000d5e53
   dab50:	000d6361 	.word	0x000d6361
   dab54:	000d65d1 	.word	0x000d65d1
   dab58:	000d66f5 	.word	0x000d66f5
   dab5c:	000d6875 	.word	0x000d6875
   dab60:	000d6979 	.word	0x000d6979
   dab64:	000d6aa1 	.word	0x000d6aa1
   dab68:	000d6ab9 	.word	0x000d6ab9
   dab6c:	000d6d49 	.word	0x000d6d49
   dab70:	000d6f35 	.word	0x000d6f35
   dab74:	000d6f8d 	.word	0x000d6f8d
   dab78:	000d7051 	.word	0x000d7051
   dab7c:	000d70d5 	.word	0x000d70d5
   dab80:	000d7159 	.word	0x000d7159

000dab84 <link_constructors_end>:
	...
