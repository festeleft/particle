
/Users/psahota/dev/particle/fireplace-thermostat/target/fireplace-thermostat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002458  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000164d0  2**0
                  CONTENTS
  3 .data         00000034  2003e380  000d6470  0000e380  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000440  2003e3b8  2003e3b8  0001e3b8  2**3
                  ALLOC
  5 .module_info_suffix 00000028  000d64a4  000d64a4  000164a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d64cc  000d64cc  000164cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000aa755  00000000  00000000  000164d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f918  00000000  00000000  000c0c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011c21  00000000  00000000  000d053d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001b90  00000000  00000000  000e215e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002d90  00000000  00000000  000e3cee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003166c  00000000  00000000  000e6a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024b2e  00000000  00000000  001180ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d3dd5  00000000  00000000  0013cc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000abac  00000000  00000000  002109f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	00 61 0d 00                                         .a..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f84b 	bl	d60c8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f850 	bl	d60de <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e380 	.word	0x2003e380
   d4048:	000d6470 	.word	0x000d6470
   d404c:	2003e3b4 	.word	0x2003e3b4
   d4050:	2003e3b8 	.word	0x2003e3b8
   d4054:	2003e7f8 	.word	0x2003e7f8

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f965 	bl	d5328 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6470 	.word	0x000d6470
   d4080:	000d6434 	.word	0x000d6434

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b85e 	b.w	d4144 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8bf 	bl	d420c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b917 	b.w	d52c4 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bcbf 	b.w	d4a18 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bcbd 	b.w	d4a18 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_Z27computeTargetOperatingStatev>:
    g_ledPulseIncrement = 1;
  }
  g_ledPulseValue += g_ledPulseIncrement;
}

OperatingState computeTargetOperatingState() {
   d40b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // On/Off Range
  // We don’t want the fireplace turning on and off all the time so we let the
  // temperature go a little over before we turn it off and a little under
  // before we turn it on again. +/-0.5ºC is the minimum granularity based on
  // the sensitivity of the sensor we are using so we’ll use that.
  if (g_temperature >= (g_targetTemp + 0.5))
   d40b2:	4b14      	ldr	r3, [pc, #80]	; (d4104 <_Z27computeTargetOperatingStatev+0x54>)
   d40b4:	e9d3 6700 	ldrd	r6, r7, [r3]
   d40b8:	4b13      	ldr	r3, [pc, #76]	; (d4108 <_Z27computeTargetOperatingStatev+0x58>)
   d40ba:	e9d3 4500 	ldrd	r4, r5, [r3]
   d40be:	2200      	movs	r2, #0
   d40c0:	4b12      	ldr	r3, [pc, #72]	; (d410c <_Z27computeTargetOperatingStatev+0x5c>)
   d40c2:	4630      	mov	r0, r6
   d40c4:	4639      	mov	r1, r7
   d40c6:	f001 fba5 	bl	d5814 <__adddf3>
   d40ca:	4622      	mov	r2, r4
   d40cc:	462b      	mov	r3, r5
   d40ce:	f001 ffcf 	bl	d6070 <__aeabi_dcmple>
   d40d2:	b998      	cbnz	r0, d40fc <_Z27computeTargetOperatingStatev+0x4c>
    return Off;
  else if (g_temperature <= (g_targetTemp - 0.5) || (g_operatingState == OperatingError))
   d40d4:	2200      	movs	r2, #0
   d40d6:	4b0d      	ldr	r3, [pc, #52]	; (d410c <_Z27computeTargetOperatingStatev+0x5c>)
   d40d8:	4630      	mov	r0, r6
   d40da:	4639      	mov	r1, r7
   d40dc:	f001 fb98 	bl	d5810 <__aeabi_dsub>
   d40e0:	4602      	mov	r2, r0
   d40e2:	460b      	mov	r3, r1
   d40e4:	4620      	mov	r0, r4
   d40e6:	4629      	mov	r1, r5
   d40e8:	f001 ffc2 	bl	d6070 <__aeabi_dcmple>
   d40ec:	b940      	cbnz	r0, d4100 <_Z27computeTargetOperatingStatev+0x50>
   d40ee:	4b08      	ldr	r3, [pc, #32]	; (d4110 <_Z27computeTargetOperatingStatev+0x60>)
   d40f0:	f993 0000 	ldrsb.w	r0, [r3]
   d40f4:	1c43      	adds	r3, r0, #1
    return On;
   d40f6:	bf08      	it	eq
   d40f8:	2001      	moveq	r0, #1
   d40fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // We don’t want the fireplace turning on and off all the time so we let the
  // temperature go a little over before we turn it off and a little under
  // before we turn it on again. +/-0.5ºC is the minimum granularity based on
  // the sensitivity of the sensor we are using so we’ll use that.
  if (g_temperature >= (g_targetTemp + 0.5))
    return Off;
   d40fc:	2000      	movs	r0, #0
   d40fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (g_temperature <= (g_targetTemp - 0.5) || (g_operatingState == OperatingError))
    return On;
   d4100:	2001      	movs	r0, #1
  else
    // leave it at whatever the current state is
    return g_operatingState;
}  
   d4102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4104:	2003e388 	.word	0x2003e388
   d4108:	2003e390 	.word	0x2003e390
   d410c:	3fe00000 	.word	0x3fe00000
   d4110:	2003e3a0 	.word	0x2003e3a0

000d4114 <_Z17setOperatingState14OperatingState>:

void setOperatingState(OperatingState newState) {
   d4114:	b510      	push	{r4, lr}
  int pin;
  switch (newState) {
   d4116:	b130      	cbz	r0, d4126 <_Z17setOperatingState14OperatingState+0x12>
   d4118:	2801      	cmp	r0, #1
   d411a:	d002      	beq.n	d4122 <_Z17setOperatingState14OperatingState+0xe>
   d411c:	3001      	adds	r0, #1
   d411e:	d103      	bne.n	d4128 <_Z17setOperatingState14OperatingState+0x14>
   d4120:	bd10      	pop	{r4, pc}
  case OperatingError:
    // don't need to do anything else here since we will read and act on the globable errors state latter
    // an ideal spot for an assertion since this shouldn't every happen
    return;    
  case On:
    pin = THERMOSTAT_ON_PIN;
   d4122:	2405      	movs	r4, #5
   d4124:	e000      	b.n	d4128 <_Z17setOperatingState14OperatingState+0x14>
    break;
  case Off:
    pin = THERMOSTAT_OFF_PIN;
   d4126:	2406      	movs	r4, #6
    break;
  }

  // pluse the appropriate pin to toggle the latching relay
  digitalWrite(pin, HIGH);
   d4128:	b2a4      	uxth	r4, r4
   d412a:	2101      	movs	r1, #1
   d412c:	4620      	mov	r0, r4
   d412e:	f001 f940 	bl	d53b2 <digitalWrite>
  delay(12);
   d4132:	200c      	movs	r0, #12
   d4134:	f000 fc78 	bl	d4a28 <delay>
  digitalWrite(pin, LOW);
   d4138:	4620      	mov	r0, r4
   d413a:	2100      	movs	r1, #0
}
   d413c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }

  // pluse the appropriate pin to toggle the latching relay
  digitalWrite(pin, HIGH);
  delay(12);
  digitalWrite(pin, LOW);
   d4140:	f001 b937 	b.w	d53b2 <digitalWrite>

000d4144 <setup>:
}

// setup() runs once, when the device is first turned on.
// Put initialization like pinMode and begin functions here.
void setup() {
   d4144:	b508      	push	{r3, lr}
  
  // OUTPUT to USB
  pinMode(LED_PIN, OUTPUT);
   d4146:	2101      	movs	r1, #1
   d4148:	2000      	movs	r0, #0
   d414a:	f001 f921 	bl	d5390 <pinMode>
  delay(2000);
   d414e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4152:	f000 fc69 	bl	d4a28 <delay>
  Serial.begin(9600);            // open the serial port at 9600 bps:
   d4156:	f001 f833 	bl	d51c0 <_Z16_fetch_usbserialv>
   d415a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d415e:	f001 f823 	bl	d51a8 <_ZN9USBSerial5beginEl>
  Serial.println("\nSetup...");  // prints another carriage return
   d4162:	f001 f82d 	bl	d51c0 <_Z16_fetch_usbserialv>
   d4166:	491e      	ldr	r1, [pc, #120]	; (d41e0 <setup+0x9c>)
   d4168:	f000 febb 	bl	d4ee2 <_ZN5Print7printlnEPKc>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d416c:	2300      	movs	r3, #0
   d416e:	2209      	movs	r2, #9
   d4170:	491c      	ldr	r1, [pc, #112]	; (d41e4 <setup+0xa0>)
   d4172:	481d      	ldr	r0, [pc, #116]	; (d41e8 <setup+0xa4>)
   d4174:	f000 fbf0 	bl	d4958 <spark_variable>
   d4178:	2300      	movs	r3, #0
   d417a:	2209      	movs	r2, #9
   d417c:	491b      	ldr	r1, [pc, #108]	; (d41ec <setup+0xa8>)
   d417e:	481c      	ldr	r0, [pc, #112]	; (d41f0 <setup+0xac>)
   d4180:	f000 fbea 	bl	d4958 <spark_variable>

  Particle.variable("temperature", &g_temperature, DOUBLE);
  Particle.variable("humidity", &g_humidity, DOUBLE);
  DHT.begin();
   d4184:	481b      	ldr	r0, [pc, #108]	; (d41f4 <setup+0xb0>)
   d4186:	f000 f8dd 	bl	d4344 <_ZN3DHT5beginEv>
   d418a:	2300      	movs	r3, #0
   d418c:	2209      	movs	r2, #9
   d418e:	491a      	ldr	r1, [pc, #104]	; (d41f8 <setup+0xb4>)
   d4190:	481a      	ldr	r0, [pc, #104]	; (d41fc <setup+0xb8>)
   d4192:	f000 fbe1 	bl	d4958 <spark_variable>
   d4196:	2300      	movs	r3, #0
   d4198:	2209      	movs	r2, #9
   d419a:	4919      	ldr	r1, [pc, #100]	; (d4200 <setup+0xbc>)
   d419c:	4819      	ldr	r0, [pc, #100]	; (d4204 <setup+0xc0>)
   d419e:	f000 fbdb 	bl	d4958 <spark_variable>
  // Particle.variable("state", &g_state, INT);

  // TODO need to publish remoteoverride and add state
  // Particle.function("publish", publishCommand);

  pinMode(POT_PIN, INPUT);
   d41a2:	2100      	movs	r1, #0
   d41a4:	200f      	movs	r0, #15
   d41a6:	f001 f8f3 	bl	d5390 <pinMode>

  pinMode(THERMOSTAT_ON_PIN, OUTPUT);
   d41aa:	2101      	movs	r1, #1
   d41ac:	2005      	movs	r0, #5
   d41ae:	f001 f8ef 	bl	d5390 <pinMode>
  digitalWrite(THERMOSTAT_ON_PIN, LOW);
   d41b2:	2100      	movs	r1, #0
   d41b4:	2005      	movs	r0, #5
   d41b6:	f001 f8fc 	bl	d53b2 <digitalWrite>

  // initialize latching relay
  pinMode(THERMOSTAT_OFF_PIN, OUTPUT);
   d41ba:	2101      	movs	r1, #1
   d41bc:	2006      	movs	r0, #6
   d41be:	f001 f8e7 	bl	d5390 <pinMode>
  digitalWrite(THERMOSTAT_OFF_PIN, HIGH);
   d41c2:	2101      	movs	r1, #1
   d41c4:	2006      	movs	r0, #6
   d41c6:	f001 f8f4 	bl	d53b2 <digitalWrite>
  delay(12);
   d41ca:	200c      	movs	r0, #12
   d41cc:	f000 fc2c 	bl	d4a28 <delay>
  digitalWrite(THERMOSTAT_OFF_PIN, LOW);
   d41d0:	2100      	movs	r1, #0
   d41d2:	2006      	movs	r0, #6
   d41d4:	f001 f8ed 	bl	d53b2 <digitalWrite>
  g_operatingState = Off;
   d41d8:	4b0b      	ldr	r3, [pc, #44]	; (d4208 <setup+0xc4>)
   d41da:	2200      	movs	r2, #0
   d41dc:	701a      	strb	r2, [r3, #0]
   d41de:	bd08      	pop	{r3, pc}
   d41e0:	000d6114 	.word	0x000d6114
   d41e4:	2003e390 	.word	0x2003e390
   d41e8:	000d611e 	.word	0x000d611e
   d41ec:	2003e398 	.word	0x2003e398
   d41f0:	000d61a0 	.word	0x000d61a0
   d41f4:	2003e3bc 	.word	0x2003e3bc
   d41f8:	2003e3d0 	.word	0x2003e3d0
   d41fc:	000d612a 	.word	0x000d612a
   d4200:	2003e3a8 	.word	0x2003e3a8
   d4204:	000d6133 	.word	0x000d6133
   d4208:	2003e3a0 	.word	0x2003e3a0

000d420c <loop>:
}

// TODO Blink LED on ERROR

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d420c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Since temperature and humidity reading is slow we don't really have to
  // read then every time let's do it every 20s or so; a fireplace is not going
  // to change the heat in the room so much faster than that.
  //
  failure = 0;  // clear failure flag before attempt to read the sensors
  humidity = DHT.getHumidity();
   d4210:	4836      	ldr	r0, [pc, #216]	; (d42ec <loop+0xe0>)
  now = millis();
  // map the potentionmeter to a dial temperature

  // if the dial temperture has not changed in a second then update the "target
  // temperature"
  if (dial_temp != g_dialTemp) {
   d4212:	4f37      	ldr	r7, [pc, #220]	; (d42f0 <loop+0xe4>)
}

// TODO Blink LED on ERROR

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4214:	ed2d 8b02 	vpush	{d8}
  // Since temperature and humidity reading is slow we don't really have to
  // read then every time let's do it every 20s or so; a fireplace is not going
  // to change the heat in the room so much faster than that.
  //
  failure = 0;  // clear failure flag before attempt to read the sensors
  humidity = DHT.getHumidity();
   d4218:	f000 fa1e 	bl	d4658 <_ZN3DHT11getHumidityEv>
  // shouldn't need this since the library prevents extra reads
  // delay(50);
  temperature = DHT.getTempCelcius();
   d421c:	4833      	ldr	r0, [pc, #204]	; (d42ec <loop+0xe0>)
  // Since temperature and humidity reading is slow we don't really have to
  // read then every time let's do it every 20s or so; a fireplace is not going
  // to change the heat in the room so much faster than that.
  //
  failure = 0;  // clear failure flag before attempt to read the sensors
  humidity = DHT.getHumidity();
   d421e:	ee10 8a10 	vmov	r8, s0
  // shouldn't need this since the library prevents extra reads
  // delay(50);
  temperature = DHT.getTempCelcius();
   d4222:	f000 f9e3 	bl	d45ec <_ZN3DHT14getTempCelciusEv>

  //
  // measure the rotation of the potentiometer to determine the target
  // temperature
  //
  rotation = analogRead(POT_PIN);
   d4226:	200f      	movs	r0, #15
  //
  failure = 0;  // clear failure flag before attempt to read the sensors
  humidity = DHT.getHumidity();
  // shouldn't need this since the library prevents extra reads
  // delay(50);
  temperature = DHT.getTempCelcius();
   d4228:	ee10 9a10 	vmov	r9, s0

  //
  // measure the rotation of the potentiometer to determine the target
  // temperature
  //
  rotation = analogRead(POT_PIN);
   d422c:	f001 f8ed 	bl	d540a <analogRead>
   d4230:	ee07 0a90 	vmov	s15, r0
   d4234:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  unrounded_dial_temp = rotation / 83;
  // unrounded_dial_temp is (about) twice what it should be since we divided by
  // the steps instead of but we want to round it before we divide by 2 to get
  // it to line up on even .5 degree increments add 6 to base the range at a
  // minimum f 6ºC.
  dial_temp = round(unrounded_dial_temp) / 2 + 6;
   d4238:	eddf 7a2e 	vldr	s15, [pc, #184]	; d42f4 <loop+0xe8>
   d423c:	ee88 7a27 	vdiv.f32	s14, s16, s15
   d4240:	ee17 0a10 	vmov	r0, s14
   d4244:	f001 fc44 	bl	d5ad0 <__aeabi_f2d>
   d4248:	ec41 0b10 	vmov	d0, r0, r1
   d424c:	f001 fa84 	bl	d5758 <round>
   d4250:	2200      	movs	r2, #0
   d4252:	ec51 0b10 	vmov	r0, r1, d0
   d4256:	4b28      	ldr	r3, [pc, #160]	; (d42f8 <loop+0xec>)
   d4258:	f001 fc8e 	bl	d5b78 <__aeabi_dmul>
   d425c:	2200      	movs	r2, #0
   d425e:	4b27      	ldr	r3, [pc, #156]	; (d42fc <loop+0xf0>)
   d4260:	f001 fad8 	bl	d5814 <__adddf3>
   d4264:	4604      	mov	r4, r0
   d4266:	460d      	mov	r5, r1
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4268:	f000 fa2a 	bl	d46c0 <HAL_Timer_Get_Milli_Seconds>
  now = millis();
  // map the potentionmeter to a dial temperature

  // if the dial temperture has not changed in a second then update the "target
  // temperature"
  if (dial_temp != g_dialTemp) {
   d426c:	e9d7 2300 	ldrd	r2, r3, [r7]
   d4270:	4606      	mov	r6, r0
   d4272:	4629      	mov	r1, r5
   d4274:	4620      	mov	r0, r4
   d4276:	f001 fee7 	bl	d6048 <__aeabi_dcmpeq>
   d427a:	4b21      	ldr	r3, [pc, #132]	; (d4300 <loop+0xf4>)
   d427c:	b908      	cbnz	r0, d4282 <loop+0x76>
    // dial has moved since the last loop so reset timer
    g_lastDialChange = now;
   d427e:	601e      	str	r6, [r3, #0]
   d4280:	e007      	b.n	d4292 <loop+0x86>
  }
  else if ((g_lastDialChange - now) > 1000) {
   d4282:	6818      	ldr	r0, [r3, #0]
   d4284:	1b80      	subs	r0, r0, r6
   d4286:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d428a:	dd02      	ble.n	d4292 <loop+0x86>
    // dial hasn't moved in more than a second so reset the targetTemperature
    g_targetTemp = dial_temp;
   d428c:	4b1d      	ldr	r3, [pc, #116]	; (d4304 <loop+0xf8>)
   d428e:	e9c3 4500 	strd	r4, r5, [r3]
  }
  g_dialTemp = dial_temp;
   d4292:	e9c7 4500 	strd	r4, r5, [r7]
  if (humidity == NAN) {
    Serial.println("FAILED to read Humidity");
    failure |= ERROR_READING_HUMIDITY;
  }

  OperatingState targetState = computeTargetOperatingState();
   d4296:	f7ff ff0b 	bl	d40b0 <_Z27computeTargetOperatingStatev>
  // set latching relay based operating state
  setOperatingState(targetState);
   d429a:	f7ff ff3b 	bl	d4114 <_Z17setOperatingState14OperatingState>
      // TURN ON LED on ERROR
      digitalWrite(LED_PIN, HIGH);
    }
  */
  // update global (particle) variables
  g_temperature = (double)temperature;
   d429e:	4648      	mov	r0, r9
   d42a0:	f001 fc16 	bl	d5ad0 <__aeabi_f2d>
   d42a4:	4b18      	ldr	r3, [pc, #96]	; (d4308 <loop+0xfc>)
   d42a6:	e9c3 0100 	strd	r0, r1, [r3]
  g_humidity = (double)humidity;
   d42aa:	4640      	mov	r0, r8
   d42ac:	f001 fc10 	bl	d5ad0 <__aeabi_f2d>
   d42b0:	4b16      	ldr	r3, [pc, #88]	; (d430c <loop+0x100>)
   d42b2:	e9c3 0100 	strd	r0, r1, [r3]

  // TODO remove once we have debugged
  g_rotation = (double)rotation;
   d42b6:	ee18 0a10 	vmov	r0, s16
   d42ba:	f001 fc09 	bl	d5ad0 <__aeabi_f2d>
   d42be:	4b14      	ldr	r3, [pc, #80]	; (d4310 <loop+0x104>)
  g_dialTemp = dial_temp;
   d42c0:	e9c7 4500 	strd	r4, r5, [r7]
  // update global (particle) variables
  g_temperature = (double)temperature;
  g_humidity = (double)humidity;

  // TODO remove once we have debugged
  g_rotation = (double)rotation;
   d42c4:	e9c3 0100 	strd	r0, r1, [r3]
  g_dialTemp = dial_temp;

  newOperatingState = computeTargetOperatingState();
   d42c8:	f7ff fef2 	bl	d40b0 <_Z27computeTargetOperatingStatev>
  if (newOperatingState != g_operatingState) {
   d42cc:	4b11      	ldr	r3, [pc, #68]	; (d4314 <loop+0x108>)
   d42ce:	f993 3000 	ldrsb.w	r3, [r3]
   d42d2:	4283      	cmp	r3, r0
   d42d4:	d005      	beq.n	d42e2 <loop+0xd6>
    setOperatingState(newOperatingState);
  }


}
   d42d6:	ecbd 8b02 	vpop	{d8}
   d42da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  g_rotation = (double)rotation;
  g_dialTemp = dial_temp;

  newOperatingState = computeTargetOperatingState();
  if (newOperatingState != g_operatingState) {
    setOperatingState(newOperatingState);
   d42de:	f7ff bf19 	b.w	d4114 <_Z17setOperatingState14OperatingState>
  }


}
   d42e2:	ecbd 8b02 	vpop	{d8}
   d42e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d42ea:	bf00      	nop
   d42ec:	2003e3bc 	.word	0x2003e3bc
   d42f0:	2003e3a8 	.word	0x2003e3a8
   d42f4:	42a60000 	.word	0x42a60000
   d42f8:	3fe00000 	.word	0x3fe00000
   d42fc:	40180000 	.word	0x40180000
   d4300:	2003e380 	.word	0x2003e380
   d4304:	2003e388 	.word	0x2003e388
   d4308:	2003e390 	.word	0x2003e390
   d430c:	2003e398 	.word	0x2003e398
   d4310:	2003e3d0 	.word	0x2003e3d0
   d4314:	2003e3a0 	.word	0x2003e3a0

000d4318 <_GLOBAL__sub_I_g_operatingState>:
   d4318:	b510      	push	{r4, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d431a:	f000 f9d9 	bl	d46d0 <HAL_Pin_Map>

// LED
#define LED_ON 1
#define LED_OFF 0

DHT DHT(DHT_PIN, DHTTYPE);
   d431e:	2306      	movs	r3, #6
   d4320:	2216      	movs	r2, #22
   d4322:	2103      	movs	r1, #3
   d4324:	4802      	ldr	r0, [pc, #8]	; (d4330 <_GLOBAL__sub_I_g_operatingState+0x18>)
  if (newOperatingState != g_operatingState) {
    setOperatingState(newOperatingState);
  }


}
   d4326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

// LED
#define LED_ON 1
#define LED_OFF 0

DHT DHT(DHT_PIN, DHTTYPE);
   d432a:	f000 b803 	b.w	d4334 <_ZN3DHTC1Ehhh>
   d432e:	bf00      	nop
   d4330:	2003e3bc 	.word	0x2003e3bc

000d4334 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4334:	b510      	push	{r4, lr}
  _pin = pin;
  _type = type;
  _count = count;
   d4336:	7203      	strb	r3, [r0, #8]
  firstreading = true;
   d4338:	2301      	movs	r3, #1
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
  _pin = pin;
   d433a:	7181      	strb	r1, [r0, #6]
  _type = type;
   d433c:	71c2      	strb	r2, [r0, #7]
  _count = count;
  firstreading = true;
   d433e:	7403      	strb	r3, [r0, #16]
}
   d4340:	bd10      	pop	{r4, pc}
	...

000d4344 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d4344:	b510      	push	{r4, lr}
  // set up the pins!
  pinMode(D5, OUTPUT);
   d4346:	2101      	movs	r1, #1
  _type = type;
  _count = count;
  firstreading = true;
}

void DHT::begin(void) {
   d4348:	4604      	mov	r4, r0
  // set up the pins!
  pinMode(D5, OUTPUT);
   d434a:	2005      	movs	r0, #5
   d434c:	f001 f820 	bl	d5390 <pinMode>
  Serial.println("DHT Begin");
   d4350:	f000 ff36 	bl	d51c0 <_Z16_fetch_usbserialv>
   d4354:	4906      	ldr	r1, [pc, #24]	; (d4370 <_ZN3DHT5beginEv+0x2c>)
   d4356:	f000 fdc4 	bl	d4ee2 <_ZN5Print7printlnEPKc>
  pinMode(_pin, INPUT);
   d435a:	2100      	movs	r1, #0
   d435c:	79a0      	ldrb	r0, [r4, #6]
   d435e:	f001 f817 	bl	d5390 <pinMode>
  digitalWrite(_pin, HIGH);
   d4362:	2101      	movs	r1, #1
   d4364:	79a0      	ldrb	r0, [r4, #6]
   d4366:	f001 f824 	bl	d53b2 <digitalWrite>
  _lastreadtime = 0;
   d436a:	2300      	movs	r3, #0
   d436c:	60e3      	str	r3, [r4, #12]
   d436e:	bd10      	pop	{r4, pc}
   d4370:	000d613c 	.word	0x000d613c

000d4374 <_ZN3DHT4readEv>:
              log((float)percentHumidity / 100);
  double Td = (b * tC) / (a - tC);
  return Td;
}

boolean DHT::read(void) {
   d4374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4378:	4604      	mov	r4, r0
  uint8_t laststate = HIGH;
  uint8_t counter = 0;
  uint8_t j = 0, i;
  unsigned long currenttime;
  Serial.println("begining read()");
   d437a:	f000 ff21 	bl	d51c0 <_Z16_fetch_usbserialv>
   d437e:	4976      	ldr	r1, [pc, #472]	; (d4558 <_ZN3DHT4readEv+0x1e4>)
   d4380:	f000 fdaf 	bl	d4ee2 <_ZN5Print7printlnEPKc>
   d4384:	f000 f99c 	bl	d46c0 <HAL_Timer_Get_Milli_Seconds>

  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  currenttime = millis();
  if (currenttime < _lastreadtime) {
   d4388:	68e3      	ldr	r3, [r4, #12]
   d438a:	4283      	cmp	r3, r0
    // ie there was a rollover
    _lastreadtime = 0;
   d438c:	bf84      	itt	hi
   d438e:	2300      	movhi	r3, #0
   d4390:	60e3      	strhi	r3, [r4, #12]
  }
  if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4392:	7c23      	ldrb	r3, [r4, #16]
   d4394:	4606      	mov	r6, r0
   d4396:	b963      	cbnz	r3, d43b2 <_ZN3DHT4readEv+0x3e>
   d4398:	68e3      	ldr	r3, [r4, #12]
   d439a:	1ac3      	subs	r3, r0, r3
   d439c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   d43a0:	d207      	bcs.n	d43b2 <_ZN3DHT4readEv+0x3e>
	  Serial.println("bailing");
   d43a2:	f000 ff0d 	bl	d51c0 <_Z16_fetch_usbserialv>
   d43a6:	496d      	ldr	r1, [pc, #436]	; (d455c <_ZN3DHT4readEv+0x1e8>)
   d43a8:	f000 fd9b 	bl	d4ee2 <_ZN5Print7printlnEPKc>
    return true;  // return last correct measurement
   d43ac:	2001      	movs	r0, #1
   d43ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                  //		delay(2000 - (currenttime - _lastreadtime));
  }
  firstreading = false;
   d43b2:	2500      	movs	r5, #0
   d43b4:	7425      	strb	r5, [r4, #16]
          Serial.print("Currtime: "); Serial.print(currenttime);
   d43b6:	f000 ff03 	bl	d51c0 <_Z16_fetch_usbserialv>
   d43ba:	4969      	ldr	r1, [pc, #420]	; (d4560 <_ZN3DHT4readEv+0x1ec>)
   d43bc:	f000 fd7e 	bl	d4ebc <_ZN5Print5printEPKc>
   d43c0:	f000 fefe 	bl	d51c0 <_Z16_fetch_usbserialv>
   d43c4:	220a      	movs	r2, #10
   d43c6:	4631      	mov	r1, r6
   d43c8:	f000 fdb5 	bl	d4f36 <_ZN5Print5printEmi>
          Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
   d43cc:	f000 fef8 	bl	d51c0 <_Z16_fetch_usbserialv>
   d43d0:	4964      	ldr	r1, [pc, #400]	; (d4564 <_ZN3DHT4readEv+0x1f0>)
   d43d2:	f000 fd73 	bl	d4ebc <_ZN5Print5printEPKc>
   d43d6:	f000 fef3 	bl	d51c0 <_Z16_fetch_usbserialv>
   d43da:	220a      	movs	r2, #10
   d43dc:	68e1      	ldr	r1, [r4, #12]
   d43de:	f000 fdaa 	bl	d4f36 <_ZN5Print5printEmi>
   d43e2:	f000 f96d 	bl	d46c0 <HAL_Timer_Get_Milli_Seconds>
  _lastreadtime = millis();

  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d43e6:	7125      	strb	r5, [r4, #4]
                  //		delay(2000 - (currenttime - _lastreadtime));
  }
  firstreading = false;
          Serial.print("Currtime: "); Serial.print(currenttime);
          Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
  _lastreadtime = millis();
   d43e8:	60e0      	str	r0, [r4, #12]

  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d43ea:	70e5      	strb	r5, [r4, #3]
   d43ec:	70a5      	strb	r5, [r4, #2]
   d43ee:	7065      	strb	r5, [r4, #1]
   d43f0:	7025      	strb	r5, [r4, #0]
  Serial.println("about to read");
   d43f2:	f000 fee5 	bl	d51c0 <_Z16_fetch_usbserialv>
   d43f6:	495c      	ldr	r1, [pc, #368]	; (d4568 <_ZN3DHT4readEv+0x1f4>)
   d43f8:	f000 fd73 	bl	d4ee2 <_ZN5Print7printlnEPKc>

  // pull the pin high and wait 250 milliseconds
  digitalWrite(_pin, HIGH);
   d43fc:	2101      	movs	r1, #1
   d43fe:	79a0      	ldrb	r0, [r4, #6]
   d4400:	f000 ffd7 	bl	d53b2 <digitalWrite>
  delay(250);
   d4404:	20fa      	movs	r0, #250	; 0xfa
   d4406:	f000 fb0f 	bl	d4a28 <delay>

  // now pull it low for ~20 milliseconds
  pinMode(_pin, OUTPUT);
   d440a:	2101      	movs	r1, #1
   d440c:	79a0      	ldrb	r0, [r4, #6]
   d440e:	f000 ffbf 	bl	d5390 <pinMode>
  digitalWrite(_pin, LOW);
   d4412:	4629      	mov	r1, r5
   d4414:	79a0      	ldrb	r0, [r4, #6]
   d4416:	f000 ffcc 	bl	d53b2 <digitalWrite>
  delay(20);
   d441a:	2014      	movs	r0, #20
   d441c:	f000 fb04 	bl	d4a28 <delay>
  noInterrupts();
   d4420:	f000 fb8e 	bl	d4b40 <_Z12noInterruptsv>
  digitalWrite(_pin, HIGH);
   d4424:	2101      	movs	r1, #1
   d4426:	79a0      	ldrb	r0, [r4, #6]
   d4428:	f000 ffc3 	bl	d53b2 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d442c:	2028      	movs	r0, #40	; 0x28
   d442e:	f000 f93f 	bl	d46b0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  pinMode(_pin, INPUT);
   d4432:	4629      	mov	r1, r5
   d4434:	79a0      	ldrb	r0, [r4, #6]
   d4436:	f000 ffab 	bl	d5390 <pinMode>
}

boolean DHT::read(void) {
  uint8_t laststate = HIGH;
  uint8_t counter = 0;
  uint8_t j = 0, i;
   d443a:	462e      	mov	r6, r5
  double Td = (b * tC) / (a - tC);
  return Td;
}

boolean DHT::read(void) {
  uint8_t laststate = HIGH;
   d443c:	2701      	movs	r7, #1
   d443e:	f04f 0800 	mov.w	r8, #0
  pinMode(_pin, INPUT);

  // read in timings
  for (i = 0; i < MAXTIMINGS; i++) {
    counter = 0;
    while (digitalRead(_pin) == laststate) {
   d4442:	79a0      	ldrb	r0, [r4, #6]
   d4444:	f000 ffce 	bl	d53e4 <digitalRead>
   d4448:	42b8      	cmp	r0, r7
   d444a:	fa5f f988 	uxtb.w	r9, r8
   d444e:	d108      	bne.n	d4462 <_ZN3DHT4readEv+0xee>
   d4450:	2001      	movs	r0, #1
   d4452:	f108 0801 	add.w	r8, r8, #1
   d4456:	f000 f92b 	bl	d46b0 <HAL_Delay_Microseconds>
      counter++;
      delayMicroseconds(1);
      if (counter == 255) {
   d445a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d445e:	d1f0      	bne.n	d4442 <_ZN3DHT4readEv+0xce>
   d4460:	46c1      	mov	r9, r8
        break;
      }
    }
    laststate = digitalRead(_pin);
   d4462:	79a0      	ldrb	r0, [r4, #6]
   d4464:	f000 ffbe 	bl	d53e4 <digitalRead>

    if (counter == 255) break;
   d4468:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
      delayMicroseconds(1);
      if (counter == 255) {
        break;
      }
    }
    laststate = digitalRead(_pin);
   d446c:	b2c7      	uxtb	r7, r0

    if (counter == 255) break;
   d446e:	d014      	beq.n	d449a <_ZN3DHT4readEv+0x126>

    // ignore first 3 transitions
    if ((i >= 4) && (i % 2 == 0)) {
   d4470:	2d03      	cmp	r5, #3
   d4472:	d90e      	bls.n	d4492 <_ZN3DHT4readEv+0x11e>
   d4474:	07ea      	lsls	r2, r5, #31
   d4476:	d40c      	bmi.n	d4492 <_ZN3DHT4readEv+0x11e>
      // shove each bit into the storage bytes
      data[j / 8] <<= 1;
   d4478:	08f2      	lsrs	r2, r6, #3
      if (counter > _count) data[j / 8] |= 1;
      j++;
   d447a:	3601      	adds	r6, #1
    if (counter == 255) break;

    // ignore first 3 transitions
    if ((i >= 4) && (i % 2 == 0)) {
      // shove each bit into the storage bytes
      data[j / 8] <<= 1;
   d447c:	5ca3      	ldrb	r3, [r4, r2]
   d447e:	005b      	lsls	r3, r3, #1
   d4480:	b2db      	uxtb	r3, r3
   d4482:	54a3      	strb	r3, [r4, r2]
      if (counter > _count) data[j / 8] |= 1;
   d4484:	7a21      	ldrb	r1, [r4, #8]
   d4486:	4549      	cmp	r1, r9
   d4488:	bf3c      	itt	cc
   d448a:	f043 0301 	orrcc.w	r3, r3, #1
   d448e:	54a3      	strbcc	r3, [r4, r2]
      j++;
   d4490:	b2f6      	uxtb	r6, r6
  digitalWrite(_pin, HIGH);
  delayMicroseconds(40);
  pinMode(_pin, INPUT);

  // read in timings
  for (i = 0; i < MAXTIMINGS; i++) {
   d4492:	3501      	adds	r5, #1
   d4494:	b2ed      	uxtb	r5, r5
   d4496:	2d55      	cmp	r5, #85	; 0x55
   d4498:	d1d1      	bne.n	d443e <_ZN3DHT4readEv+0xca>
      if (counter > _count) data[j / 8] |= 1;
      j++;
    }
  }

  interrupts();
   d449a:	f000 fb53 	bl	d4b44 <_Z10interruptsv>

          Serial.println(j, DEC);
   d449e:	f000 fe8f 	bl	d51c0 <_Z16_fetch_usbserialv>
   d44a2:	220a      	movs	r2, #10
   d44a4:	4631      	mov	r1, r6
   d44a6:	f000 fd55 	bl	d4f54 <_ZN5Print7printlnEhi>
          Serial.print(data[0], HEX); Serial.print(", ");
   d44aa:	f000 fe89 	bl	d51c0 <_Z16_fetch_usbserialv>
   d44ae:	2210      	movs	r2, #16
   d44b0:	7821      	ldrb	r1, [r4, #0]
   d44b2:	f000 fd4d 	bl	d4f50 <_ZN5Print5printEhi>
   d44b6:	f000 fe83 	bl	d51c0 <_Z16_fetch_usbserialv>
   d44ba:	492c      	ldr	r1, [pc, #176]	; (d456c <_ZN3DHT4readEv+0x1f8>)
   d44bc:	f000 fcfe 	bl	d4ebc <_ZN5Print5printEPKc>
          Serial.print(data[1], HEX); Serial.print(", ");
   d44c0:	f000 fe7e 	bl	d51c0 <_Z16_fetch_usbserialv>
   d44c4:	2210      	movs	r2, #16
   d44c6:	7861      	ldrb	r1, [r4, #1]
   d44c8:	f000 fd42 	bl	d4f50 <_ZN5Print5printEhi>
   d44cc:	f000 fe78 	bl	d51c0 <_Z16_fetch_usbserialv>
   d44d0:	4926      	ldr	r1, [pc, #152]	; (d456c <_ZN3DHT4readEv+0x1f8>)
   d44d2:	f000 fcf3 	bl	d4ebc <_ZN5Print5printEPKc>
          Serial.print(data[2], HEX); Serial.print(", ");
   d44d6:	f000 fe73 	bl	d51c0 <_Z16_fetch_usbserialv>
   d44da:	2210      	movs	r2, #16
   d44dc:	78a1      	ldrb	r1, [r4, #2]
   d44de:	f000 fd37 	bl	d4f50 <_ZN5Print5printEhi>
   d44e2:	f000 fe6d 	bl	d51c0 <_Z16_fetch_usbserialv>
   d44e6:	4921      	ldr	r1, [pc, #132]	; (d456c <_ZN3DHT4readEv+0x1f8>)
   d44e8:	f000 fce8 	bl	d4ebc <_ZN5Print5printEPKc>
          Serial.print(data[3], HEX); Serial.print(", ");
   d44ec:	f000 fe68 	bl	d51c0 <_Z16_fetch_usbserialv>
   d44f0:	2210      	movs	r2, #16
   d44f2:	78e1      	ldrb	r1, [r4, #3]
   d44f4:	f000 fd2c 	bl	d4f50 <_ZN5Print5printEhi>
   d44f8:	f000 fe62 	bl	d51c0 <_Z16_fetch_usbserialv>
   d44fc:	491b      	ldr	r1, [pc, #108]	; (d456c <_ZN3DHT4readEv+0x1f8>)
   d44fe:	f000 fcdd 	bl	d4ebc <_ZN5Print5printEPKc>
          Serial.print(data[4], HEX); Serial.print(" =? ");
   d4502:	f000 fe5d 	bl	d51c0 <_Z16_fetch_usbserialv>
   d4506:	2210      	movs	r2, #16
   d4508:	7921      	ldrb	r1, [r4, #4]
   d450a:	f000 fd21 	bl	d4f50 <_ZN5Print5printEhi>
   d450e:	f000 fe57 	bl	d51c0 <_Z16_fetch_usbserialv>
   d4512:	4917      	ldr	r1, [pc, #92]	; (d4570 <_ZN3DHT4readEv+0x1fc>)
   d4514:	f000 fcd2 	bl	d4ebc <_ZN5Print5printEPKc>
          Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
   d4518:	f000 fe52 	bl	d51c0 <_Z16_fetch_usbserialv>
   d451c:	7863      	ldrb	r3, [r4, #1]
   d451e:	7821      	ldrb	r1, [r4, #0]
   d4520:	4419      	add	r1, r3
   d4522:	78a3      	ldrb	r3, [r4, #2]
   d4524:	440b      	add	r3, r1
   d4526:	78e1      	ldrb	r1, [r4, #3]
   d4528:	2210      	movs	r2, #16
   d452a:	4419      	add	r1, r3
   d452c:	f000 fd3e 	bl	d4fac <_ZN5Print7printlnEii>

  // check we read 40 bits and that the checksum matches
  if ((j >= 40) &&
   d4530:	2e27      	cmp	r6, #39	; 0x27
   d4532:	d90d      	bls.n	d4550 <_ZN3DHT4readEv+0x1dc>
   d4534:	7863      	ldrb	r3, [r4, #1]
   d4536:	7820      	ldrb	r0, [r4, #0]
   d4538:	4418      	add	r0, r3
   d453a:	78a3      	ldrb	r3, [r4, #2]
   d453c:	4418      	add	r0, r3
   d453e:	78e3      	ldrb	r3, [r4, #3]
   d4540:	4418      	add	r0, r3
   d4542:	7923      	ldrb	r3, [r4, #4]
   d4544:	b2c0      	uxtb	r0, r0
   d4546:	1ac3      	subs	r3, r0, r3
   d4548:	4258      	negs	r0, r3
   d454a:	4158      	adcs	r0, r3
   d454c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF))) {
    return true;
  }

  return false;
   d4550:	2000      	movs	r0, #0
}
   d4552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4556:	bf00      	nop
   d4558:	000d6146 	.word	0x000d6146
   d455c:	000d6156 	.word	0x000d6156
   d4560:	000d615e 	.word	0x000d615e
   d4564:	000d6169 	.word	0x000d6169
   d4568:	000d6175 	.word	0x000d6175
   d456c:	000d6183 	.word	0x000d6183
   d4570:	000d6186 	.word	0x000d6186

000d4574 <_ZN3DHT15readTemperatureEv>:
  pinMode(_pin, INPUT);
  digitalWrite(_pin, HIGH);
  _lastreadtime = 0;
}

float DHT::readTemperature() {
   d4574:	b510      	push	{r4, lr}
   d4576:	4604      	mov	r4, r0
  float f;

  Serial.println("Reading Temp");
   d4578:	f000 fe22 	bl	d51c0 <_Z16_fetch_usbserialv>
   d457c:	4918      	ldr	r1, [pc, #96]	; (d45e0 <_ZN3DHT15readTemperatureEv+0x6c>)
   d457e:	f000 fcb0 	bl	d4ee2 <_ZN5Print7printlnEPKc>
  if (read()) {
   d4582:	4620      	mov	r0, r4
   d4584:	f7ff fef6 	bl	d4374 <_ZN3DHT4readEv>
   d4588:	b330      	cbz	r0, d45d8 <_ZN3DHT15readTemperatureEv+0x64>
    switch (_type) {
   d458a:	79e3      	ldrb	r3, [r4, #7]
   d458c:	2b0b      	cmp	r3, #11
   d458e:	d004      	beq.n	d459a <_ZN3DHT15readTemperatureEv+0x26>
   d4590:	d322      	bcc.n	d45d8 <_ZN3DHT15readTemperatureEv+0x64>
   d4592:	3b15      	subs	r3, #21
   d4594:	2b01      	cmp	r3, #1
   d4596:	d906      	bls.n	d45a6 <_ZN3DHT15readTemperatureEv+0x32>
   d4598:	e01e      	b.n	d45d8 <_ZN3DHT15readTemperatureEv+0x64>
      case DHT11:
        f = data[2];
   d459a:	78a3      	ldrb	r3, [r4, #2]
   d459c:	ee00 3a10 	vmov	s0, r3
   d45a0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
        return f;
   d45a4:	bd10      	pop	{r4, pc}
      case DHT22:
      case DHT21:
        f = data[2] & 0x7F;
   d45a6:	78a3      	ldrb	r3, [r4, #2]
        f *= 256;
        f += data[3];
   d45a8:	eddf 6a0e 	vldr	s13, [pc, #56]	; d45e4 <_ZN3DHT15readTemperatureEv+0x70>
      case DHT11:
        f = data[2];
        return f;
      case DHT22:
      case DHT21:
        f = data[2] & 0x7F;
   d45ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d45b0:	ee07 2a10 	vmov	s14, r2
        f *= 256;
        f += data[3];
   d45b4:	78e2      	ldrb	r2, [r4, #3]
   d45b6:	ee07 2a90 	vmov	s15, r2
      case DHT11:
        f = data[2];
        return f;
      case DHT22:
      case DHT21:
        f = data[2] & 0x7F;
   d45ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        f *= 256;
        f += data[3];
   d45be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        f /= 10;
        if (data[2] & 0x80) f *= -1;
   d45c2:	061b      	lsls	r3, r3, #24
        return f;
      case DHT22:
      case DHT21:
        f = data[2] & 0x7F;
        f *= 256;
        f += data[3];
   d45c4:	eee7 7a26 	vfma.f32	s15, s14, s13
        f /= 10;
   d45c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d45cc:	ee87 0a87 	vdiv.f32	s0, s15, s14
        if (data[2] & 0x80) f *= -1;
   d45d0:	d504      	bpl.n	d45dc <_ZN3DHT15readTemperatureEv+0x68>
   d45d2:	eeb1 0a40 	vneg.f32	s0, s0
   d45d6:	bd10      	pop	{r4, pc}
        return f;
    }
  }
  return NAN;
   d45d8:	ed9f 0a03 	vldr	s0, [pc, #12]	; d45e8 <_ZN3DHT15readTemperatureEv+0x74>
}
   d45dc:	bd10      	pop	{r4, pc}
   d45de:	bf00      	nop
   d45e0:	000d618b 	.word	0x000d618b
   d45e4:	43800000 	.word	0x43800000
   d45e8:	7fc00000 	.word	0x7fc00000

000d45ec <_ZN3DHT14getTempCelciusEv>:

float DHT::getHumidity() { return readHumidity(); }

float DHT::getTempCelcius() { return readTemperature(); }
   d45ec:	f7ff bfc2 	b.w	d4574 <_ZN3DHT15readTemperatureEv>

000d45f0 <_ZN3DHT12readHumidityEv>:

float DHT::convertCtoF(float c) { return c * 9 / 5 + 32; }

float DHT::convertCtoK(float c) { return c + 273.15; }

float DHT::readHumidity(void) {
   d45f0:	b510      	push	{r4, lr}
   d45f2:	4604      	mov	r4, r0
  float f;
  Serial.println("reading humidity");
   d45f4:	f000 fde4 	bl	d51c0 <_Z16_fetch_usbserialv>
   d45f8:	4914      	ldr	r1, [pc, #80]	; (d464c <_ZN3DHT12readHumidityEv+0x5c>)
   d45fa:	f000 fc72 	bl	d4ee2 <_ZN5Print7printlnEPKc>
  if (read()) {
   d45fe:	4620      	mov	r0, r4
   d4600:	f7ff feb8 	bl	d4374 <_ZN3DHT4readEv>
   d4604:	b1f8      	cbz	r0, d4646 <_ZN3DHT12readHumidityEv+0x56>
    switch (_type) {
   d4606:	79e3      	ldrb	r3, [r4, #7]
   d4608:	2b0b      	cmp	r3, #11
   d460a:	d016      	beq.n	d463a <_ZN3DHT12readHumidityEv+0x4a>
   d460c:	d31b      	bcc.n	d4646 <_ZN3DHT12readHumidityEv+0x56>
   d460e:	3b15      	subs	r3, #21
   d4610:	2b01      	cmp	r3, #1
   d4612:	d818      	bhi.n	d4646 <_ZN3DHT12readHumidityEv+0x56>
      case DHT11:
        f = data[0];
        return f;
      case DHT22:
      case DHT21:
        f = data[0];
   d4614:	7823      	ldrb	r3, [r4, #0]
        f *= 256;
        f += data[1];
   d4616:	eddf 6a0e 	vldr	s13, [pc, #56]	; d4650 <_ZN3DHT12readHumidityEv+0x60>
      case DHT11:
        f = data[0];
        return f;
      case DHT22:
      case DHT21:
        f = data[0];
   d461a:	ee07 3a10 	vmov	s14, r3
        f *= 256;
        f += data[1];
   d461e:	7863      	ldrb	r3, [r4, #1]
   d4620:	ee07 3a90 	vmov	s15, r3
      case DHT11:
        f = data[0];
        return f;
      case DHT22:
      case DHT21:
        f = data[0];
   d4624:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        f *= 256;
        f += data[1];
   d4628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d462c:	eee7 7a26 	vfma.f32	s15, s14, s13
        f /= 10;
   d4630:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4634:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4638:	bd10      	pop	{r4, pc}
  float f;
  Serial.println("reading humidity");
  if (read()) {
    switch (_type) {
      case DHT11:
        f = data[0];
   d463a:	7823      	ldrb	r3, [r4, #0]
   d463c:	ee00 3a10 	vmov	s0, r3
   d4640:	eeb8 0a40 	vcvt.f32.u32	s0, s0
        return f;
   d4644:	bd10      	pop	{r4, pc}
        f += data[1];
        f /= 10;
        return f;
    }
  }
  return NAN;
   d4646:	ed9f 0a03 	vldr	s0, [pc, #12]	; d4654 <_ZN3DHT12readHumidityEv+0x64>
}
   d464a:	bd10      	pop	{r4, pc}
   d464c:	000d6198 	.word	0x000d6198
   d4650:	43800000 	.word	0x43800000
   d4654:	7fc00000 	.word	0x7fc00000

000d4658 <_ZN3DHT11getHumidityEv>:
    }
  }
  return NAN;
}

float DHT::getHumidity() { return readHumidity(); }
   d4658:	f7ff bfca 	b.w	d45f0 <_ZN3DHT12readHumidityEv>

000d465c <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
   d465c:	f000 b838 	b.w	d46d0 <HAL_Pin_Map>

000d4660 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <os_thread_is_current+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	689b      	ldr	r3, [r3, #8]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030248 	.word	0x00030248

000d4670 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <os_thread_join+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	691b      	ldr	r3, [r3, #16]
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030248 	.word	0x00030248

000d4680 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <os_thread_cleanup+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	695b      	ldr	r3, [r3, #20]
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030248 	.word	0x00030248

000d4690 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <os_mutex_create+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030248 	.word	0x00030248

000d46a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <os_mutex_recursive_create+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030248 	.word	0x00030248

000d46b0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <HAL_Delay_Microseconds+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	68db      	ldr	r3, [r3, #12]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	00030218 	.word	0x00030218

000d46c0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	695b      	ldr	r3, [r3, #20]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030218 	.word	0x00030218

000d46d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <HAL_Pin_Map+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	681b      	ldr	r3, [r3, #0]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	0003022c 	.word	0x0003022c

000d46e0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_Validate_Pin_Function+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	685b      	ldr	r3, [r3, #4]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003022c 	.word	0x0003022c

000d46f0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <HAL_Pin_Mode+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	689b      	ldr	r3, [r3, #8]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	0003022c 	.word	0x0003022c

000d4700 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_Get_Pin_Mode+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	68db      	ldr	r3, [r3, #12]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	0003022c 	.word	0x0003022c

000d4710 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_GPIO_Write+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	691b      	ldr	r3, [r3, #16]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	0003022c 	.word	0x0003022c

000d4720 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <HAL_GPIO_Read+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	695b      	ldr	r3, [r3, #20]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	0003022c 	.word	0x0003022c

000d4730 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <HAL_Interrupts_Enable_All+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	6a1b      	ldr	r3, [r3, #32]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	0003022c 	.word	0x0003022c

000d4740 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <HAL_Interrupts_Disable_All+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	0003022c 	.word	0x0003022c

000d4750 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <HAL_ADC_Read+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	0003022c 	.word	0x0003022c

000d4760 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <HAL_I2C_Write_Data+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	6a1b      	ldr	r3, [r3, #32]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030228 	.word	0x00030228

000d4770 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <HAL_I2C_Available_Data+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030228 	.word	0x00030228

000d4780 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <HAL_I2C_Read_Data+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030228 	.word	0x00030228

000d4790 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <HAL_I2C_Peek_Data+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030228 	.word	0x00030228

000d47a0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <HAL_I2C_Flush_Data+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030228 	.word	0x00030228

000d47b0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <HAL_I2C_Is_Enabled+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030228 	.word	0x00030228

000d47c0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <HAL_I2C_Init+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030228 	.word	0x00030228

000d47d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <inet_inet_ntop+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	695b      	ldr	r3, [r3, #20]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030264 	.word	0x00030264

000d47e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <netdb_freeaddrinfo+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	689b      	ldr	r3, [r3, #8]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030268 	.word	0x00030268

000d47f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <netdb_getaddrinfo+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	68db      	ldr	r3, [r3, #12]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030268 	.word	0x00030268

000d4800 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <HAL_SPI_Init+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	69db      	ldr	r3, [r3, #28]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030230 	.word	0x00030230

000d4810 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <HAL_SPI_Is_Enabled+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6a1b      	ldr	r3, [r3, #32]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030230 	.word	0x00030230

000d4820 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <HAL_USART_Init+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	681b      	ldr	r3, [r3, #0]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003023c 	.word	0x0003023c

000d4830 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <HAL_USART_Write_Data+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	68db      	ldr	r3, [r3, #12]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003023c 	.word	0x0003023c

000d4840 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <HAL_USART_Available_Data+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	691b      	ldr	r3, [r3, #16]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003023c 	.word	0x0003023c

000d4850 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <HAL_USART_Read_Data+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	695b      	ldr	r3, [r3, #20]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003023c 	.word	0x0003023c

000d4860 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <HAL_USART_Peek_Data+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	699b      	ldr	r3, [r3, #24]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	0003023c 	.word	0x0003023c

000d4870 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <HAL_USART_Flush_Data+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	69db      	ldr	r3, [r3, #28]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	0003023c 	.word	0x0003023c

000d4880 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <HAL_USART_Is_Enabled+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	6a1b      	ldr	r3, [r3, #32]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	0003023c 	.word	0x0003023c

000d4890 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <HAL_USART_Available_Data_For_Write+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	0003023c 	.word	0x0003023c

000d48a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <HAL_USB_USART_Init+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	681b      	ldr	r3, [r3, #0]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	0003024c 	.word	0x0003024c

000d48b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <HAL_USB_USART_Begin+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	685b      	ldr	r3, [r3, #4]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	0003024c 	.word	0x0003024c

000d48c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <HAL_USB_USART_Available_Data+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	691b      	ldr	r3, [r3, #16]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	0003024c 	.word	0x0003024c

000d48d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	695b      	ldr	r3, [r3, #20]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	0003024c 	.word	0x0003024c

000d48e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <HAL_USB_USART_Receive_Data+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	699b      	ldr	r3, [r3, #24]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	0003024c 	.word	0x0003024c

000d48f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <HAL_USB_USART_Send_Data+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	69db      	ldr	r3, [r3, #28]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	0003024c 	.word	0x0003024c

000d4900 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <HAL_USB_USART_Flush_Data+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	6a1b      	ldr	r3, [r3, #32]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	0003024c 	.word	0x0003024c

000d4910 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <set_system_mode+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	685b      	ldr	r3, [r3, #4]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030220 	.word	0x00030220

000d4920 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <system_delay_ms+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	695b      	ldr	r3, [r3, #20]
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030220 	.word	0x00030220

000d4930 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b03      	ldr	r3, [pc, #12]	; (d4940 <system_ctrl_set_app_request_handler+0x10>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d493a:	9301      	str	r3, [sp, #4]
   d493c:	bd08      	pop	{r3, pc}
   d493e:	0000      	.short	0x0000
   d4940:	00030220 	.word	0x00030220

000d4944 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b03      	ldr	r3, [pc, #12]	; (d4954 <system_ctrl_set_result+0x10>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d494e:	9301      	str	r3, [sp, #4]
   d4950:	bd08      	pop	{r3, pc}
   d4952:	0000      	.short	0x0000
   d4954:	00030220 	.word	0x00030220

000d4958 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <spark_variable+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	681b      	ldr	r3, [r3, #0]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030244 	.word	0x00030244

000d4968 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <spark_set_random_seed_from_cloud_handler+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030244 	.word	0x00030244

000d4978 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <network_connect+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	685b      	ldr	r3, [r3, #4]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030240 	.word	0x00030240

000d4988 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <network_connecting+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	689b      	ldr	r3, [r3, #8]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030240 	.word	0x00030240

000d4998 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <network_disconnect+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	68db      	ldr	r3, [r3, #12]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030240 	.word	0x00030240

000d49a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <network_ready+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	691b      	ldr	r3, [r3, #16]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030240 	.word	0x00030240

000d49b8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <network_on+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	695b      	ldr	r3, [r3, #20]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030240 	.word	0x00030240

000d49c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <network_off+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	699b      	ldr	r3, [r3, #24]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030240 	.word	0x00030240

000d49d8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <network_listen+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	69db      	ldr	r3, [r3, #28]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030240 	.word	0x00030240

000d49e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <network_listening+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	6a1b      	ldr	r3, [r3, #32]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030240 	.word	0x00030240

000d49f8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <network_set_listen_timeout+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030240 	.word	0x00030240

000d4a08 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <network_get_listen_timeout+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030240 	.word	0x00030240

000d4a18 <free>:
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <free+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	685b      	ldr	r3, [r3, #4]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	0003021c 	.word	0x0003021c

000d4a28 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4a28:	2100      	movs	r1, #0
   d4a2a:	f7ff bf79 	b.w	d4920 <system_delay_ms>

000d4a2e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4a2e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4a30:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4a32:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4a34:	b113      	cbz	r3, d4a3c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a36:	2203      	movs	r2, #3
   d4a38:	4601      	mov	r1, r0
   d4a3a:	4798      	blx	r3
    }
   d4a3c:	4620      	mov	r0, r4
   d4a3e:	bd10      	pop	{r4, pc}

000d4a40 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a40:	2200      	movs	r2, #0
   d4a42:	4611      	mov	r1, r2
   d4a44:	6840      	ldr	r0, [r0, #4]
   d4a46:	f7ff bfcf 	b.w	d49e8 <network_listening>

000d4a4a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4a4a:	2200      	movs	r2, #0
   d4a4c:	4611      	mov	r1, r2
   d4a4e:	6840      	ldr	r0, [r0, #4]
   d4a50:	f7ff bfda 	b.w	d4a08 <network_get_listen_timeout>

000d4a54 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4a54:	2200      	movs	r2, #0
   d4a56:	6840      	ldr	r0, [r0, #4]
   d4a58:	f7ff bfce 	b.w	d49f8 <network_set_listen_timeout>

000d4a5c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a5c:	2200      	movs	r2, #0
   d4a5e:	f081 0101 	eor.w	r1, r1, #1
   d4a62:	6840      	ldr	r0, [r0, #4]
   d4a64:	f7ff bfb8 	b.w	d49d8 <network_listen>

000d4a68 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4a68:	2300      	movs	r3, #0
   d4a6a:	461a      	mov	r2, r3
   d4a6c:	4619      	mov	r1, r3
   d4a6e:	6840      	ldr	r0, [r0, #4]
   d4a70:	f7ff bfaa 	b.w	d49c8 <network_off>

000d4a74 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4a74:	2300      	movs	r3, #0
   d4a76:	461a      	mov	r2, r3
   d4a78:	4619      	mov	r1, r3
   d4a7a:	6840      	ldr	r0, [r0, #4]
   d4a7c:	f7ff bf9c 	b.w	d49b8 <network_on>

000d4a80 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a80:	2200      	movs	r2, #0
   d4a82:	4611      	mov	r1, r2
   d4a84:	6840      	ldr	r0, [r0, #4]
   d4a86:	f7ff bf8f 	b.w	d49a8 <network_ready>

000d4a8a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4a8a:	2200      	movs	r2, #0
   d4a8c:	4611      	mov	r1, r2
   d4a8e:	6840      	ldr	r0, [r0, #4]
   d4a90:	f7ff bf7a 	b.w	d4988 <network_connecting>

000d4a94 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a94:	2200      	movs	r2, #0
   d4a96:	2102      	movs	r1, #2
   d4a98:	6840      	ldr	r0, [r0, #4]
   d4a9a:	f7ff bf7d 	b.w	d4998 <network_disconnect>

000d4a9e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4a9e:	2300      	movs	r3, #0
   d4aa0:	461a      	mov	r2, r3
   d4aa2:	6840      	ldr	r0, [r0, #4]
   d4aa4:	f7ff bf68 	b.w	d4978 <network_connect>

000d4aa8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4aa8:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4aaa:	2203      	movs	r2, #3
   d4aac:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4aae:	4a02      	ldr	r2, [pc, #8]	; (d4ab8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4ab0:	601a      	str	r2, [r3, #0]
   d4ab2:	4770      	bx	lr
   d4ab4:	2003e3d8 	.word	0x2003e3d8
   d4ab8:	000d61b4 	.word	0x000d61b4

000d4abc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4abc:	4770      	bx	lr

000d4abe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ac0:	4606      	mov	r6, r0
   d4ac2:	4615      	mov	r5, r2
   d4ac4:	460c      	mov	r4, r1
   d4ac6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4ac8:	42bc      	cmp	r4, r7
   d4aca:	d006      	beq.n	d4ada <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4acc:	6833      	ldr	r3, [r6, #0]
   d4ace:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4ad2:	689b      	ldr	r3, [r3, #8]
   d4ad4:	4630      	mov	r0, r6
   d4ad6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4ad8:	e7f6      	b.n	d4ac8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4ada:	4628      	mov	r0, r5
   d4adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ade <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4ade:	2200      	movs	r2, #0
   d4ae0:	7c00      	ldrb	r0, [r0, #16]
   d4ae2:	f7ff be3d 	b.w	d4760 <HAL_I2C_Write_Data>

000d4ae6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4ae6:	2100      	movs	r1, #0
   d4ae8:	7c00      	ldrb	r0, [r0, #16]
   d4aea:	f7ff be41 	b.w	d4770 <HAL_I2C_Available_Data>

000d4aee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4aee:	2100      	movs	r1, #0
   d4af0:	7c00      	ldrb	r0, [r0, #16]
   d4af2:	f7ff be45 	b.w	d4780 <HAL_I2C_Read_Data>

000d4af6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4af6:	2100      	movs	r1, #0
   d4af8:	7c00      	ldrb	r0, [r0, #16]
   d4afa:	f7ff be49 	b.w	d4790 <HAL_I2C_Peek_Data>

000d4afe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4afe:	2100      	movs	r1, #0
   d4b00:	7c00      	ldrb	r0, [r0, #16]
   d4b02:	f7ff be4d 	b.w	d47a0 <HAL_I2C_Flush_Data>

000d4b06 <_ZN7TwoWireD0Ev>:
   d4b06:	b510      	push	{r4, lr}
   d4b08:	4604      	mov	r4, r0
   d4b0a:	f7ff fac4 	bl	d4096 <_ZdlPv>
   d4b0e:	4620      	mov	r0, r4
   d4b10:	bd10      	pop	{r4, pc}
	...

000d4b14 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4b14:	b510      	push	{r4, lr}
   d4b16:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4b1c:	4608      	mov	r0, r1
   d4b1e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4b20:	2100      	movs	r1, #0
   d4b22:	4b04      	ldr	r3, [pc, #16]	; (d4b34 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4b24:	7420      	strb	r0, [r4, #16]
   d4b26:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4b28:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4b2a:	f7ff fe49 	bl	d47c0 <HAL_I2C_Init>

}
   d4b2e:	4620      	mov	r0, r4
   d4b30:	bd10      	pop	{r4, pc}
   d4b32:	bf00      	nop
   d4b34:	000d61e8 	.word	0x000d61e8

000d4b38 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4b38:	2100      	movs	r1, #0
   d4b3a:	7c00      	ldrb	r0, [r0, #16]
   d4b3c:	f7ff be38 	b.w	d47b0 <HAL_I2C_Is_Enabled>

000d4b40 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d4b40:	f7ff bdfe 	b.w	d4740 <HAL_Interrupts_Disable_All>

000d4b44 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d4b44:	f7ff bdf4 	b.w	d4730 <HAL_Interrupts_Enable_All>

000d4b48 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4b48:	4770      	bx	lr

000d4b4a <_ZN9IPAddressD0Ev>:
   d4b4a:	b510      	push	{r4, lr}
   d4b4c:	4604      	mov	r4, r0
   d4b4e:	f7ff faa2 	bl	d4096 <_ZdlPv>
   d4b52:	4620      	mov	r0, r4
   d4b54:	bd10      	pop	{r4, pc}

000d4b56 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4b56:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d4b58:	7d03      	ldrb	r3, [r0, #20]
   d4b5a:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4b5c:	b08d      	sub	sp, #52	; 0x34
   d4b5e:	460e      	mov	r6, r1
   d4b60:	f100 0704 	add.w	r7, r0, #4
   d4b64:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d4b68:	d002      	beq.n	d4b70 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4b6a:	f100 0508 	add.w	r5, r0, #8
   d4b6e:	e018      	b.n	d4ba2 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4b70:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b72:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4b74:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b78:	232f      	movs	r3, #47	; 0x2f
   d4b7a:	462a      	mov	r2, r5
   d4b7c:	200a      	movs	r0, #10
   d4b7e:	f7ff fe27 	bl	d47d0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4b82:	4628      	mov	r0, r5
   d4b84:	f001 fab3 	bl	d60ee <strlen>
   d4b88:	6833      	ldr	r3, [r6, #0]
   d4b8a:	4602      	mov	r2, r0
   d4b8c:	68db      	ldr	r3, [r3, #12]
   d4b8e:	4629      	mov	r1, r5
   d4b90:	4630      	mov	r0, r6
   d4b92:	4798      	blx	r3
   d4b94:	e00f      	b.n	d4bb6 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4b96:	b124      	cbz	r4, d4ba2 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4b98:	212e      	movs	r1, #46	; 0x2e
   d4b9a:	4630      	mov	r0, r6
   d4b9c:	f000 f992 	bl	d4ec4 <_ZN5Print5printEc>
   d4ba0:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4ba2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4ba6:	220a      	movs	r2, #10
   d4ba8:	4630      	mov	r0, r6
   d4baa:	f000 f9d1 	bl	d4f50 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4bae:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4bb0:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4bb2:	d1f0      	bne.n	d4b96 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4bb4:	4620      	mov	r0, r4
    }
    return n;
}
   d4bb6:	b00d      	add	sp, #52	; 0x34
   d4bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4bbc <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d4bbc:	b510      	push	{r4, lr}
   d4bbe:	4b05      	ldr	r3, [pc, #20]	; (d4bd4 <_ZN9IPAddressC1Ev+0x18>)
   d4bc0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4bc2:	2211      	movs	r2, #17
   d4bc4:	f840 3b04 	str.w	r3, [r0], #4
   d4bc8:	2100      	movs	r1, #0
   d4bca:	f001 fa88 	bl	d60de <memset>
{
    clear();
}
   d4bce:	4620      	mov	r0, r4
   d4bd0:	bd10      	pop	{r4, pc}
   d4bd2:	bf00      	nop
   d4bd4:	000d6210 	.word	0x000d6210

000d4bd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4bd8:	4603      	mov	r3, r0
   d4bda:	4a07      	ldr	r2, [pc, #28]	; (d4bf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4bdc:	b510      	push	{r4, lr}
   d4bde:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4be2:	f101 0210 	add.w	r2, r1, #16
   d4be6:	f851 4b04 	ldr.w	r4, [r1], #4
   d4bea:	f843 4b04 	str.w	r4, [r3], #4
   d4bee:	4291      	cmp	r1, r2
   d4bf0:	d1f9      	bne.n	d4be6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4bf2:	780a      	ldrb	r2, [r1, #0]
   d4bf4:	701a      	strb	r2, [r3, #0]
}
   d4bf6:	bd10      	pop	{r4, pc}
   d4bf8:	000d6210 	.word	0x000d6210

000d4bfc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4bfc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4bfe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4c02:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4c06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4c0a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4c0e:	2304      	movs	r3, #4
   d4c10:	6041      	str	r1, [r0, #4]
   d4c12:	7503      	strb	r3, [r0, #20]
   d4c14:	bd10      	pop	{r4, pc}

000d4c16 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4c16:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4c18:	780d      	ldrb	r5, [r1, #0]
   d4c1a:	788b      	ldrb	r3, [r1, #2]
   d4c1c:	784a      	ldrb	r2, [r1, #1]
   d4c1e:	78c9      	ldrb	r1, [r1, #3]
   d4c20:	9100      	str	r1, [sp, #0]
   d4c22:	4629      	mov	r1, r5
   d4c24:	f7ff ffea 	bl	d4bfc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4c28:	b003      	add	sp, #12
   d4c2a:	bd30      	pop	{r4, r5, pc}

000d4c2c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4c2c:	4b01      	ldr	r3, [pc, #4]	; (d4c34 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4c2e:	4a02      	ldr	r2, [pc, #8]	; (d4c38 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4c30:	601a      	str	r2, [r3, #0]
   d4c32:	4770      	bx	lr
   d4c34:	2003e3e0 	.word	0x2003e3e0
   d4c38:	000d62d1 	.word	0x000d62d1

000d4c3c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c3c:	2200      	movs	r2, #0
   d4c3e:	4611      	mov	r1, r2
   d4c40:	6840      	ldr	r0, [r0, #4]
   d4c42:	f7ff bed1 	b.w	d49e8 <network_listening>

000d4c46 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c46:	2200      	movs	r2, #0
   d4c48:	4611      	mov	r1, r2
   d4c4a:	6840      	ldr	r0, [r0, #4]
   d4c4c:	f7ff bedc 	b.w	d4a08 <network_get_listen_timeout>

000d4c50 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c50:	2200      	movs	r2, #0
   d4c52:	6840      	ldr	r0, [r0, #4]
   d4c54:	f7ff bed0 	b.w	d49f8 <network_set_listen_timeout>

000d4c58 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c58:	2200      	movs	r2, #0
   d4c5a:	f081 0101 	eor.w	r1, r1, #1
   d4c5e:	6840      	ldr	r0, [r0, #4]
   d4c60:	f7ff beba 	b.w	d49d8 <network_listen>

000d4c64 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4c64:	2300      	movs	r3, #0
   d4c66:	461a      	mov	r2, r3
   d4c68:	4619      	mov	r1, r3
   d4c6a:	6840      	ldr	r0, [r0, #4]
   d4c6c:	f7ff beac 	b.w	d49c8 <network_off>

000d4c70 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c70:	2300      	movs	r3, #0
   d4c72:	461a      	mov	r2, r3
   d4c74:	4619      	mov	r1, r3
   d4c76:	6840      	ldr	r0, [r0, #4]
   d4c78:	f7ff be9e 	b.w	d49b8 <network_on>

000d4c7c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c7c:	2200      	movs	r2, #0
   d4c7e:	4611      	mov	r1, r2
   d4c80:	6840      	ldr	r0, [r0, #4]
   d4c82:	f7ff be91 	b.w	d49a8 <network_ready>

000d4c86 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4c86:	2200      	movs	r2, #0
   d4c88:	4611      	mov	r1, r2
   d4c8a:	6840      	ldr	r0, [r0, #4]
   d4c8c:	f7ff be7c 	b.w	d4988 <network_connecting>

000d4c90 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c90:	2200      	movs	r2, #0
   d4c92:	2102      	movs	r1, #2
   d4c94:	6840      	ldr	r0, [r0, #4]
   d4c96:	f7ff be7f 	b.w	d4998 <network_disconnect>

000d4c9a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4c9a:	2300      	movs	r3, #0
   d4c9c:	461a      	mov	r2, r3
   d4c9e:	6840      	ldr	r0, [r0, #4]
   d4ca0:	f7ff be6a 	b.w	d4978 <network_connect>

000d4ca4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ca4:	b110      	cbz	r0, d4cac <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d4ca6:	6803      	ldr	r3, [r0, #0]
   d4ca8:	685b      	ldr	r3, [r3, #4]
   d4caa:	4718      	bx	r3
   d4cac:	4770      	bx	lr

000d4cae <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d4cae:	b538      	push	{r3, r4, r5, lr}
   d4cb0:	4604      	mov	r4, r0
   d4cb2:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d4cb4:	b1d0      	cbz	r0, d4cec <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d4cb6:	f7ff fcd3 	bl	d4660 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d4cba:	b9b8      	cbnz	r0, d4cec <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d4cbc:	7c23      	ldrb	r3, [r4, #16]
   d4cbe:	b91b      	cbnz	r3, d4cc8 <_ZN6Thread7disposeEv+0x1a>
   d4cc0:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d4cc2:	b108      	cbz	r0, d4cc8 <_ZN6Thread7disposeEv+0x1a>
   d4cc4:	f7ff fcd4 	bl	d4670 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d4cc8:	6865      	ldr	r5, [r4, #4]
   d4cca:	b155      	cbz	r5, d4ce2 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4ccc:	68ab      	ldr	r3, [r5, #8]
   d4cce:	b11b      	cbz	r3, d4cd8 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4cd0:	2203      	movs	r2, #3
   d4cd2:	4629      	mov	r1, r5
   d4cd4:	4628      	mov	r0, r5
   d4cd6:	4798      	blx	r3
            delete wrapper;
   d4cd8:	4628      	mov	r0, r5
   d4cda:	f7ff f9dc 	bl	d4096 <_ZdlPv>
            wrapper = NULL;
   d4cde:	2300      	movs	r3, #0
   d4ce0:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d4ce2:	6820      	ldr	r0, [r4, #0]
   d4ce4:	f7ff fccc 	bl	d4680 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d4ce8:	2300      	movs	r3, #0
   d4cea:	6023      	str	r3, [r4, #0]
   d4cec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4cf0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4cf0:	b538      	push	{r3, r4, r5, lr}
   d4cf2:	4b0b      	ldr	r3, [pc, #44]	; (d4d20 <_ZN5spark9MeshClassD1Ev+0x30>)
   d4cf4:	6003      	str	r3, [r0, #0]
   d4cf6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4cf8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4cfc:	b108      	cbz	r0, d4d02 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4cfe:	f7ff f9cc 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d02:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4d06:	b12d      	cbz	r5, d4d14 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d4d08:	4628      	mov	r0, r5
   d4d0a:	f7ff ffd0 	bl	d4cae <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4d0e:	4628      	mov	r0, r5
   d4d10:	f7ff f9c1 	bl	d4096 <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d14:	68a0      	ldr	r0, [r4, #8]
   d4d16:	b108      	cbz	r0, d4d1c <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d4d18:	f7ff ffc4 	bl	d4ca4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d4d1c:	4620      	mov	r0, r4
   d4d1e:	bd38      	pop	{r3, r4, r5, pc}
   d4d20:	000d6304 	.word	0x000d6304

000d4d24 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4d24:	b538      	push	{r3, r4, r5, lr}
   d4d26:	4c0d      	ldr	r4, [pc, #52]	; (d4d5c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d4d28:	4b0d      	ldr	r3, [pc, #52]	; (d4d60 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d4d2a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4d2c:	2500      	movs	r5, #0
   d4d2e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4d30:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4d34:	6063      	str	r3, [r4, #4]
   d4d36:	60a5      	str	r5, [r4, #8]
   d4d38:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d3c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4d40:	f7ff fcae 	bl	d46a0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4d44:	4b07      	ldr	r3, [pc, #28]	; (d4d64 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d4d46:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d4d4a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4d4c:	4620      	mov	r0, r4
   d4d4e:	4a06      	ldr	r2, [pc, #24]	; (d4d68 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d4d50:	4906      	ldr	r1, [pc, #24]	; (d4d6c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d4d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4d56:	f000 bbb1 	b.w	d54bc <__aeabi_atexit>
   d4d5a:	bf00      	nop
   d4d5c:	2003e3e4 	.word	0x2003e3e4
   d4d60:	000d6338 	.word	0x000d6338
   d4d64:	000d6304 	.word	0x000d6304
   d4d68:	2003e3b8 	.word	0x2003e3b8
   d4d6c:	000d4cf1 	.word	0x000d4cf1

000d4d70 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4d70:	2300      	movs	r3, #0
   d4d72:	461a      	mov	r2, r3
   d4d74:	6840      	ldr	r0, [r0, #4]
   d4d76:	f7ff bdff 	b.w	d4978 <network_connect>

000d4d7a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4d7a:	2200      	movs	r2, #0
   d4d7c:	2102      	movs	r1, #2
   d4d7e:	6840      	ldr	r0, [r0, #4]
   d4d80:	f7ff be0a 	b.w	d4998 <network_disconnect>

000d4d84 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4d84:	2200      	movs	r2, #0
   d4d86:	4611      	mov	r1, r2
   d4d88:	6840      	ldr	r0, [r0, #4]
   d4d8a:	f7ff bdfd 	b.w	d4988 <network_connecting>

000d4d8e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4d8e:	2200      	movs	r2, #0
   d4d90:	4611      	mov	r1, r2
   d4d92:	6840      	ldr	r0, [r0, #4]
   d4d94:	f7ff be08 	b.w	d49a8 <network_ready>

000d4d98 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4d98:	2300      	movs	r3, #0
   d4d9a:	461a      	mov	r2, r3
   d4d9c:	4619      	mov	r1, r3
   d4d9e:	6840      	ldr	r0, [r0, #4]
   d4da0:	f7ff be0a 	b.w	d49b8 <network_on>

000d4da4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4da4:	2300      	movs	r3, #0
   d4da6:	461a      	mov	r2, r3
   d4da8:	4619      	mov	r1, r3
   d4daa:	6840      	ldr	r0, [r0, #4]
   d4dac:	f7ff be0c 	b.w	d49c8 <network_off>

000d4db0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4db0:	2200      	movs	r2, #0
   d4db2:	f081 0101 	eor.w	r1, r1, #1
   d4db6:	6840      	ldr	r0, [r0, #4]
   d4db8:	f7ff be0e 	b.w	d49d8 <network_listen>

000d4dbc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4dbc:	2200      	movs	r2, #0
   d4dbe:	6840      	ldr	r0, [r0, #4]
   d4dc0:	f7ff be1a 	b.w	d49f8 <network_set_listen_timeout>

000d4dc4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4dc4:	2200      	movs	r2, #0
   d4dc6:	4611      	mov	r1, r2
   d4dc8:	6840      	ldr	r0, [r0, #4]
   d4dca:	f7ff be1d 	b.w	d4a08 <network_get_listen_timeout>

000d4dce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4dce:	2200      	movs	r2, #0
   d4dd0:	4611      	mov	r1, r2
   d4dd2:	6840      	ldr	r0, [r0, #4]
   d4dd4:	f7ff be08 	b.w	d49e8 <network_listening>

000d4dd8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4dd8:	b570      	push	{r4, r5, r6, lr}
   d4dda:	b08c      	sub	sp, #48	; 0x30
   d4ddc:	4614      	mov	r4, r2
   d4dde:	4606      	mov	r6, r0
    IPAddress addr;
   d4de0:	f7ff feec 	bl	d4bbc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4de4:	ab0c      	add	r3, sp, #48	; 0x30
   d4de6:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d4de8:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4dea:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d4dee:	4620      	mov	r0, r4
   d4df0:	f7ff fcfe 	bl	d47f0 <netdb_getaddrinfo>
    if (!r && ai) {
   d4df4:	4601      	mov	r1, r0
   d4df6:	bb58      	cbnz	r0, d4e50 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d4df8:	9b00      	ldr	r3, [sp, #0]
   d4dfa:	b34b      	cbz	r3, d4e50 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d4dfc:	685a      	ldr	r2, [r3, #4]
   d4dfe:	2a02      	cmp	r2, #2
   d4e00:	d00e      	beq.n	d4e20 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d4e02:	2a0a      	cmp	r2, #10
   d4e04:	d124      	bne.n	d4e50 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d4e06:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d4e08:	2211      	movs	r2, #17
   d4e0a:	a801      	add	r0, sp, #4
   d4e0c:	f001 f967 	bl	d60de <memset>
                a.v = 6;
   d4e10:	2306      	movs	r3, #6
   d4e12:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e16:	ad01      	add	r5, sp, #4
   d4e18:	f104 0308 	add.w	r3, r4, #8
   d4e1c:	3418      	adds	r4, #24
   d4e1e:	e005      	b.n	d4e2c <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4e20:	6959      	ldr	r1, [r3, #20]
   d4e22:	4630      	mov	r0, r6
   d4e24:	3104      	adds	r1, #4
   d4e26:	f7ff fef6 	bl	d4c16 <_ZN9IPAddressaSEPKh>
                break;
   d4e2a:	e011      	b.n	d4e50 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e2c:	6818      	ldr	r0, [r3, #0]
   d4e2e:	6859      	ldr	r1, [r3, #4]
   d4e30:	462a      	mov	r2, r5
   d4e32:	c203      	stmia	r2!, {r0, r1}
   d4e34:	3308      	adds	r3, #8
   d4e36:	42a3      	cmp	r3, r4
   d4e38:	4615      	mov	r5, r2
   d4e3a:	d1f7      	bne.n	d4e2c <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d4e3c:	a901      	add	r1, sp, #4
   d4e3e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4e40:	ad07      	add	r5, sp, #28
   d4e42:	f7ff fec9 	bl	d4bd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e48:	1d34      	adds	r4, r6, #4
   d4e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e4c:	682b      	ldr	r3, [r5, #0]
   d4e4e:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d4e50:	9800      	ldr	r0, [sp, #0]
   d4e52:	f7ff fcc5 	bl	d47e0 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4e56:	4630      	mov	r0, r6
   d4e58:	b00c      	add	sp, #48	; 0x30
   d4e5a:	bd70      	pop	{r4, r5, r6, pc}

000d4e5c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4e5c:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4e5e:	4a03      	ldr	r2, [pc, #12]	; (d4e6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4e60:	601a      	str	r2, [r3, #0]
   d4e62:	2200      	movs	r2, #0
   d4e64:	605a      	str	r2, [r3, #4]
   d4e66:	4770      	bx	lr
   d4e68:	2003e5b4 	.word	0x2003e5b4
   d4e6c:	000d6338 	.word	0x000d6338

000d4e70 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e72:	4606      	mov	r6, r0
   d4e74:	460d      	mov	r5, r1
   d4e76:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4e78:	2400      	movs	r4, #0
  while (size--) {
   d4e7a:	42bd      	cmp	r5, r7
   d4e7c:	d00c      	beq.n	d4e98 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4e7e:	6833      	ldr	r3, [r6, #0]
   d4e80:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e84:	689b      	ldr	r3, [r3, #8]
   d4e86:	4630      	mov	r0, r6
   d4e88:	4798      	blx	r3
     if (chunk>=0)
   d4e8a:	2800      	cmp	r0, #0
   d4e8c:	db01      	blt.n	d4e92 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4e8e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4e90:	e7f3      	b.n	d4e7a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4e92:	2c00      	cmp	r4, #0
   d4e94:	bf08      	it	eq
   d4e96:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4e98:	4620      	mov	r0, r4
   d4e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e9c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4e9c:	b570      	push	{r4, r5, r6, lr}
   d4e9e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4ea0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4ea2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4ea4:	b149      	cbz	r1, d4eba <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4ea6:	f001 f922 	bl	d60ee <strlen>
   d4eaa:	682b      	ldr	r3, [r5, #0]
   d4eac:	4602      	mov	r2, r0
   d4eae:	4621      	mov	r1, r4
   d4eb0:	4628      	mov	r0, r5
   d4eb2:	68db      	ldr	r3, [r3, #12]
    }
   d4eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4eb8:	4718      	bx	r3
    }
   d4eba:	bd70      	pop	{r4, r5, r6, pc}

000d4ebc <_ZN5Print5printEPKc>:
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	f7ff ffed 	bl	d4e9c <_ZN5Print5writeEPKc>
   d4ec2:	bd08      	pop	{r3, pc}

000d4ec4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4ec4:	6803      	ldr	r3, [r0, #0]
   d4ec6:	689b      	ldr	r3, [r3, #8]
   d4ec8:	4718      	bx	r3

000d4eca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4eca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4ecc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4ece:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4ed0:	f7ff fff8 	bl	d4ec4 <_ZN5Print5printEc>
  n += print('\n');
   d4ed4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4ed6:	4604      	mov	r4, r0
  n += print('\n');
   d4ed8:	4628      	mov	r0, r5
   d4eda:	f7ff fff3 	bl	d4ec4 <_ZN5Print5printEc>
  return n;
}
   d4ede:	4420      	add	r0, r4
   d4ee0:	bd38      	pop	{r3, r4, r5, pc}

000d4ee2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4ee2:	b538      	push	{r3, r4, r5, lr}
   d4ee4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4ee6:	f7ff ffd9 	bl	d4e9c <_ZN5Print5writeEPKc>
   d4eea:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4eec:	4628      	mov	r0, r5
   d4eee:	f7ff ffec 	bl	d4eca <_ZN5Print7printlnEv>
  return n;
}
   d4ef2:	4420      	add	r0, r4
   d4ef4:	bd38      	pop	{r3, r4, r5, pc}

000d4ef6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4ef6:	b530      	push	{r4, r5, lr}
   d4ef8:	b08b      	sub	sp, #44	; 0x2c
   d4efa:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4efc:	2100      	movs	r1, #0
   d4efe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4f02:	2a01      	cmp	r2, #1
   d4f04:	bf98      	it	ls
   d4f06:	220a      	movls	r2, #10
   d4f08:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4f0c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4f10:	fb05 3312 	mls	r3, r5, r2, r3
   d4f14:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4f18:	2b09      	cmp	r3, #9
   d4f1a:	bf94      	ite	ls
   d4f1c:	3330      	addls	r3, #48	; 0x30
   d4f1e:	3337      	addhi	r3, #55	; 0x37
   d4f20:	b2db      	uxtb	r3, r3
   d4f22:	4621      	mov	r1, r4
   d4f24:	f804 3901 	strb.w	r3, [r4], #-1
   d4f28:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4f2a:	2d00      	cmp	r5, #0
   d4f2c:	d1ee      	bne.n	d4f0c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4f2e:	f7ff ffb5 	bl	d4e9c <_ZN5Print5writeEPKc>
}
   d4f32:	b00b      	add	sp, #44	; 0x2c
   d4f34:	bd30      	pop	{r4, r5, pc}

000d4f36 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4f36:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4f38:	b92a      	cbnz	r2, d4f46 <_ZN5Print5printEmi+0x10>
   d4f3a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4f40:	689b      	ldr	r3, [r3, #8]
   d4f42:	b2c9      	uxtb	r1, r1
   d4f44:	4718      	bx	r3
  else return printNumber(n, base);
   d4f46:	b2d2      	uxtb	r2, r2
}
   d4f48:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4f4c:	f7ff bfd3 	b.w	d4ef6 <_ZN5Print11printNumberEmh>

000d4f50 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4f50:	f7ff bff1 	b.w	d4f36 <_ZN5Print5printEmi>

000d4f54 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   d4f54:	b538      	push	{r3, r4, r5, lr}
   d4f56:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4f58:	f7ff ffed 	bl	d4f36 <_ZN5Print5printEmi>
   d4f5c:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   d4f5e:	4628      	mov	r0, r5
   d4f60:	f7ff ffb3 	bl	d4eca <_ZN5Print7printlnEv>
  return n;
}
   d4f64:	4420      	add	r0, r4
   d4f66:	bd38      	pop	{r3, r4, r5, pc}

000d4f68 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d4f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4f6c:	4607      	mov	r7, r0
   d4f6e:	460e      	mov	r6, r1
  if (base == 0) {
   d4f70:	4615      	mov	r5, r2
   d4f72:	b92a      	cbnz	r2, d4f80 <_ZN5Print5printEli+0x18>
    return write(n);
   d4f74:	6803      	ldr	r3, [r0, #0]
   d4f76:	b2c9      	uxtb	r1, r1
   d4f78:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d4f7e:	4718      	bx	r3
  } else if (base == 10) {
   d4f80:	2a0a      	cmp	r2, #10
   d4f82:	d102      	bne.n	d4f8a <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d4f84:	2900      	cmp	r1, #0
   d4f86:	da01      	bge.n	d4f8c <_ZN5Print5printEli+0x24>
   d4f88:	e004      	b.n	d4f94 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4f8a:	b2d2      	uxtb	r2, r2
  }
}
   d4f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4f90:	f7ff bfb1 	b.w	d4ef6 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4f94:	212d      	movs	r1, #45	; 0x2d
   d4f96:	f7ff ff95 	bl	d4ec4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d4f9a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4f9c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d4f9e:	4271      	negs	r1, r6
   d4fa0:	4638      	mov	r0, r7
   d4fa2:	f7ff ffa8 	bl	d4ef6 <_ZN5Print11printNumberEmh>
   d4fa6:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4fac <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d4fac:	b538      	push	{r3, r4, r5, lr}
   d4fae:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4fb0:	f7ff ffda 	bl	d4f68 <_ZN5Print5printEli>
   d4fb4:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d4fb6:	4628      	mov	r0, r5
   d4fb8:	f7ff ff87 	bl	d4eca <_ZN5Print7printlnEv>
  return n;
}
   d4fbc:	4420      	add	r0, r4
   d4fbe:	bd38      	pop	{r3, r4, r5, pc}

000d4fc0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4fc0:	b510      	push	{r4, lr}
   d4fc2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4fc4:	f7ff fd33 	bl	d4a2e <_ZNSt14_Function_baseD1Ev>
   d4fc8:	4620      	mov	r0, r4
   d4fca:	bd10      	pop	{r4, pc}

000d4fcc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fcc:	4803      	ldr	r0, [pc, #12]	; (d4fdc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4fce:	4a04      	ldr	r2, [pc, #16]	; (d4fe0 <_GLOBAL__sub_I_RGB+0x14>)
   d4fd0:	4904      	ldr	r1, [pc, #16]	; (d4fe4 <_GLOBAL__sub_I_RGB+0x18>)
   d4fd2:	2300      	movs	r3, #0
   d4fd4:	6083      	str	r3, [r0, #8]
   d4fd6:	f000 ba71 	b.w	d54bc <__aeabi_atexit>
   d4fda:	bf00      	nop
   d4fdc:	2003e5bc 	.word	0x2003e5bc
   d4fe0:	2003e3b8 	.word	0x2003e3b8
   d4fe4:	000d4fc1 	.word	0x000d4fc1

000d4fe8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4fe8:	4770      	bx	lr

000d4fea <_ZN8SPIClassD0Ev>:
   d4fea:	b510      	push	{r4, lr}
   d4fec:	4604      	mov	r4, r0
   d4fee:	f7ff f852 	bl	d4096 <_ZdlPv>
   d4ff2:	4620      	mov	r0, r4
   d4ff4:	bd10      	pop	{r4, pc}
	...

000d4ff8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4ff8:	b570      	push	{r4, r5, r6, lr}
   d4ffa:	4b08      	ldr	r3, [pc, #32]	; (d501c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4ffc:	6003      	str	r3, [r0, #0]
   d4ffe:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5000:	2500      	movs	r5, #0
   d5002:	460e      	mov	r6, r1
   d5004:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5008:	f7ff fb42 	bl	d4690 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d500c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d500e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5010:	f7ff fbf6 	bl	d4800 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5014:	60a5      	str	r5, [r4, #8]
}
   d5016:	4620      	mov	r0, r4
   d5018:	bd70      	pop	{r4, r5, r6, pc}
   d501a:	bf00      	nop
   d501c:	000d636c 	.word	0x000d636c

000d5020 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5020:	7900      	ldrb	r0, [r0, #4]
   d5022:	f7ff bbf5 	b.w	d4810 <HAL_SPI_Is_Enabled>
	...

000d5028 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5028:	4b05      	ldr	r3, [pc, #20]	; (d5040 <_GLOBAL__sub_I_System+0x18>)
   d502a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d502e:	2000      	movs	r0, #0
   d5030:	805a      	strh	r2, [r3, #2]
   d5032:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5036:	7018      	strb	r0, [r3, #0]
   d5038:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d503a:	f7ff bc69 	b.w	d4910 <set_system_mode>
   d503e:	bf00      	nop
   d5040:	2003e5cc 	.word	0x2003e5cc

000d5044 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5044:	4b02      	ldr	r3, [pc, #8]	; (d5050 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5046:	681a      	ldr	r2, [r3, #0]
   d5048:	4b02      	ldr	r3, [pc, #8]	; (d5054 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d504a:	601a      	str	r2, [r3, #0]
   d504c:	4770      	bx	lr
   d504e:	bf00      	nop
   d5050:	2003e3b0 	.word	0x2003e3b0
   d5054:	2003e5d4 	.word	0x2003e5d4

000d5058 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5058:	4770      	bx	lr

000d505a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d505a:	7441      	strb	r1, [r0, #17]
   d505c:	4770      	bx	lr

000d505e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d505e:	7c00      	ldrb	r0, [r0, #16]
   d5060:	f7ff bc16 	b.w	d4890 <HAL_USART_Available_Data_For_Write>

000d5064 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5064:	7c00      	ldrb	r0, [r0, #16]
   d5066:	f7ff bbeb 	b.w	d4840 <HAL_USART_Available_Data>

000d506a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d506a:	7c00      	ldrb	r0, [r0, #16]
   d506c:	f7ff bbf8 	b.w	d4860 <HAL_USART_Peek_Data>

000d5070 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5070:	7c00      	ldrb	r0, [r0, #16]
   d5072:	f7ff bbed 	b.w	d4850 <HAL_USART_Read_Data>

000d5076 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5076:	7c00      	ldrb	r0, [r0, #16]
   d5078:	f7ff bbfa 	b.w	d4870 <HAL_USART_Flush_Data>

000d507c <_ZN11USARTSerialD0Ev>:
   d507c:	b510      	push	{r4, lr}
   d507e:	4604      	mov	r4, r0
   d5080:	f7ff f809 	bl	d4096 <_ZdlPv>
   d5084:	4620      	mov	r0, r4
   d5086:	bd10      	pop	{r4, pc}

000d5088 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5088:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d508a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d508c:	4604      	mov	r4, r0
   d508e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5090:	b925      	cbnz	r5, d509c <_ZN11USARTSerial5writeEh+0x14>
   d5092:	7c00      	ldrb	r0, [r0, #16]
   d5094:	f7ff fbfc 	bl	d4890 <HAL_USART_Available_Data_For_Write>
   d5098:	2800      	cmp	r0, #0
   d509a:	dd05      	ble.n	d50a8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d509c:	4631      	mov	r1, r6
   d509e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d50a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d50a4:	f7ff bbc4 	b.w	d4830 <HAL_USART_Write_Data>
  }
  return 0;
}
   d50a8:	4628      	mov	r0, r5
   d50aa:	bd70      	pop	{r4, r5, r6, pc}

000d50ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d50ac:	b510      	push	{r4, lr}
   d50ae:	4604      	mov	r4, r0
   d50b0:	4608      	mov	r0, r1
   d50b2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d50b4:	2200      	movs	r2, #0
   d50b6:	6062      	str	r2, [r4, #4]
   d50b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d50bc:	60a2      	str	r2, [r4, #8]
   d50be:	4a05      	ldr	r2, [pc, #20]	; (d50d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d50c0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d50c2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d50c4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d50c6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d50c8:	461a      	mov	r2, r3
   d50ca:	f7ff fba9 	bl	d4820 <HAL_USART_Init>
}
   d50ce:	4620      	mov	r0, r4
   d50d0:	bd10      	pop	{r4, pc}
   d50d2:	bf00      	nop
   d50d4:	000d63a8 	.word	0x000d63a8

000d50d8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d50d8:	7c00      	ldrb	r0, [r0, #16]
   d50da:	f7ff bbd1 	b.w	d4880 <HAL_USART_Is_Enabled>
	...

000d50e0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d50e0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d50e2:	4d0c      	ldr	r5, [pc, #48]	; (d5114 <_Z22__fetch_global_Serial1v+0x34>)
   d50e4:	6829      	ldr	r1, [r5, #0]
   d50e6:	f011 0401 	ands.w	r4, r1, #1
   d50ea:	d111      	bne.n	d5110 <_Z22__fetch_global_Serial1v+0x30>
   d50ec:	4628      	mov	r0, r5
   d50ee:	f7fe ffd6 	bl	d409e <__cxa_guard_acquire>
   d50f2:	b168      	cbz	r0, d5110 <_Z22__fetch_global_Serial1v+0x30>
   d50f4:	4a08      	ldr	r2, [pc, #32]	; (d5118 <_Z22__fetch_global_Serial1v+0x38>)
   d50f6:	4b09      	ldr	r3, [pc, #36]	; (d511c <_Z22__fetch_global_Serial1v+0x3c>)
   d50f8:	4809      	ldr	r0, [pc, #36]	; (d5120 <_Z22__fetch_global_Serial1v+0x40>)
   d50fa:	4621      	mov	r1, r4
   d50fc:	f7ff ffd6 	bl	d50ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5100:	4628      	mov	r0, r5
   d5102:	f7fe ffd1 	bl	d40a8 <__cxa_guard_release>
   d5106:	4a07      	ldr	r2, [pc, #28]	; (d5124 <_Z22__fetch_global_Serial1v+0x44>)
   d5108:	4907      	ldr	r1, [pc, #28]	; (d5128 <_Z22__fetch_global_Serial1v+0x48>)
   d510a:	4805      	ldr	r0, [pc, #20]	; (d5120 <_Z22__fetch_global_Serial1v+0x40>)
   d510c:	f000 f9d6 	bl	d54bc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5110:	4803      	ldr	r0, [pc, #12]	; (d5120 <_Z22__fetch_global_Serial1v+0x40>)
   d5112:	bd38      	pop	{r3, r4, r5, pc}
   d5114:	2003e670 	.word	0x2003e670
   d5118:	2003e674 	.word	0x2003e674
   d511c:	2003e5ec 	.word	0x2003e5ec
   d5120:	2003e5d8 	.word	0x2003e5d8
   d5124:	2003e3b8 	.word	0x2003e3b8
   d5128:	000d5059 	.word	0x000d5059

000d512c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d512c:	7441      	strb	r1, [r0, #17]
   d512e:	4770      	bx	lr

000d5130 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5130:	4770      	bx	lr

000d5132 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5132:	2100      	movs	r1, #0
   d5134:	7c00      	ldrb	r0, [r0, #16]
   d5136:	f7ff bbd3 	b.w	d48e0 <HAL_USB_USART_Receive_Data>

000d513a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d513a:	2101      	movs	r1, #1
   d513c:	7c00      	ldrb	r0, [r0, #16]
   d513e:	f7ff bbcf 	b.w	d48e0 <HAL_USB_USART_Receive_Data>

000d5142 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5142:	7c00      	ldrb	r0, [r0, #16]
   d5144:	f7ff bbc4 	b.w	d48d0 <HAL_USB_USART_Available_Data_For_Write>

000d5148 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5148:	7c00      	ldrb	r0, [r0, #16]
   d514a:	f7ff bbb9 	b.w	d48c0 <HAL_USB_USART_Available_Data>

000d514e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d514e:	b538      	push	{r3, r4, r5, lr}
   d5150:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5152:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5154:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5156:	f7ff fbbb 	bl	d48d0 <HAL_USB_USART_Available_Data_For_Write>
   d515a:	2800      	cmp	r0, #0
   d515c:	dc01      	bgt.n	d5162 <_ZN9USBSerial5writeEh+0x14>
   d515e:	7c60      	ldrb	r0, [r4, #17]
   d5160:	b120      	cbz	r0, d516c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5162:	4629      	mov	r1, r5
   d5164:	7c20      	ldrb	r0, [r4, #16]
   d5166:	f7ff fbc3 	bl	d48f0 <HAL_USB_USART_Send_Data>
    return 1;
   d516a:	2001      	movs	r0, #1
  }
  return 0;
}
   d516c:	bd38      	pop	{r3, r4, r5, pc}

000d516e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d516e:	7c00      	ldrb	r0, [r0, #16]
   d5170:	f7ff bbc6 	b.w	d4900 <HAL_USB_USART_Flush_Data>

000d5174 <_ZN9USBSerialD0Ev>:
   d5174:	b510      	push	{r4, lr}
   d5176:	4604      	mov	r4, r0
   d5178:	f7fe ff8d 	bl	d4096 <_ZdlPv>
   d517c:	4620      	mov	r0, r4
   d517e:	bd10      	pop	{r4, pc}

000d5180 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5180:	b510      	push	{r4, lr}
   d5182:	4604      	mov	r4, r0
   d5184:	2300      	movs	r3, #0
   d5186:	6063      	str	r3, [r4, #4]
   d5188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d518c:	60a3      	str	r3, [r4, #8]
   d518e:	4b05      	ldr	r3, [pc, #20]	; (d51a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5190:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5192:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5194:	4608      	mov	r0, r1
{
  _serial = serial;
   d5196:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5198:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d519a:	4611      	mov	r1, r2
   d519c:	f7ff fb80 	bl	d48a0 <HAL_USB_USART_Init>
}
   d51a0:	4620      	mov	r0, r4
   d51a2:	bd10      	pop	{r4, pc}
   d51a4:	000d63d8 	.word	0x000d63d8

000d51a8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d51a8:	2200      	movs	r2, #0
   d51aa:	7c00      	ldrb	r0, [r0, #16]
   d51ac:	f7ff bb80 	b.w	d48b0 <HAL_USB_USART_Begin>

000d51b0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d51b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d51b2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d51b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d51b6:	2100      	movs	r1, #0
   d51b8:	f000 ff91 	bl	d60de <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d51bc:	4620      	mov	r0, r4
   d51be:	bd10      	pop	{r4, pc}

000d51c0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d51c0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d51c2:	4d0e      	ldr	r5, [pc, #56]	; (d51fc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d51c4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d51c6:	a801      	add	r0, sp, #4
   d51c8:	f7ff fff2 	bl	d51b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d51cc:	6829      	ldr	r1, [r5, #0]
   d51ce:	f011 0401 	ands.w	r4, r1, #1
   d51d2:	d110      	bne.n	d51f6 <_Z16_fetch_usbserialv+0x36>
   d51d4:	4628      	mov	r0, r5
   d51d6:	f7fe ff62 	bl	d409e <__cxa_guard_acquire>
   d51da:	b160      	cbz	r0, d51f6 <_Z16_fetch_usbserialv+0x36>
   d51dc:	aa01      	add	r2, sp, #4
   d51de:	4621      	mov	r1, r4
   d51e0:	4807      	ldr	r0, [pc, #28]	; (d5200 <_Z16_fetch_usbserialv+0x40>)
   d51e2:	f7ff ffcd 	bl	d5180 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d51e6:	4628      	mov	r0, r5
   d51e8:	f7fe ff5e 	bl	d40a8 <__cxa_guard_release>
   d51ec:	4a05      	ldr	r2, [pc, #20]	; (d5204 <_Z16_fetch_usbserialv+0x44>)
   d51ee:	4906      	ldr	r1, [pc, #24]	; (d5208 <_Z16_fetch_usbserialv+0x48>)
   d51f0:	4803      	ldr	r0, [pc, #12]	; (d5200 <_Z16_fetch_usbserialv+0x40>)
   d51f2:	f000 f963 	bl	d54bc <__aeabi_atexit>
	return _usbserial;
}
   d51f6:	4802      	ldr	r0, [pc, #8]	; (d5200 <_Z16_fetch_usbserialv+0x40>)
   d51f8:	b007      	add	sp, #28
   d51fa:	bd30      	pop	{r4, r5, pc}
   d51fc:	2003e6f8 	.word	0x2003e6f8
   d5200:	2003e6fc 	.word	0x2003e6fc
   d5204:	2003e3b8 	.word	0x2003e3b8
   d5208:	000d5131 	.word	0x000d5131

000d520c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d520c:	2200      	movs	r2, #0
   d520e:	4611      	mov	r1, r2
   d5210:	6840      	ldr	r0, [r0, #4]
   d5212:	f7ff bbc9 	b.w	d49a8 <network_ready>

000d5216 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5216:	2200      	movs	r2, #0
   d5218:	4611      	mov	r1, r2
   d521a:	6840      	ldr	r0, [r0, #4]
   d521c:	f7ff bbe4 	b.w	d49e8 <network_listening>

000d5220 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5220:	2200      	movs	r2, #0
   d5222:	4611      	mov	r1, r2
   d5224:	6840      	ldr	r0, [r0, #4]
   d5226:	f7ff bbef 	b.w	d4a08 <network_get_listen_timeout>

000d522a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d522a:	2200      	movs	r2, #0
   d522c:	6840      	ldr	r0, [r0, #4]
   d522e:	f7ff bbe3 	b.w	d49f8 <network_set_listen_timeout>

000d5232 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5232:	2200      	movs	r2, #0
   d5234:	f081 0101 	eor.w	r1, r1, #1
   d5238:	6840      	ldr	r0, [r0, #4]
   d523a:	f7ff bbcd 	b.w	d49d8 <network_listen>

000d523e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d523e:	2300      	movs	r3, #0
   d5240:	461a      	mov	r2, r3
   d5242:	4619      	mov	r1, r3
   d5244:	6840      	ldr	r0, [r0, #4]
   d5246:	f7ff bbbf 	b.w	d49c8 <network_off>

000d524a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d524a:	2300      	movs	r3, #0
   d524c:	461a      	mov	r2, r3
   d524e:	4619      	mov	r1, r3
   d5250:	6840      	ldr	r0, [r0, #4]
   d5252:	f7ff bbb1 	b.w	d49b8 <network_on>

000d5256 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5256:	2200      	movs	r2, #0
   d5258:	4611      	mov	r1, r2
   d525a:	6840      	ldr	r0, [r0, #4]
   d525c:	f7ff bb94 	b.w	d4988 <network_connecting>

000d5260 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5260:	2200      	movs	r2, #0
   d5262:	2102      	movs	r1, #2
   d5264:	6840      	ldr	r0, [r0, #4]
   d5266:	f7ff bb97 	b.w	d4998 <network_disconnect>

000d526a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d526a:	2300      	movs	r3, #0
   d526c:	461a      	mov	r2, r3
   d526e:	6840      	ldr	r0, [r0, #4]
   d5270:	f7ff bb82 	b.w	d4978 <network_connect>

000d5274 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5274:	4b02      	ldr	r3, [pc, #8]	; (d5280 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5276:	2204      	movs	r2, #4
   d5278:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d527a:	4a02      	ldr	r2, [pc, #8]	; (d5284 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d527c:	601a      	str	r2, [r3, #0]
   d527e:	4770      	bx	lr
   d5280:	2003e710 	.word	0x2003e710
   d5284:	000d6408 	.word	0x000d6408

000d5288 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5288:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d528a:	4b0c      	ldr	r3, [pc, #48]	; (d52bc <serialEventRun+0x34>)
   d528c:	b133      	cbz	r3, d529c <serialEventRun+0x14>
   d528e:	f7ff ff97 	bl	d51c0 <_Z16_fetch_usbserialv>
   d5292:	6803      	ldr	r3, [r0, #0]
   d5294:	691b      	ldr	r3, [r3, #16]
   d5296:	4798      	blx	r3
   d5298:	2800      	cmp	r0, #0
   d529a:	dc09      	bgt.n	d52b0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d529c:	4b08      	ldr	r3, [pc, #32]	; (d52c0 <serialEventRun+0x38>)
   d529e:	b163      	cbz	r3, d52ba <serialEventRun+0x32>
   d52a0:	f7ff ff1e 	bl	d50e0 <_Z22__fetch_global_Serial1v>
   d52a4:	6803      	ldr	r3, [r0, #0]
   d52a6:	691b      	ldr	r3, [r3, #16]
   d52a8:	4798      	blx	r3
   d52aa:	2800      	cmp	r0, #0
   d52ac:	dc03      	bgt.n	d52b6 <serialEventRun+0x2e>
   d52ae:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d52b0:	f3af 8000 	nop.w
   d52b4:	e7f2      	b.n	d529c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d52b6:	f3af 8000 	nop.w
   d52ba:	bd08      	pop	{r3, pc}
	...

000d52c4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d52c4:	b508      	push	{r3, lr}
	serialEventRun();
   d52c6:	f7ff ffdf 	bl	d5288 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d52ca:	f7ff f9f9 	bl	d46c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d52ce:	4b01      	ldr	r3, [pc, #4]	; (d52d4 <_post_loop+0x10>)
   d52d0:	6018      	str	r0, [r3, #0]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	2003e71c 	.word	0x2003e71c

000d52d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d52d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52da:	2300      	movs	r3, #0
   d52dc:	9300      	str	r3, [sp, #0]
   d52de:	461a      	mov	r2, r3
   d52e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52e4:	f7ff fb2e 	bl	d4944 <system_ctrl_set_result>
}
   d52e8:	b003      	add	sp, #12
   d52ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d52f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d52f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d52f2:	8843      	ldrh	r3, [r0, #2]
   d52f4:	2b0a      	cmp	r3, #10
   d52f6:	d008      	beq.n	d530a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d52f8:	2b50      	cmp	r3, #80	; 0x50
   d52fa:	d109      	bne.n	d5310 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d52fc:	4b09      	ldr	r3, [pc, #36]	; (d5324 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d52fe:	681b      	ldr	r3, [r3, #0]
   d5300:	b13b      	cbz	r3, d5312 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5302:	b003      	add	sp, #12
   d5304:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5308:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d530a:	f7ff ffe5 	bl	d52d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d530e:	e006      	b.n	d531e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5310:	2300      	movs	r3, #0
   d5312:	9300      	str	r3, [sp, #0]
   d5314:	461a      	mov	r2, r3
   d5316:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d531a:	f7ff fb13 	bl	d4944 <system_ctrl_set_result>
        break;
    }
}
   d531e:	b003      	add	sp, #12
   d5320:	f85d fb04 	ldr.w	pc, [sp], #4
   d5324:	2003e718 	.word	0x2003e718

000d5328 <module_user_init_hook>:

void module_user_init_hook()
{
   d5328:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d532a:	2100      	movs	r1, #0
   d532c:	4804      	ldr	r0, [pc, #16]	; (d5340 <module_user_init_hook+0x18>)
   d532e:	f7ff fb1b 	bl	d4968 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5332:	2100      	movs	r1, #0
   d5334:	4803      	ldr	r0, [pc, #12]	; (d5344 <module_user_init_hook+0x1c>)
}
   d5336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d533a:	f7ff baf9 	b.w	d4930 <system_ctrl_set_app_request_handler>
   d533e:	bf00      	nop
   d5340:	00000000 	.word	0x00000000
   d5344:	000d52f1 	.word	0x000d52f1

000d5348 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5348:	b510      	push	{r4, lr}
   d534a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d534c:	480f      	ldr	r0, [pc, #60]	; (d538c <pinAvailable+0x44>)
   d534e:	f7ff fe67 	bl	d5020 <_ZN8SPIClass9isEnabledEv>
   d5352:	b128      	cbz	r0, d5360 <pinAvailable+0x18>
   d5354:	f1a4 030b 	sub.w	r3, r4, #11
   d5358:	2b02      	cmp	r3, #2
   d535a:	d801      	bhi.n	d5360 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d535c:	2000      	movs	r0, #0
   d535e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5360:	f000 f86a 	bl	d5438 <_Z19__fetch_global_Wirev>
   d5364:	f7ff fbe8 	bl	d4b38 <_ZN7TwoWire9isEnabledEv>
   d5368:	b108      	cbz	r0, d536e <pinAvailable+0x26>
   d536a:	2c01      	cmp	r4, #1
   d536c:	d9f6      	bls.n	d535c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d536e:	f7ff feb7 	bl	d50e0 <_Z22__fetch_global_Serial1v>
   d5372:	f7ff feb1 	bl	d50d8 <_ZN11USARTSerial9isEnabledEv>
   d5376:	b118      	cbz	r0, d5380 <pinAvailable+0x38>
   d5378:	f1a4 0309 	sub.w	r3, r4, #9
   d537c:	2b01      	cmp	r3, #1
   d537e:	d9ed      	bls.n	d535c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5380:	2c23      	cmp	r4, #35	; 0x23
   d5382:	bf8c      	ite	hi
   d5384:	2000      	movhi	r0, #0
   d5386:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5388:	bd10      	pop	{r4, pc}
   d538a:	bf00      	nop
   d538c:	2003e738 	.word	0x2003e738

000d5390 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5390:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5392:	b538      	push	{r3, r4, r5, lr}
   d5394:	4604      	mov	r4, r0
   d5396:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5398:	d80a      	bhi.n	d53b0 <pinMode+0x20>
   d539a:	29ff      	cmp	r1, #255	; 0xff
   d539c:	d008      	beq.n	d53b0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d539e:	f7ff ffd3 	bl	d5348 <pinAvailable>
   d53a2:	b128      	cbz	r0, d53b0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d53a4:	4629      	mov	r1, r5
   d53a6:	4620      	mov	r0, r4
}
   d53a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d53ac:	f7ff b9a0 	b.w	d46f0 <HAL_Pin_Mode>
   d53b0:	bd38      	pop	{r3, r4, r5, pc}

000d53b2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d53b2:	b538      	push	{r3, r4, r5, lr}
   d53b4:	4604      	mov	r4, r0
   d53b6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d53b8:	f7ff f9a2 	bl	d4700 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d53bc:	28ff      	cmp	r0, #255	; 0xff
   d53be:	d010      	beq.n	d53e2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d53c0:	2806      	cmp	r0, #6
   d53c2:	d804      	bhi.n	d53ce <digitalWrite+0x1c>
   d53c4:	234d      	movs	r3, #77	; 0x4d
   d53c6:	fa23 f000 	lsr.w	r0, r3, r0
   d53ca:	07c3      	lsls	r3, r0, #31
   d53cc:	d409      	bmi.n	d53e2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d53ce:	4620      	mov	r0, r4
   d53d0:	f7ff ffba 	bl	d5348 <pinAvailable>
   d53d4:	b128      	cbz	r0, d53e2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d53d6:	4629      	mov	r1, r5
   d53d8:	4620      	mov	r0, r4
}
   d53da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d53de:	f7ff b997 	b.w	d4710 <HAL_GPIO_Write>
   d53e2:	bd38      	pop	{r3, r4, r5, pc}

000d53e4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d53e4:	b510      	push	{r4, lr}
   d53e6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d53e8:	f7ff f98a 	bl	d4700 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d53ec:	3804      	subs	r0, #4
   d53ee:	b2c0      	uxtb	r0, r0
   d53f0:	2801      	cmp	r0, #1
   d53f2:	d908      	bls.n	d5406 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d53f4:	4620      	mov	r0, r4
   d53f6:	f7ff ffa7 	bl	d5348 <pinAvailable>
   d53fa:	b120      	cbz	r0, d5406 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d53fc:	4620      	mov	r0, r4
}
   d53fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5402:	f7ff b98d 	b.w	d4720 <HAL_GPIO_Read>
}
   d5406:	2000      	movs	r0, #0
   d5408:	bd10      	pop	{r4, pc}

000d540a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d540a:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d540c:	b510      	push	{r4, lr}
   d540e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5410:	bf9c      	itt	ls
   d5412:	340e      	addls	r4, #14
   d5414:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5416:	4620      	mov	r0, r4
   d5418:	f7ff ff96 	bl	d5348 <pinAvailable>
   d541c:	b150      	cbz	r0, d5434 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d541e:	2103      	movs	r1, #3
   d5420:	4620      	mov	r0, r4
   d5422:	f7ff f95d 	bl	d46e0 <HAL_Validate_Pin_Function>
   d5426:	2803      	cmp	r0, #3
   d5428:	d104      	bne.n	d5434 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d542a:	4620      	mov	r0, r4
}
   d542c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5430:	f7ff b98e 	b.w	d4750 <HAL_ADC_Read>
}
   d5434:	2000      	movs	r0, #0
   d5436:	bd10      	pop	{r4, pc}

000d5438 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5438:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d543a:	4d0b      	ldr	r5, [pc, #44]	; (d5468 <_Z19__fetch_global_Wirev+0x30>)
   d543c:	6829      	ldr	r1, [r5, #0]
   d543e:	f011 0401 	ands.w	r4, r1, #1
   d5442:	d10f      	bne.n	d5464 <_Z19__fetch_global_Wirev+0x2c>
   d5444:	4628      	mov	r0, r5
   d5446:	f7fe fe2a 	bl	d409e <__cxa_guard_acquire>
   d544a:	b158      	cbz	r0, d5464 <_Z19__fetch_global_Wirev+0x2c>
   d544c:	4621      	mov	r1, r4
   d544e:	4807      	ldr	r0, [pc, #28]	; (d546c <_Z19__fetch_global_Wirev+0x34>)
   d5450:	f7ff fb60 	bl	d4b14 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5454:	4628      	mov	r0, r5
   d5456:	f7fe fe27 	bl	d40a8 <__cxa_guard_release>
   d545a:	4a05      	ldr	r2, [pc, #20]	; (d5470 <_Z19__fetch_global_Wirev+0x38>)
   d545c:	4905      	ldr	r1, [pc, #20]	; (d5474 <_Z19__fetch_global_Wirev+0x3c>)
   d545e:	4803      	ldr	r0, [pc, #12]	; (d546c <_Z19__fetch_global_Wirev+0x34>)
   d5460:	f000 f82c 	bl	d54bc <__aeabi_atexit>
	return wire;
}
   d5464:	4801      	ldr	r0, [pc, #4]	; (d546c <_Z19__fetch_global_Wirev+0x34>)
   d5466:	bd38      	pop	{r3, r4, r5, pc}
   d5468:	2003e720 	.word	0x2003e720
   d546c:	2003e724 	.word	0x2003e724
   d5470:	2003e3b8 	.word	0x2003e3b8
   d5474:	000d4abd 	.word	0x000d4abd

000d5478 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5478:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d547a:	4c0c      	ldr	r4, [pc, #48]	; (d54ac <_GLOBAL__sub_I_SPI+0x34>)
   d547c:	4e0c      	ldr	r6, [pc, #48]	; (d54b0 <_GLOBAL__sub_I_SPI+0x38>)
   d547e:	4d0d      	ldr	r5, [pc, #52]	; (d54b4 <_GLOBAL__sub_I_SPI+0x3c>)
   d5480:	2100      	movs	r1, #0
   d5482:	4620      	mov	r0, r4
   d5484:	f7ff fdb8 	bl	d4ff8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5488:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d548a:	4c0b      	ldr	r4, [pc, #44]	; (d54b8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d548c:	4632      	mov	r2, r6
   d548e:	4629      	mov	r1, r5
   d5490:	f000 f814 	bl	d54bc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5494:	2101      	movs	r1, #1
   d5496:	4620      	mov	r0, r4
   d5498:	f7ff fdae 	bl	d4ff8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d549c:	4632      	mov	r2, r6
   d549e:	4629      	mov	r1, r5
   d54a0:	4620      	mov	r0, r4
   d54a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d54a6:	f000 b809 	b.w	d54bc <__aeabi_atexit>
   d54aa:	bf00      	nop
   d54ac:	2003e738 	.word	0x2003e738
   d54b0:	2003e3b8 	.word	0x2003e3b8
   d54b4:	000d4fe9 	.word	0x000d4fe9
   d54b8:	2003e748 	.word	0x2003e748

000d54bc <__aeabi_atexit>:
   d54bc:	460b      	mov	r3, r1
   d54be:	4601      	mov	r1, r0
   d54c0:	4618      	mov	r0, r3
   d54c2:	f000 bdf3 	b.w	d60ac <__cxa_atexit>
	...

000d54c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d54c8:	4b24      	ldr	r3, [pc, #144]	; (d555c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d54ca:	681a      	ldr	r2, [r3, #0]
   d54cc:	07d0      	lsls	r0, r2, #31
   d54ce:	bf5c      	itt	pl
   d54d0:	2201      	movpl	r2, #1
   d54d2:	601a      	strpl	r2, [r3, #0]
   d54d4:	4b22      	ldr	r3, [pc, #136]	; (d5560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d54d6:	681a      	ldr	r2, [r3, #0]
   d54d8:	07d1      	lsls	r1, r2, #31
   d54da:	bf5c      	itt	pl
   d54dc:	2201      	movpl	r2, #1
   d54de:	601a      	strpl	r2, [r3, #0]
   d54e0:	4b20      	ldr	r3, [pc, #128]	; (d5564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d54e2:	681a      	ldr	r2, [r3, #0]
   d54e4:	07d2      	lsls	r2, r2, #31
   d54e6:	bf5c      	itt	pl
   d54e8:	2201      	movpl	r2, #1
   d54ea:	601a      	strpl	r2, [r3, #0]
   d54ec:	4b1e      	ldr	r3, [pc, #120]	; (d5568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d54ee:	681a      	ldr	r2, [r3, #0]
   d54f0:	07d0      	lsls	r0, r2, #31
   d54f2:	bf5c      	itt	pl
   d54f4:	2201      	movpl	r2, #1
   d54f6:	601a      	strpl	r2, [r3, #0]
   d54f8:	4b1c      	ldr	r3, [pc, #112]	; (d556c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d54fa:	681a      	ldr	r2, [r3, #0]
   d54fc:	07d1      	lsls	r1, r2, #31
   d54fe:	bf5c      	itt	pl
   d5500:	2201      	movpl	r2, #1
   d5502:	601a      	strpl	r2, [r3, #0]
   d5504:	4b1a      	ldr	r3, [pc, #104]	; (d5570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5506:	681a      	ldr	r2, [r3, #0]
   d5508:	07d2      	lsls	r2, r2, #31
   d550a:	bf5c      	itt	pl
   d550c:	2201      	movpl	r2, #1
   d550e:	601a      	strpl	r2, [r3, #0]
   d5510:	4b18      	ldr	r3, [pc, #96]	; (d5574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5512:	681a      	ldr	r2, [r3, #0]
   d5514:	07d0      	lsls	r0, r2, #31
   d5516:	bf5c      	itt	pl
   d5518:	2201      	movpl	r2, #1
   d551a:	601a      	strpl	r2, [r3, #0]
   d551c:	4b16      	ldr	r3, [pc, #88]	; (d5578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d551e:	681a      	ldr	r2, [r3, #0]
   d5520:	07d1      	lsls	r1, r2, #31
   d5522:	bf5c      	itt	pl
   d5524:	2201      	movpl	r2, #1
   d5526:	601a      	strpl	r2, [r3, #0]
   d5528:	4b14      	ldr	r3, [pc, #80]	; (d557c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d552a:	681a      	ldr	r2, [r3, #0]
   d552c:	07d2      	lsls	r2, r2, #31
   d552e:	bf5c      	itt	pl
   d5530:	2201      	movpl	r2, #1
   d5532:	601a      	strpl	r2, [r3, #0]
   d5534:	4b12      	ldr	r3, [pc, #72]	; (d5580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5536:	681a      	ldr	r2, [r3, #0]
   d5538:	07d0      	lsls	r0, r2, #31
   d553a:	bf5c      	itt	pl
   d553c:	2201      	movpl	r2, #1
   d553e:	601a      	strpl	r2, [r3, #0]
   d5540:	4b10      	ldr	r3, [pc, #64]	; (d5584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5542:	681a      	ldr	r2, [r3, #0]
   d5544:	07d1      	lsls	r1, r2, #31
   d5546:	bf5c      	itt	pl
   d5548:	2201      	movpl	r2, #1
   d554a:	601a      	strpl	r2, [r3, #0]
   d554c:	4b0e      	ldr	r3, [pc, #56]	; (d5588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d554e:	681a      	ldr	r2, [r3, #0]
   d5550:	07d2      	lsls	r2, r2, #31
   d5552:	bf5c      	itt	pl
   d5554:	2201      	movpl	r2, #1
   d5556:	601a      	strpl	r2, [r3, #0]
   d5558:	4770      	bx	lr
   d555a:	bf00      	nop
   d555c:	2003e784 	.word	0x2003e784
   d5560:	2003e780 	.word	0x2003e780
   d5564:	2003e77c 	.word	0x2003e77c
   d5568:	2003e778 	.word	0x2003e778
   d556c:	2003e774 	.word	0x2003e774
   d5570:	2003e770 	.word	0x2003e770
   d5574:	2003e76c 	.word	0x2003e76c
   d5578:	2003e768 	.word	0x2003e768
   d557c:	2003e764 	.word	0x2003e764
   d5580:	2003e760 	.word	0x2003e760
   d5584:	2003e75c 	.word	0x2003e75c
   d5588:	2003e758 	.word	0x2003e758

000d558c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d558c:	4b18      	ldr	r3, [pc, #96]	; (d55f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d558e:	681a      	ldr	r2, [r3, #0]
   d5590:	07d1      	lsls	r1, r2, #31
   d5592:	bf5c      	itt	pl
   d5594:	2201      	movpl	r2, #1
   d5596:	601a      	strpl	r2, [r3, #0]
   d5598:	4b16      	ldr	r3, [pc, #88]	; (d55f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d559a:	681a      	ldr	r2, [r3, #0]
   d559c:	07d2      	lsls	r2, r2, #31
   d559e:	bf5c      	itt	pl
   d55a0:	2201      	movpl	r2, #1
   d55a2:	601a      	strpl	r2, [r3, #0]
   d55a4:	4b14      	ldr	r3, [pc, #80]	; (d55f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d55a6:	681a      	ldr	r2, [r3, #0]
   d55a8:	07d0      	lsls	r0, r2, #31
   d55aa:	bf5c      	itt	pl
   d55ac:	2201      	movpl	r2, #1
   d55ae:	601a      	strpl	r2, [r3, #0]
   d55b0:	4b12      	ldr	r3, [pc, #72]	; (d55fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d55b2:	681a      	ldr	r2, [r3, #0]
   d55b4:	07d1      	lsls	r1, r2, #31
   d55b6:	bf5c      	itt	pl
   d55b8:	2201      	movpl	r2, #1
   d55ba:	601a      	strpl	r2, [r3, #0]
   d55bc:	4b10      	ldr	r3, [pc, #64]	; (d5600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d55be:	681a      	ldr	r2, [r3, #0]
   d55c0:	07d2      	lsls	r2, r2, #31
   d55c2:	bf5c      	itt	pl
   d55c4:	2201      	movpl	r2, #1
   d55c6:	601a      	strpl	r2, [r3, #0]
   d55c8:	4b0e      	ldr	r3, [pc, #56]	; (d5604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d55ca:	681a      	ldr	r2, [r3, #0]
   d55cc:	07d0      	lsls	r0, r2, #31
   d55ce:	bf5c      	itt	pl
   d55d0:	2201      	movpl	r2, #1
   d55d2:	601a      	strpl	r2, [r3, #0]
   d55d4:	4b0c      	ldr	r3, [pc, #48]	; (d5608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d55d6:	681a      	ldr	r2, [r3, #0]
   d55d8:	07d1      	lsls	r1, r2, #31
   d55da:	bf5c      	itt	pl
   d55dc:	2201      	movpl	r2, #1
   d55de:	601a      	strpl	r2, [r3, #0]
   d55e0:	4b0a      	ldr	r3, [pc, #40]	; (d560c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d55e2:	681a      	ldr	r2, [r3, #0]
   d55e4:	07d2      	lsls	r2, r2, #31
   d55e6:	bf5c      	itt	pl
   d55e8:	2201      	movpl	r2, #1
   d55ea:	601a      	strpl	r2, [r3, #0]
   d55ec:	4770      	bx	lr
   d55ee:	bf00      	nop
   d55f0:	2003e7a4 	.word	0x2003e7a4
   d55f4:	2003e7a0 	.word	0x2003e7a0
   d55f8:	2003e79c 	.word	0x2003e79c
   d55fc:	2003e798 	.word	0x2003e798
   d5600:	2003e794 	.word	0x2003e794
   d5604:	2003e790 	.word	0x2003e790
   d5608:	2003e78c 	.word	0x2003e78c
   d560c:	2003e788 	.word	0x2003e788

000d5610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5610:	4b18      	ldr	r3, [pc, #96]	; (d5674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5612:	681a      	ldr	r2, [r3, #0]
   d5614:	07d1      	lsls	r1, r2, #31
   d5616:	bf5c      	itt	pl
   d5618:	2201      	movpl	r2, #1
   d561a:	601a      	strpl	r2, [r3, #0]
   d561c:	4b16      	ldr	r3, [pc, #88]	; (d5678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d561e:	681a      	ldr	r2, [r3, #0]
   d5620:	07d2      	lsls	r2, r2, #31
   d5622:	bf5c      	itt	pl
   d5624:	2201      	movpl	r2, #1
   d5626:	601a      	strpl	r2, [r3, #0]
   d5628:	4b14      	ldr	r3, [pc, #80]	; (d567c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d562a:	681a      	ldr	r2, [r3, #0]
   d562c:	07d0      	lsls	r0, r2, #31
   d562e:	bf5c      	itt	pl
   d5630:	2201      	movpl	r2, #1
   d5632:	601a      	strpl	r2, [r3, #0]
   d5634:	4b12      	ldr	r3, [pc, #72]	; (d5680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5636:	681a      	ldr	r2, [r3, #0]
   d5638:	07d1      	lsls	r1, r2, #31
   d563a:	bf5c      	itt	pl
   d563c:	2201      	movpl	r2, #1
   d563e:	601a      	strpl	r2, [r3, #0]
   d5640:	4b10      	ldr	r3, [pc, #64]	; (d5684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5642:	681a      	ldr	r2, [r3, #0]
   d5644:	07d2      	lsls	r2, r2, #31
   d5646:	bf5c      	itt	pl
   d5648:	2201      	movpl	r2, #1
   d564a:	601a      	strpl	r2, [r3, #0]
   d564c:	4b0e      	ldr	r3, [pc, #56]	; (d5688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d564e:	681a      	ldr	r2, [r3, #0]
   d5650:	07d0      	lsls	r0, r2, #31
   d5652:	bf5c      	itt	pl
   d5654:	2201      	movpl	r2, #1
   d5656:	601a      	strpl	r2, [r3, #0]
   d5658:	4b0c      	ldr	r3, [pc, #48]	; (d568c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d565a:	681a      	ldr	r2, [r3, #0]
   d565c:	07d1      	lsls	r1, r2, #31
   d565e:	bf5c      	itt	pl
   d5660:	2201      	movpl	r2, #1
   d5662:	601a      	strpl	r2, [r3, #0]
   d5664:	4b0a      	ldr	r3, [pc, #40]	; (d5690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5666:	681a      	ldr	r2, [r3, #0]
   d5668:	07d2      	lsls	r2, r2, #31
   d566a:	bf5c      	itt	pl
   d566c:	2201      	movpl	r2, #1
   d566e:	601a      	strpl	r2, [r3, #0]
   d5670:	4770      	bx	lr
   d5672:	bf00      	nop
   d5674:	2003e7c4 	.word	0x2003e7c4
   d5678:	2003e7c0 	.word	0x2003e7c0
   d567c:	2003e7bc 	.word	0x2003e7bc
   d5680:	2003e7b8 	.word	0x2003e7b8
   d5684:	2003e7b4 	.word	0x2003e7b4
   d5688:	2003e7b0 	.word	0x2003e7b0
   d568c:	2003e7ac 	.word	0x2003e7ac
   d5690:	2003e7a8 	.word	0x2003e7a8

000d5694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5694:	4b24      	ldr	r3, [pc, #144]	; (d5728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5696:	681a      	ldr	r2, [r3, #0]
   d5698:	07d0      	lsls	r0, r2, #31
   d569a:	bf5c      	itt	pl
   d569c:	2201      	movpl	r2, #1
   d569e:	601a      	strpl	r2, [r3, #0]
   d56a0:	4b22      	ldr	r3, [pc, #136]	; (d572c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d56a2:	681a      	ldr	r2, [r3, #0]
   d56a4:	07d1      	lsls	r1, r2, #31
   d56a6:	bf5c      	itt	pl
   d56a8:	2201      	movpl	r2, #1
   d56aa:	601a      	strpl	r2, [r3, #0]
   d56ac:	4b20      	ldr	r3, [pc, #128]	; (d5730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d56ae:	681a      	ldr	r2, [r3, #0]
   d56b0:	07d2      	lsls	r2, r2, #31
   d56b2:	bf5c      	itt	pl
   d56b4:	2201      	movpl	r2, #1
   d56b6:	601a      	strpl	r2, [r3, #0]
   d56b8:	4b1e      	ldr	r3, [pc, #120]	; (d5734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d56ba:	681a      	ldr	r2, [r3, #0]
   d56bc:	07d0      	lsls	r0, r2, #31
   d56be:	bf5c      	itt	pl
   d56c0:	2201      	movpl	r2, #1
   d56c2:	601a      	strpl	r2, [r3, #0]
   d56c4:	4b1c      	ldr	r3, [pc, #112]	; (d5738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d56c6:	681a      	ldr	r2, [r3, #0]
   d56c8:	07d1      	lsls	r1, r2, #31
   d56ca:	bf5c      	itt	pl
   d56cc:	2201      	movpl	r2, #1
   d56ce:	601a      	strpl	r2, [r3, #0]
   d56d0:	4b1a      	ldr	r3, [pc, #104]	; (d573c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d56d2:	681a      	ldr	r2, [r3, #0]
   d56d4:	07d2      	lsls	r2, r2, #31
   d56d6:	bf5c      	itt	pl
   d56d8:	2201      	movpl	r2, #1
   d56da:	601a      	strpl	r2, [r3, #0]
   d56dc:	4b18      	ldr	r3, [pc, #96]	; (d5740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d56de:	681a      	ldr	r2, [r3, #0]
   d56e0:	07d0      	lsls	r0, r2, #31
   d56e2:	bf5c      	itt	pl
   d56e4:	2201      	movpl	r2, #1
   d56e6:	601a      	strpl	r2, [r3, #0]
   d56e8:	4b16      	ldr	r3, [pc, #88]	; (d5744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d56ea:	681a      	ldr	r2, [r3, #0]
   d56ec:	07d1      	lsls	r1, r2, #31
   d56ee:	bf5c      	itt	pl
   d56f0:	2201      	movpl	r2, #1
   d56f2:	601a      	strpl	r2, [r3, #0]
   d56f4:	4b14      	ldr	r3, [pc, #80]	; (d5748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d56f6:	681a      	ldr	r2, [r3, #0]
   d56f8:	07d2      	lsls	r2, r2, #31
   d56fa:	bf5c      	itt	pl
   d56fc:	2201      	movpl	r2, #1
   d56fe:	601a      	strpl	r2, [r3, #0]
   d5700:	4b12      	ldr	r3, [pc, #72]	; (d574c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5702:	681a      	ldr	r2, [r3, #0]
   d5704:	07d0      	lsls	r0, r2, #31
   d5706:	bf5c      	itt	pl
   d5708:	2201      	movpl	r2, #1
   d570a:	601a      	strpl	r2, [r3, #0]
   d570c:	4b10      	ldr	r3, [pc, #64]	; (d5750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d570e:	681a      	ldr	r2, [r3, #0]
   d5710:	07d1      	lsls	r1, r2, #31
   d5712:	bf5c      	itt	pl
   d5714:	2201      	movpl	r2, #1
   d5716:	601a      	strpl	r2, [r3, #0]
   d5718:	4b0e      	ldr	r3, [pc, #56]	; (d5754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d571a:	681a      	ldr	r2, [r3, #0]
   d571c:	07d2      	lsls	r2, r2, #31
   d571e:	bf5c      	itt	pl
   d5720:	2201      	movpl	r2, #1
   d5722:	601a      	strpl	r2, [r3, #0]
   d5724:	4770      	bx	lr
   d5726:	bf00      	nop
   d5728:	2003e7f4 	.word	0x2003e7f4
   d572c:	2003e7f0 	.word	0x2003e7f0
   d5730:	2003e7ec 	.word	0x2003e7ec
   d5734:	2003e7e8 	.word	0x2003e7e8
   d5738:	2003e7e4 	.word	0x2003e7e4
   d573c:	2003e7e0 	.word	0x2003e7e0
   d5740:	2003e7dc 	.word	0x2003e7dc
   d5744:	2003e7d8 	.word	0x2003e7d8
   d5748:	2003e7d4 	.word	0x2003e7d4
   d574c:	2003e7d0 	.word	0x2003e7d0
   d5750:	2003e7cc 	.word	0x2003e7cc
   d5754:	2003e7c8 	.word	0x2003e7c8

000d5758 <round>:
   d5758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d575a:	ec53 2b10 	vmov	r2, r3, d0
   d575e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d5762:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
   d5766:	2813      	cmp	r0, #19
   d5768:	4619      	mov	r1, r3
   d576a:	ee10 7a10 	vmov	r7, s0
   d576e:	dc12      	bgt.n	d5796 <round+0x3e>
   d5770:	2800      	cmp	r0, #0
   d5772:	db32      	blt.n	d57da <round+0x82>
   d5774:	4e23      	ldr	r6, [pc, #140]	; (d5804 <round+0xac>)
   d5776:	4106      	asrs	r6, r0
   d5778:	4233      	tst	r3, r6
   d577a:	461d      	mov	r5, r3
   d577c:	d02a      	beq.n	d57d4 <round+0x7c>
   d577e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   d5782:	4101      	asrs	r1, r0
   d5784:	4429      	add	r1, r5
   d5786:	ea21 0106 	bic.w	r1, r1, r6
   d578a:	2400      	movs	r4, #0
   d578c:	460b      	mov	r3, r1
   d578e:	4622      	mov	r2, r4
   d5790:	ec43 2b10 	vmov	d0, r2, r3
   d5794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5796:	2833      	cmp	r0, #51	; 0x33
   d5798:	dd05      	ble.n	d57a6 <round+0x4e>
   d579a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d579e:	d022      	beq.n	d57e6 <round+0x8e>
   d57a0:	ec43 2b10 	vmov	d0, r2, r3
   d57a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d57a6:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
   d57aa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d57ae:	fa25 f404 	lsr.w	r4, r5, r4
   d57b2:	4222      	tst	r2, r4
   d57b4:	d0f4      	beq.n	d57a0 <round+0x48>
   d57b6:	2301      	movs	r3, #1
   d57b8:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
   d57bc:	fa03 f000 	lsl.w	r0, r3, r0
   d57c0:	19c0      	adds	r0, r0, r7
   d57c2:	bf28      	it	cs
   d57c4:	18c9      	addcs	r1, r1, r3
   d57c6:	ea20 0404 	bic.w	r4, r0, r4
   d57ca:	460b      	mov	r3, r1
   d57cc:	4622      	mov	r2, r4
   d57ce:	ec43 2b10 	vmov	d0, r2, r3
   d57d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d57d4:	2a00      	cmp	r2, #0
   d57d6:	d1d2      	bne.n	d577e <round+0x26>
   d57d8:	e7e2      	b.n	d57a0 <round+0x48>
   d57da:	3001      	adds	r0, #1
   d57dc:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
   d57e0:	d009      	beq.n	d57f6 <round+0x9e>
   d57e2:	2400      	movs	r4, #0
   d57e4:	e7d2      	b.n	d578c <round+0x34>
   d57e6:	ee10 0a10 	vmov	r0, s0
   d57ea:	4619      	mov	r1, r3
   d57ec:	f000 f812 	bl	d5814 <__adddf3>
   d57f0:	ec41 0b10 	vmov	d0, r0, r1
   d57f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d57f6:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
   d57fa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   d57fe:	2400      	movs	r4, #0
   d5800:	e7c4      	b.n	d578c <round+0x34>
   d5802:	bf00      	nop
   d5804:	000fffff 	.word	0x000fffff

000d5808 <__aeabi_drsub>:
   d5808:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d580c:	e002      	b.n	d5814 <__adddf3>
   d580e:	bf00      	nop

000d5810 <__aeabi_dsub>:
   d5810:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5814 <__adddf3>:
   d5814:	b530      	push	{r4, r5, lr}
   d5816:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d581a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d581e:	ea94 0f05 	teq	r4, r5
   d5822:	bf08      	it	eq
   d5824:	ea90 0f02 	teqeq	r0, r2
   d5828:	bf1f      	itttt	ne
   d582a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d582e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5832:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5836:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d583a:	f000 80e2 	beq.w	d5a02 <__adddf3+0x1ee>
   d583e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5842:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5846:	bfb8      	it	lt
   d5848:	426d      	neglt	r5, r5
   d584a:	dd0c      	ble.n	d5866 <__adddf3+0x52>
   d584c:	442c      	add	r4, r5
   d584e:	ea80 0202 	eor.w	r2, r0, r2
   d5852:	ea81 0303 	eor.w	r3, r1, r3
   d5856:	ea82 0000 	eor.w	r0, r2, r0
   d585a:	ea83 0101 	eor.w	r1, r3, r1
   d585e:	ea80 0202 	eor.w	r2, r0, r2
   d5862:	ea81 0303 	eor.w	r3, r1, r3
   d5866:	2d36      	cmp	r5, #54	; 0x36
   d5868:	bf88      	it	hi
   d586a:	bd30      	pophi	{r4, r5, pc}
   d586c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5870:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5874:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5878:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d587c:	d002      	beq.n	d5884 <__adddf3+0x70>
   d587e:	4240      	negs	r0, r0
   d5880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5884:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5888:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d588c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5890:	d002      	beq.n	d5898 <__adddf3+0x84>
   d5892:	4252      	negs	r2, r2
   d5894:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5898:	ea94 0f05 	teq	r4, r5
   d589c:	f000 80a7 	beq.w	d59ee <__adddf3+0x1da>
   d58a0:	f1a4 0401 	sub.w	r4, r4, #1
   d58a4:	f1d5 0e20 	rsbs	lr, r5, #32
   d58a8:	db0d      	blt.n	d58c6 <__adddf3+0xb2>
   d58aa:	fa02 fc0e 	lsl.w	ip, r2, lr
   d58ae:	fa22 f205 	lsr.w	r2, r2, r5
   d58b2:	1880      	adds	r0, r0, r2
   d58b4:	f141 0100 	adc.w	r1, r1, #0
   d58b8:	fa03 f20e 	lsl.w	r2, r3, lr
   d58bc:	1880      	adds	r0, r0, r2
   d58be:	fa43 f305 	asr.w	r3, r3, r5
   d58c2:	4159      	adcs	r1, r3
   d58c4:	e00e      	b.n	d58e4 <__adddf3+0xd0>
   d58c6:	f1a5 0520 	sub.w	r5, r5, #32
   d58ca:	f10e 0e20 	add.w	lr, lr, #32
   d58ce:	2a01      	cmp	r2, #1
   d58d0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d58d4:	bf28      	it	cs
   d58d6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d58da:	fa43 f305 	asr.w	r3, r3, r5
   d58de:	18c0      	adds	r0, r0, r3
   d58e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d58e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d58e8:	d507      	bpl.n	d58fa <__adddf3+0xe6>
   d58ea:	f04f 0e00 	mov.w	lr, #0
   d58ee:	f1dc 0c00 	rsbs	ip, ip, #0
   d58f2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d58f6:	eb6e 0101 	sbc.w	r1, lr, r1
   d58fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d58fe:	d31b      	bcc.n	d5938 <__adddf3+0x124>
   d5900:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5904:	d30c      	bcc.n	d5920 <__adddf3+0x10c>
   d5906:	0849      	lsrs	r1, r1, #1
   d5908:	ea5f 0030 	movs.w	r0, r0, rrx
   d590c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5910:	f104 0401 	add.w	r4, r4, #1
   d5914:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5918:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d591c:	f080 809a 	bcs.w	d5a54 <__adddf3+0x240>
   d5920:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5924:	bf08      	it	eq
   d5926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d592a:	f150 0000 	adcs.w	r0, r0, #0
   d592e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5932:	ea41 0105 	orr.w	r1, r1, r5
   d5936:	bd30      	pop	{r4, r5, pc}
   d5938:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d593c:	4140      	adcs	r0, r0
   d593e:	eb41 0101 	adc.w	r1, r1, r1
   d5942:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5946:	f1a4 0401 	sub.w	r4, r4, #1
   d594a:	d1e9      	bne.n	d5920 <__adddf3+0x10c>
   d594c:	f091 0f00 	teq	r1, #0
   d5950:	bf04      	itt	eq
   d5952:	4601      	moveq	r1, r0
   d5954:	2000      	moveq	r0, #0
   d5956:	fab1 f381 	clz	r3, r1
   d595a:	bf08      	it	eq
   d595c:	3320      	addeq	r3, #32
   d595e:	f1a3 030b 	sub.w	r3, r3, #11
   d5962:	f1b3 0220 	subs.w	r2, r3, #32
   d5966:	da0c      	bge.n	d5982 <__adddf3+0x16e>
   d5968:	320c      	adds	r2, #12
   d596a:	dd08      	ble.n	d597e <__adddf3+0x16a>
   d596c:	f102 0c14 	add.w	ip, r2, #20
   d5970:	f1c2 020c 	rsb	r2, r2, #12
   d5974:	fa01 f00c 	lsl.w	r0, r1, ip
   d5978:	fa21 f102 	lsr.w	r1, r1, r2
   d597c:	e00c      	b.n	d5998 <__adddf3+0x184>
   d597e:	f102 0214 	add.w	r2, r2, #20
   d5982:	bfd8      	it	le
   d5984:	f1c2 0c20 	rsble	ip, r2, #32
   d5988:	fa01 f102 	lsl.w	r1, r1, r2
   d598c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5990:	bfdc      	itt	le
   d5992:	ea41 010c 	orrle.w	r1, r1, ip
   d5996:	4090      	lslle	r0, r2
   d5998:	1ae4      	subs	r4, r4, r3
   d599a:	bfa2      	ittt	ge
   d599c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d59a0:	4329      	orrge	r1, r5
   d59a2:	bd30      	popge	{r4, r5, pc}
   d59a4:	ea6f 0404 	mvn.w	r4, r4
   d59a8:	3c1f      	subs	r4, #31
   d59aa:	da1c      	bge.n	d59e6 <__adddf3+0x1d2>
   d59ac:	340c      	adds	r4, #12
   d59ae:	dc0e      	bgt.n	d59ce <__adddf3+0x1ba>
   d59b0:	f104 0414 	add.w	r4, r4, #20
   d59b4:	f1c4 0220 	rsb	r2, r4, #32
   d59b8:	fa20 f004 	lsr.w	r0, r0, r4
   d59bc:	fa01 f302 	lsl.w	r3, r1, r2
   d59c0:	ea40 0003 	orr.w	r0, r0, r3
   d59c4:	fa21 f304 	lsr.w	r3, r1, r4
   d59c8:	ea45 0103 	orr.w	r1, r5, r3
   d59cc:	bd30      	pop	{r4, r5, pc}
   d59ce:	f1c4 040c 	rsb	r4, r4, #12
   d59d2:	f1c4 0220 	rsb	r2, r4, #32
   d59d6:	fa20 f002 	lsr.w	r0, r0, r2
   d59da:	fa01 f304 	lsl.w	r3, r1, r4
   d59de:	ea40 0003 	orr.w	r0, r0, r3
   d59e2:	4629      	mov	r1, r5
   d59e4:	bd30      	pop	{r4, r5, pc}
   d59e6:	fa21 f004 	lsr.w	r0, r1, r4
   d59ea:	4629      	mov	r1, r5
   d59ec:	bd30      	pop	{r4, r5, pc}
   d59ee:	f094 0f00 	teq	r4, #0
   d59f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d59f6:	bf06      	itte	eq
   d59f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d59fc:	3401      	addeq	r4, #1
   d59fe:	3d01      	subne	r5, #1
   d5a00:	e74e      	b.n	d58a0 <__adddf3+0x8c>
   d5a02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a06:	bf18      	it	ne
   d5a08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5a0c:	d029      	beq.n	d5a62 <__adddf3+0x24e>
   d5a0e:	ea94 0f05 	teq	r4, r5
   d5a12:	bf08      	it	eq
   d5a14:	ea90 0f02 	teqeq	r0, r2
   d5a18:	d005      	beq.n	d5a26 <__adddf3+0x212>
   d5a1a:	ea54 0c00 	orrs.w	ip, r4, r0
   d5a1e:	bf04      	itt	eq
   d5a20:	4619      	moveq	r1, r3
   d5a22:	4610      	moveq	r0, r2
   d5a24:	bd30      	pop	{r4, r5, pc}
   d5a26:	ea91 0f03 	teq	r1, r3
   d5a2a:	bf1e      	ittt	ne
   d5a2c:	2100      	movne	r1, #0
   d5a2e:	2000      	movne	r0, #0
   d5a30:	bd30      	popne	{r4, r5, pc}
   d5a32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5a36:	d105      	bne.n	d5a44 <__adddf3+0x230>
   d5a38:	0040      	lsls	r0, r0, #1
   d5a3a:	4149      	adcs	r1, r1
   d5a3c:	bf28      	it	cs
   d5a3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5a42:	bd30      	pop	{r4, r5, pc}
   d5a44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5a48:	bf3c      	itt	cc
   d5a4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5a4e:	bd30      	popcc	{r4, r5, pc}
   d5a50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5a58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5a5c:	f04f 0000 	mov.w	r0, #0
   d5a60:	bd30      	pop	{r4, r5, pc}
   d5a62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a66:	bf1a      	itte	ne
   d5a68:	4619      	movne	r1, r3
   d5a6a:	4610      	movne	r0, r2
   d5a6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5a70:	bf1c      	itt	ne
   d5a72:	460b      	movne	r3, r1
   d5a74:	4602      	movne	r2, r0
   d5a76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a7a:	bf06      	itte	eq
   d5a7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5a80:	ea91 0f03 	teqeq	r1, r3
   d5a84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5a88:	bd30      	pop	{r4, r5, pc}
   d5a8a:	bf00      	nop

000d5a8c <__aeabi_ui2d>:
   d5a8c:	f090 0f00 	teq	r0, #0
   d5a90:	bf04      	itt	eq
   d5a92:	2100      	moveq	r1, #0
   d5a94:	4770      	bxeq	lr
   d5a96:	b530      	push	{r4, r5, lr}
   d5a98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5aa0:	f04f 0500 	mov.w	r5, #0
   d5aa4:	f04f 0100 	mov.w	r1, #0
   d5aa8:	e750      	b.n	d594c <__adddf3+0x138>
   d5aaa:	bf00      	nop

000d5aac <__aeabi_i2d>:
   d5aac:	f090 0f00 	teq	r0, #0
   d5ab0:	bf04      	itt	eq
   d5ab2:	2100      	moveq	r1, #0
   d5ab4:	4770      	bxeq	lr
   d5ab6:	b530      	push	{r4, r5, lr}
   d5ab8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5abc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ac0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5ac4:	bf48      	it	mi
   d5ac6:	4240      	negmi	r0, r0
   d5ac8:	f04f 0100 	mov.w	r1, #0
   d5acc:	e73e      	b.n	d594c <__adddf3+0x138>
   d5ace:	bf00      	nop

000d5ad0 <__aeabi_f2d>:
   d5ad0:	0042      	lsls	r2, r0, #1
   d5ad2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5ad6:	ea4f 0131 	mov.w	r1, r1, rrx
   d5ada:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5ade:	bf1f      	itttt	ne
   d5ae0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5ae4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5ae8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5aec:	4770      	bxne	lr
   d5aee:	f092 0f00 	teq	r2, #0
   d5af2:	bf14      	ite	ne
   d5af4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5af8:	4770      	bxeq	lr
   d5afa:	b530      	push	{r4, r5, lr}
   d5afc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5b00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5b04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5b08:	e720      	b.n	d594c <__adddf3+0x138>
   d5b0a:	bf00      	nop

000d5b0c <__aeabi_ul2d>:
   d5b0c:	ea50 0201 	orrs.w	r2, r0, r1
   d5b10:	bf08      	it	eq
   d5b12:	4770      	bxeq	lr
   d5b14:	b530      	push	{r4, r5, lr}
   d5b16:	f04f 0500 	mov.w	r5, #0
   d5b1a:	e00a      	b.n	d5b32 <__aeabi_l2d+0x16>

000d5b1c <__aeabi_l2d>:
   d5b1c:	ea50 0201 	orrs.w	r2, r0, r1
   d5b20:	bf08      	it	eq
   d5b22:	4770      	bxeq	lr
   d5b24:	b530      	push	{r4, r5, lr}
   d5b26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5b2a:	d502      	bpl.n	d5b32 <__aeabi_l2d+0x16>
   d5b2c:	4240      	negs	r0, r0
   d5b2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5b32:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5b36:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5b3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5b3e:	f43f aedc 	beq.w	d58fa <__adddf3+0xe6>
   d5b42:	f04f 0203 	mov.w	r2, #3
   d5b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b4a:	bf18      	it	ne
   d5b4c:	3203      	addne	r2, #3
   d5b4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b52:	bf18      	it	ne
   d5b54:	3203      	addne	r2, #3
   d5b56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5b5a:	f1c2 0320 	rsb	r3, r2, #32
   d5b5e:	fa00 fc03 	lsl.w	ip, r0, r3
   d5b62:	fa20 f002 	lsr.w	r0, r0, r2
   d5b66:	fa01 fe03 	lsl.w	lr, r1, r3
   d5b6a:	ea40 000e 	orr.w	r0, r0, lr
   d5b6e:	fa21 f102 	lsr.w	r1, r1, r2
   d5b72:	4414      	add	r4, r2
   d5b74:	e6c1      	b.n	d58fa <__adddf3+0xe6>
   d5b76:	bf00      	nop

000d5b78 <__aeabi_dmul>:
   d5b78:	b570      	push	{r4, r5, r6, lr}
   d5b7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5b7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5b82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5b86:	bf1d      	ittte	ne
   d5b88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5b8c:	ea94 0f0c 	teqne	r4, ip
   d5b90:	ea95 0f0c 	teqne	r5, ip
   d5b94:	f000 f8de 	bleq	d5d54 <__aeabi_dmul+0x1dc>
   d5b98:	442c      	add	r4, r5
   d5b9a:	ea81 0603 	eor.w	r6, r1, r3
   d5b9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5ba2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5ba6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5baa:	bf18      	it	ne
   d5bac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5bb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5bb8:	d038      	beq.n	d5c2c <__aeabi_dmul+0xb4>
   d5bba:	fba0 ce02 	umull	ip, lr, r0, r2
   d5bbe:	f04f 0500 	mov.w	r5, #0
   d5bc2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5bc6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5bca:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5bce:	f04f 0600 	mov.w	r6, #0
   d5bd2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5bd6:	f09c 0f00 	teq	ip, #0
   d5bda:	bf18      	it	ne
   d5bdc:	f04e 0e01 	orrne.w	lr, lr, #1
   d5be0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5be4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5be8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5bec:	d204      	bcs.n	d5bf8 <__aeabi_dmul+0x80>
   d5bee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5bf2:	416d      	adcs	r5, r5
   d5bf4:	eb46 0606 	adc.w	r6, r6, r6
   d5bf8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5bfc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5c00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5c04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5c08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5c0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5c10:	bf88      	it	hi
   d5c12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5c16:	d81e      	bhi.n	d5c56 <__aeabi_dmul+0xde>
   d5c18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5c1c:	bf08      	it	eq
   d5c1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5c22:	f150 0000 	adcs.w	r0, r0, #0
   d5c26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5c2a:	bd70      	pop	{r4, r5, r6, pc}
   d5c2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5c30:	ea46 0101 	orr.w	r1, r6, r1
   d5c34:	ea40 0002 	orr.w	r0, r0, r2
   d5c38:	ea81 0103 	eor.w	r1, r1, r3
   d5c3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5c40:	bfc2      	ittt	gt
   d5c42:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5c46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5c4a:	bd70      	popgt	{r4, r5, r6, pc}
   d5c4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5c50:	f04f 0e00 	mov.w	lr, #0
   d5c54:	3c01      	subs	r4, #1
   d5c56:	f300 80ab 	bgt.w	d5db0 <__aeabi_dmul+0x238>
   d5c5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5c5e:	bfde      	ittt	le
   d5c60:	2000      	movle	r0, #0
   d5c62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5c66:	bd70      	pople	{r4, r5, r6, pc}
   d5c68:	f1c4 0400 	rsb	r4, r4, #0
   d5c6c:	3c20      	subs	r4, #32
   d5c6e:	da35      	bge.n	d5cdc <__aeabi_dmul+0x164>
   d5c70:	340c      	adds	r4, #12
   d5c72:	dc1b      	bgt.n	d5cac <__aeabi_dmul+0x134>
   d5c74:	f104 0414 	add.w	r4, r4, #20
   d5c78:	f1c4 0520 	rsb	r5, r4, #32
   d5c7c:	fa00 f305 	lsl.w	r3, r0, r5
   d5c80:	fa20 f004 	lsr.w	r0, r0, r4
   d5c84:	fa01 f205 	lsl.w	r2, r1, r5
   d5c88:	ea40 0002 	orr.w	r0, r0, r2
   d5c8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5c90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5c94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5c98:	fa21 f604 	lsr.w	r6, r1, r4
   d5c9c:	eb42 0106 	adc.w	r1, r2, r6
   d5ca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5ca4:	bf08      	it	eq
   d5ca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5caa:	bd70      	pop	{r4, r5, r6, pc}
   d5cac:	f1c4 040c 	rsb	r4, r4, #12
   d5cb0:	f1c4 0520 	rsb	r5, r4, #32
   d5cb4:	fa00 f304 	lsl.w	r3, r0, r4
   d5cb8:	fa20 f005 	lsr.w	r0, r0, r5
   d5cbc:	fa01 f204 	lsl.w	r2, r1, r4
   d5cc0:	ea40 0002 	orr.w	r0, r0, r2
   d5cc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5cc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5ccc:	f141 0100 	adc.w	r1, r1, #0
   d5cd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5cd4:	bf08      	it	eq
   d5cd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5cda:	bd70      	pop	{r4, r5, r6, pc}
   d5cdc:	f1c4 0520 	rsb	r5, r4, #32
   d5ce0:	fa00 f205 	lsl.w	r2, r0, r5
   d5ce4:	ea4e 0e02 	orr.w	lr, lr, r2
   d5ce8:	fa20 f304 	lsr.w	r3, r0, r4
   d5cec:	fa01 f205 	lsl.w	r2, r1, r5
   d5cf0:	ea43 0302 	orr.w	r3, r3, r2
   d5cf4:	fa21 f004 	lsr.w	r0, r1, r4
   d5cf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5cfc:	fa21 f204 	lsr.w	r2, r1, r4
   d5d00:	ea20 0002 	bic.w	r0, r0, r2
   d5d04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5d08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5d0c:	bf08      	it	eq
   d5d0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5d12:	bd70      	pop	{r4, r5, r6, pc}
   d5d14:	f094 0f00 	teq	r4, #0
   d5d18:	d10f      	bne.n	d5d3a <__aeabi_dmul+0x1c2>
   d5d1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5d1e:	0040      	lsls	r0, r0, #1
   d5d20:	eb41 0101 	adc.w	r1, r1, r1
   d5d24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d28:	bf08      	it	eq
   d5d2a:	3c01      	subeq	r4, #1
   d5d2c:	d0f7      	beq.n	d5d1e <__aeabi_dmul+0x1a6>
   d5d2e:	ea41 0106 	orr.w	r1, r1, r6
   d5d32:	f095 0f00 	teq	r5, #0
   d5d36:	bf18      	it	ne
   d5d38:	4770      	bxne	lr
   d5d3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5d3e:	0052      	lsls	r2, r2, #1
   d5d40:	eb43 0303 	adc.w	r3, r3, r3
   d5d44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5d48:	bf08      	it	eq
   d5d4a:	3d01      	subeq	r5, #1
   d5d4c:	d0f7      	beq.n	d5d3e <__aeabi_dmul+0x1c6>
   d5d4e:	ea43 0306 	orr.w	r3, r3, r6
   d5d52:	4770      	bx	lr
   d5d54:	ea94 0f0c 	teq	r4, ip
   d5d58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5d5c:	bf18      	it	ne
   d5d5e:	ea95 0f0c 	teqne	r5, ip
   d5d62:	d00c      	beq.n	d5d7e <__aeabi_dmul+0x206>
   d5d64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d68:	bf18      	it	ne
   d5d6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d6e:	d1d1      	bne.n	d5d14 <__aeabi_dmul+0x19c>
   d5d70:	ea81 0103 	eor.w	r1, r1, r3
   d5d74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d78:	f04f 0000 	mov.w	r0, #0
   d5d7c:	bd70      	pop	{r4, r5, r6, pc}
   d5d7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d82:	bf06      	itte	eq
   d5d84:	4610      	moveq	r0, r2
   d5d86:	4619      	moveq	r1, r3
   d5d88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d8c:	d019      	beq.n	d5dc2 <__aeabi_dmul+0x24a>
   d5d8e:	ea94 0f0c 	teq	r4, ip
   d5d92:	d102      	bne.n	d5d9a <__aeabi_dmul+0x222>
   d5d94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5d98:	d113      	bne.n	d5dc2 <__aeabi_dmul+0x24a>
   d5d9a:	ea95 0f0c 	teq	r5, ip
   d5d9e:	d105      	bne.n	d5dac <__aeabi_dmul+0x234>
   d5da0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5da4:	bf1c      	itt	ne
   d5da6:	4610      	movne	r0, r2
   d5da8:	4619      	movne	r1, r3
   d5daa:	d10a      	bne.n	d5dc2 <__aeabi_dmul+0x24a>
   d5dac:	ea81 0103 	eor.w	r1, r1, r3
   d5db0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5db4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5db8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5dbc:	f04f 0000 	mov.w	r0, #0
   d5dc0:	bd70      	pop	{r4, r5, r6, pc}
   d5dc2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5dc6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5dca:	bd70      	pop	{r4, r5, r6, pc}

000d5dcc <__aeabi_ddiv>:
   d5dcc:	b570      	push	{r4, r5, r6, lr}
   d5dce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5dd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5dd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5dda:	bf1d      	ittte	ne
   d5ddc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5de0:	ea94 0f0c 	teqne	r4, ip
   d5de4:	ea95 0f0c 	teqne	r5, ip
   d5de8:	f000 f8a7 	bleq	d5f3a <__aeabi_ddiv+0x16e>
   d5dec:	eba4 0405 	sub.w	r4, r4, r5
   d5df0:	ea81 0e03 	eor.w	lr, r1, r3
   d5df4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5df8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5dfc:	f000 8088 	beq.w	d5f10 <__aeabi_ddiv+0x144>
   d5e00:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5e04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5e08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5e0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5e10:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5e14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5e18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5e1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5e20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5e24:	429d      	cmp	r5, r3
   d5e26:	bf08      	it	eq
   d5e28:	4296      	cmpeq	r6, r2
   d5e2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5e2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5e32:	d202      	bcs.n	d5e3a <__aeabi_ddiv+0x6e>
   d5e34:	085b      	lsrs	r3, r3, #1
   d5e36:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e3a:	1ab6      	subs	r6, r6, r2
   d5e3c:	eb65 0503 	sbc.w	r5, r5, r3
   d5e40:	085b      	lsrs	r3, r3, #1
   d5e42:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5e4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5e4e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e52:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e56:	bf22      	ittt	cs
   d5e58:	1ab6      	subcs	r6, r6, r2
   d5e5a:	4675      	movcs	r5, lr
   d5e5c:	ea40 000c 	orrcs.w	r0, r0, ip
   d5e60:	085b      	lsrs	r3, r3, #1
   d5e62:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e66:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e6e:	bf22      	ittt	cs
   d5e70:	1ab6      	subcs	r6, r6, r2
   d5e72:	4675      	movcs	r5, lr
   d5e74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5e78:	085b      	lsrs	r3, r3, #1
   d5e7a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e7e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e82:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e86:	bf22      	ittt	cs
   d5e88:	1ab6      	subcs	r6, r6, r2
   d5e8a:	4675      	movcs	r5, lr
   d5e8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5e90:	085b      	lsrs	r3, r3, #1
   d5e92:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e96:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e9e:	bf22      	ittt	cs
   d5ea0:	1ab6      	subcs	r6, r6, r2
   d5ea2:	4675      	movcs	r5, lr
   d5ea4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5ea8:	ea55 0e06 	orrs.w	lr, r5, r6
   d5eac:	d018      	beq.n	d5ee0 <__aeabi_ddiv+0x114>
   d5eae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5eb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5eb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5eba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5ebe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5ec2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5ec6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5eca:	d1c0      	bne.n	d5e4e <__aeabi_ddiv+0x82>
   d5ecc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ed0:	d10b      	bne.n	d5eea <__aeabi_ddiv+0x11e>
   d5ed2:	ea41 0100 	orr.w	r1, r1, r0
   d5ed6:	f04f 0000 	mov.w	r0, #0
   d5eda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5ede:	e7b6      	b.n	d5e4e <__aeabi_ddiv+0x82>
   d5ee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ee4:	bf04      	itt	eq
   d5ee6:	4301      	orreq	r1, r0
   d5ee8:	2000      	moveq	r0, #0
   d5eea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5eee:	bf88      	it	hi
   d5ef0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5ef4:	f63f aeaf 	bhi.w	d5c56 <__aeabi_dmul+0xde>
   d5ef8:	ebb5 0c03 	subs.w	ip, r5, r3
   d5efc:	bf04      	itt	eq
   d5efe:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5f02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5f06:	f150 0000 	adcs.w	r0, r0, #0
   d5f0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5f0e:	bd70      	pop	{r4, r5, r6, pc}
   d5f10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5f14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5f18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5f1c:	bfc2      	ittt	gt
   d5f1e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5f22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5f26:	bd70      	popgt	{r4, r5, r6, pc}
   d5f28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f2c:	f04f 0e00 	mov.w	lr, #0
   d5f30:	3c01      	subs	r4, #1
   d5f32:	e690      	b.n	d5c56 <__aeabi_dmul+0xde>
   d5f34:	ea45 0e06 	orr.w	lr, r5, r6
   d5f38:	e68d      	b.n	d5c56 <__aeabi_dmul+0xde>
   d5f3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5f3e:	ea94 0f0c 	teq	r4, ip
   d5f42:	bf08      	it	eq
   d5f44:	ea95 0f0c 	teqeq	r5, ip
   d5f48:	f43f af3b 	beq.w	d5dc2 <__aeabi_dmul+0x24a>
   d5f4c:	ea94 0f0c 	teq	r4, ip
   d5f50:	d10a      	bne.n	d5f68 <__aeabi_ddiv+0x19c>
   d5f52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f56:	f47f af34 	bne.w	d5dc2 <__aeabi_dmul+0x24a>
   d5f5a:	ea95 0f0c 	teq	r5, ip
   d5f5e:	f47f af25 	bne.w	d5dac <__aeabi_dmul+0x234>
   d5f62:	4610      	mov	r0, r2
   d5f64:	4619      	mov	r1, r3
   d5f66:	e72c      	b.n	d5dc2 <__aeabi_dmul+0x24a>
   d5f68:	ea95 0f0c 	teq	r5, ip
   d5f6c:	d106      	bne.n	d5f7c <__aeabi_ddiv+0x1b0>
   d5f6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5f72:	f43f aefd 	beq.w	d5d70 <__aeabi_dmul+0x1f8>
   d5f76:	4610      	mov	r0, r2
   d5f78:	4619      	mov	r1, r3
   d5f7a:	e722      	b.n	d5dc2 <__aeabi_dmul+0x24a>
   d5f7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5f80:	bf18      	it	ne
   d5f82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5f86:	f47f aec5 	bne.w	d5d14 <__aeabi_dmul+0x19c>
   d5f8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5f8e:	f47f af0d 	bne.w	d5dac <__aeabi_dmul+0x234>
   d5f92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5f96:	f47f aeeb 	bne.w	d5d70 <__aeabi_dmul+0x1f8>
   d5f9a:	e712      	b.n	d5dc2 <__aeabi_dmul+0x24a>

000d5f9c <__gedf2>:
   d5f9c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d5fa0:	e006      	b.n	d5fb0 <__cmpdf2+0x4>
   d5fa2:	bf00      	nop

000d5fa4 <__ledf2>:
   d5fa4:	f04f 0c01 	mov.w	ip, #1
   d5fa8:	e002      	b.n	d5fb0 <__cmpdf2+0x4>
   d5faa:	bf00      	nop

000d5fac <__cmpdf2>:
   d5fac:	f04f 0c01 	mov.w	ip, #1
   d5fb0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5fb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5fb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5fbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5fc0:	bf18      	it	ne
   d5fc2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5fc6:	d01b      	beq.n	d6000 <__cmpdf2+0x54>
   d5fc8:	b001      	add	sp, #4
   d5fca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5fce:	bf0c      	ite	eq
   d5fd0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5fd4:	ea91 0f03 	teqne	r1, r3
   d5fd8:	bf02      	ittt	eq
   d5fda:	ea90 0f02 	teqeq	r0, r2
   d5fde:	2000      	moveq	r0, #0
   d5fe0:	4770      	bxeq	lr
   d5fe2:	f110 0f00 	cmn.w	r0, #0
   d5fe6:	ea91 0f03 	teq	r1, r3
   d5fea:	bf58      	it	pl
   d5fec:	4299      	cmppl	r1, r3
   d5fee:	bf08      	it	eq
   d5ff0:	4290      	cmpeq	r0, r2
   d5ff2:	bf2c      	ite	cs
   d5ff4:	17d8      	asrcs	r0, r3, #31
   d5ff6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5ffa:	f040 0001 	orr.w	r0, r0, #1
   d5ffe:	4770      	bx	lr
   d6000:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6004:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6008:	d102      	bne.n	d6010 <__cmpdf2+0x64>
   d600a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d600e:	d107      	bne.n	d6020 <__cmpdf2+0x74>
   d6010:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6014:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6018:	d1d6      	bne.n	d5fc8 <__cmpdf2+0x1c>
   d601a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d601e:	d0d3      	beq.n	d5fc8 <__cmpdf2+0x1c>
   d6020:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6024:	4770      	bx	lr
   d6026:	bf00      	nop

000d6028 <__aeabi_cdrcmple>:
   d6028:	4684      	mov	ip, r0
   d602a:	4610      	mov	r0, r2
   d602c:	4662      	mov	r2, ip
   d602e:	468c      	mov	ip, r1
   d6030:	4619      	mov	r1, r3
   d6032:	4663      	mov	r3, ip
   d6034:	e000      	b.n	d6038 <__aeabi_cdcmpeq>
   d6036:	bf00      	nop

000d6038 <__aeabi_cdcmpeq>:
   d6038:	b501      	push	{r0, lr}
   d603a:	f7ff ffb7 	bl	d5fac <__cmpdf2>
   d603e:	2800      	cmp	r0, #0
   d6040:	bf48      	it	mi
   d6042:	f110 0f00 	cmnmi.w	r0, #0
   d6046:	bd01      	pop	{r0, pc}

000d6048 <__aeabi_dcmpeq>:
   d6048:	f84d ed08 	str.w	lr, [sp, #-8]!
   d604c:	f7ff fff4 	bl	d6038 <__aeabi_cdcmpeq>
   d6050:	bf0c      	ite	eq
   d6052:	2001      	moveq	r0, #1
   d6054:	2000      	movne	r0, #0
   d6056:	f85d fb08 	ldr.w	pc, [sp], #8
   d605a:	bf00      	nop

000d605c <__aeabi_dcmplt>:
   d605c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6060:	f7ff ffea 	bl	d6038 <__aeabi_cdcmpeq>
   d6064:	bf34      	ite	cc
   d6066:	2001      	movcc	r0, #1
   d6068:	2000      	movcs	r0, #0
   d606a:	f85d fb08 	ldr.w	pc, [sp], #8
   d606e:	bf00      	nop

000d6070 <__aeabi_dcmple>:
   d6070:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6074:	f7ff ffe0 	bl	d6038 <__aeabi_cdcmpeq>
   d6078:	bf94      	ite	ls
   d607a:	2001      	movls	r0, #1
   d607c:	2000      	movhi	r0, #0
   d607e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6082:	bf00      	nop

000d6084 <__aeabi_dcmpge>:
   d6084:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6088:	f7ff ffce 	bl	d6028 <__aeabi_cdrcmple>
   d608c:	bf94      	ite	ls
   d608e:	2001      	movls	r0, #1
   d6090:	2000      	movhi	r0, #0
   d6092:	f85d fb08 	ldr.w	pc, [sp], #8
   d6096:	bf00      	nop

000d6098 <__aeabi_dcmpgt>:
   d6098:	f84d ed08 	str.w	lr, [sp, #-8]!
   d609c:	f7ff ffc4 	bl	d6028 <__aeabi_cdrcmple>
   d60a0:	bf34      	ite	cc
   d60a2:	2001      	movcc	r0, #1
   d60a4:	2000      	movcs	r0, #0
   d60a6:	f85d fb08 	ldr.w	pc, [sp], #8
   d60aa:	bf00      	nop

000d60ac <__cxa_atexit>:
   d60ac:	b510      	push	{r4, lr}
   d60ae:	4c05      	ldr	r4, [pc, #20]	; (d60c4 <__cxa_atexit+0x18>)
   d60b0:	4613      	mov	r3, r2
   d60b2:	b12c      	cbz	r4, d60c0 <__cxa_atexit+0x14>
   d60b4:	460a      	mov	r2, r1
   d60b6:	4601      	mov	r1, r0
   d60b8:	2002      	movs	r0, #2
   d60ba:	f3af 8000 	nop.w
   d60be:	bd10      	pop	{r4, pc}
   d60c0:	4620      	mov	r0, r4
   d60c2:	bd10      	pop	{r4, pc}
   d60c4:	00000000 	.word	0x00000000

000d60c8 <memcpy>:
   d60c8:	b510      	push	{r4, lr}
   d60ca:	1e43      	subs	r3, r0, #1
   d60cc:	440a      	add	r2, r1
   d60ce:	4291      	cmp	r1, r2
   d60d0:	d004      	beq.n	d60dc <memcpy+0x14>
   d60d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d60d6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d60da:	e7f8      	b.n	d60ce <memcpy+0x6>
   d60dc:	bd10      	pop	{r4, pc}

000d60de <memset>:
   d60de:	4402      	add	r2, r0
   d60e0:	4603      	mov	r3, r0
   d60e2:	4293      	cmp	r3, r2
   d60e4:	d002      	beq.n	d60ec <memset+0xe>
   d60e6:	f803 1b01 	strb.w	r1, [r3], #1
   d60ea:	e7fa      	b.n	d60e2 <memset+0x4>
   d60ec:	4770      	bx	lr

000d60ee <strlen>:
   d60ee:	4603      	mov	r3, r0
   d60f0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d60f4:	2a00      	cmp	r2, #0
   d60f6:	d1fb      	bne.n	d60f0 <strlen+0x2>
   d60f8:	1a18      	subs	r0, r3, r0
   d60fa:	3801      	subs	r0, #1
   d60fc:	4770      	bx	lr

000d60fe <link_code_end>:
	...

000d6100 <dynalib_user>:
   d6100:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6110:	0000 0000 530a 7465 7075 2e2e 002e 6574     .....Setup....te
   d6120:	706d 7265 7461 7275 0065 6f72 6174 6974     mperature.rotati
   d6130:	6e6f 6400 6169 546c 6d65 0070 4844 2054     on.dialTemp.DHT 
   d6140:	6542 6967 006e 6562 6967 696e 676e 7220     Begin.begining r
   d6150:	6165 2864 0029 6162 6c69 6e69 0067 7543     ead().bailing.Cu
   d6160:	7272 6974 656d 203a 2000 614c 7473 6974     rrtime: . Lastti
   d6170:	656d 203a 6100 6f62 7475 7420 206f 6572     me: .about to re
   d6180:	6461 2c00 0020 3d20 203f 5200 6165 6964     ad., . =? .Readi
   d6190:	676e 5420 6d65 0070 6572 6461 6e69 2067     ng Temp.reading 
   d61a0:	7568 696d 6964 7974 0000 0000               humidity....

000d61ac <_ZTVN5spark13EthernetClassE>:
	...
   d61b4:	4a9f 000d 4a95 000d 4a8b 000d 4a81 000d     .J...J...J...J..
   d61c4:	4a75 000d 4a69 000d 4a5d 000d 4a55 000d     uJ..iJ..]J..UJ..
   d61d4:	4a4b 000d 4a41 000d 4dd9 000d               KJ..AJ...M..

000d61e0 <_ZTV7TwoWire>:
	...
   d61e8:	4abd 000d 4b07 000d 4adf 000d 4abf 000d     .J...K...J...J..
   d61f8:	4ae7 000d 4aef 000d 4af7 000d 4aff 000d     .J...J...J...J..

000d6208 <_ZTV9IPAddress>:
	...
   d6210:	4b57 000d 4b49 000d 4b4b 000d 0066 6e6c     WK..IK..KK..f.ln
   d6220:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d6230:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d6240:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d6250:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d6260:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d6270:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d6280:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d6290:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d62a0:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d62b0:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d62c0:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d62d0:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d62e0:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d62f0:	6170 696e 0063 6c61 006c 0000               panic.all...

000d62fc <_ZTVN5spark9MeshClassE>:
	...
   d6304:	4c9b 000d 4c91 000d 4c87 000d 4c7d 000d     .L...L...L..}L..
   d6314:	4c71 000d 4c65 000d 4c59 000d 4c51 000d     qL..eL..YL..QL..
   d6324:	4c47 000d 4c3d 000d 4dd9 000d               GL..=L...M..

000d6330 <_ZTVN5spark12NetworkClassE>:
	...
   d6338:	4d71 000d 4d7b 000d 4d85 000d 4d8f 000d     qM..{M...M...M..
   d6348:	4d99 000d 4da5 000d 4db1 000d 4dbd 000d     .M...M...M...M..
   d6358:	4dc5 000d 4dcf 000d 4dd9 000d               .M...M...M..

000d6364 <_ZTV8SPIClass>:
	...
   d636c:	4fe9 000d 4feb 000d 005a 2b25 3330 3a64     .O...O..Z.%+03d:
   d637c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d638c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d639c:	0000 0000                                   ....

000d63a0 <_ZTV11USARTSerial>:
	...
   d63a8:	5059 000d 507d 000d 5089 000d 4e71 000d     YP..}P...P..qN..
   d63b8:	5065 000d 5071 000d 506b 000d 5077 000d     eP..qP..kP..wP..
   d63c8:	505b 000d 505f 000d                         [P.._P..

000d63d0 <_ZTV9USBSerial>:
	...
   d63d8:	5131 000d 5175 000d 514f 000d 4e71 000d     1Q..uQ..OQ..qN..
   d63e8:	5149 000d 5133 000d 513b 000d 516f 000d     IQ..3Q..;Q..oQ..
   d63f8:	5143 000d 512d 000d                         CQ..-Q..

000d6400 <_ZTVN5spark9WiFiClassE>:
	...
   d6408:	526b 000d 5261 000d 5257 000d 520d 000d     kR..aR..WR...R..
   d6418:	524b 000d 523f 000d 5233 000d 522b 000d     KR..?R..3R..+R..
   d6428:	5221 000d 5217 000d 4dd9 000d               !R...R...M..

000d6434 <link_const_variable_data_end>:
   d6434:	000d4319 	.word	0x000d4319
   d6438:	000d465d 	.word	0x000d465d
   d643c:	000d4aa9 	.word	0x000d4aa9
   d6440:	000d4c2d 	.word	0x000d4c2d
   d6444:	000d4d25 	.word	0x000d4d25
   d6448:	000d4e5d 	.word	0x000d4e5d
   d644c:	000d4fcd 	.word	0x000d4fcd
   d6450:	000d5029 	.word	0x000d5029
   d6454:	000d5045 	.word	0x000d5045
   d6458:	000d5275 	.word	0x000d5275
   d645c:	000d5479 	.word	0x000d5479
   d6460:	000d54c9 	.word	0x000d54c9
   d6464:	000d558d 	.word	0x000d558d
   d6468:	000d5611 	.word	0x000d5611
   d646c:	000d5695 	.word	0x000d5695
